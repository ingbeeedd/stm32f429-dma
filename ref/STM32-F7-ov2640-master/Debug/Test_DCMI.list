
Test_DCMI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c4c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08003e4c  08003e4c  00013e4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800414c  0800414c  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08004150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00025a68  20000070  080041c0  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20025ad8  080041c0  00025ad8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a535  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000032e6  00000000  00000000  0003a5d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000073a9  00000000  00000000  0003d8b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a70  00000000  00000000  00044c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e40  00000000  00000000  000456d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006d9e  00000000  00000000  00046518  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000424c  00000000  00000000  0004d2b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00051502  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000205c  00000000  00000000  00051580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003e34 	.word	0x08003e34

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003e34 	.word	0x08003e34

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <HAL_InitTick+0x3c>)
{
 8000604:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_InitTick+0x40>)
 8000608:	7818      	ldrb	r0, [r3, #0]
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000612:	6810      	ldr	r0, [r2, #0]
 8000614:	fbb0 f0f3 	udiv	r0, r0, r3
 8000618:	f000 f89c 	bl	8000754 <HAL_SYSTICK_Config>
 800061c:	4604      	mov	r4, r0
 800061e:	b958      	cbnz	r0, 8000638 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000620:	2d0f      	cmp	r5, #15
 8000622:	d809      	bhi.n	8000638 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	4602      	mov	r2, r0
 8000626:	4629      	mov	r1, r5
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f000 f84e 	bl	80006cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_InitTick+0x44>)
 8000632:	4620      	mov	r0, r4
 8000634:	601d      	str	r5, [r3, #0]
 8000636:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000638:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800063a:	bd38      	pop	{r3, r4, r5, pc}
 800063c:	20000000 	.word	0x20000000
 8000640:	20000008 	.word	0x20000008
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_Init>:
{
 8000648:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064a:	2003      	movs	r0, #3
 800064c:	f000 f82c 	bl	80006a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ffd5 	bl	8000600 <HAL_InitTick>
  HAL_MspInit();
 8000656:	f002 fdbd 	bl	80031d4 <HAL_MspInit>
}
 800065a:	2000      	movs	r0, #0
 800065c:	bd08      	pop	{r3, pc}
	...

08000660 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000660:	4a03      	ldr	r2, [pc, #12]	; (8000670 <HAL_IncTick+0x10>)
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <HAL_IncTick+0x14>)
 8000664:	6811      	ldr	r1, [r2, #0]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	440b      	add	r3, r1
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20025898 	.word	0x20025898
 8000674:	20000000 	.word	0x20000000

08000678 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000678:	4b01      	ldr	r3, [pc, #4]	; (8000680 <HAL_GetTick+0x8>)
 800067a:	6818      	ldr	r0, [r3, #0]
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20025898 	.word	0x20025898

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b538      	push	{r3, r4, r5, lr}
 8000686:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000688:	f7ff fff6 	bl	8000678 <HAL_GetTick>
 800068c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000690:	bf1e      	ittt	ne
 8000692:	4b04      	ldrne	r3, [pc, #16]	; (80006a4 <HAL_Delay+0x20>)
 8000694:	781b      	ldrbne	r3, [r3, #0]
 8000696:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000698:	f7ff ffee 	bl	8000678 <HAL_GetTick>
 800069c:	1b40      	subs	r0, r0, r5
 800069e:	4284      	cmp	r4, r0
 80006a0:	d8fa      	bhi.n	8000698 <HAL_Delay+0x14>
  {
  }
}
 80006a2:	bd38      	pop	{r3, r4, r5, pc}
 80006a4:	20000000 	.word	0x20000000

080006a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006aa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006b6:	041b      	lsls	r3, r3, #16
 80006b8:	0c1b      	lsrs	r3, r3, #16
 80006ba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006c2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006c4:	60d3      	str	r3, [r2, #12]
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	68dc      	ldr	r4, [r3, #12]
 80006d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006dc:	2b04      	cmp	r3, #4
 80006de:	bf28      	it	cs
 80006e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e8:	bf8c      	ite	hi
 80006ea:	3c03      	subhi	r4, #3
 80006ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ee:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80006f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80006f8:	ea01 0103 	and.w	r1, r1, r3
 80006fc:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	fa05 f404 	lsl.w	r4, r5, r4
 8000704:	f104 34ff 	add.w	r4, r4, #4294967295
 8000708:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	ea42 0201 	orr.w	r2, r2, r1
 8000710:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000714:	da05      	bge.n	8000722 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	f000 000f 	and.w	r0, r0, #15
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_NVIC_SetPriority+0x6c>)
 800071e:	541a      	strb	r2, [r3, r0]
 8000720:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800072c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00
 8000738:	e000ed14 	.word	0xe000ed14

0800073c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800073c:	0942      	lsrs	r2, r0, #5
 800073e:	2301      	movs	r3, #1
 8000740:	f000 001f 	and.w	r0, r0, #31
 8000744:	fa03 f000 	lsl.w	r0, r3, r0
 8000748:	4b01      	ldr	r3, [pc, #4]	; (8000750 <HAL_NVIC_EnableIRQ+0x14>)
 800074a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100

08000754 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	3801      	subs	r0, #1
 8000756:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800075a:	d20a      	bcs.n	8000772 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	21f0      	movs	r1, #240	; 0xf0
 8000760:	4a06      	ldr	r2, [pc, #24]	; (800077c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000764:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000772:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000e010 	.word	0xe000e010
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8000780:	b510      	push	{r4, lr}
  uint32_t tmp = 0;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000782:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if(hdcmi->XferCount != 0)
 8000784:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000786:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000788:	b1c3      	cbz	r3, 80007bc <DCMI_DMAXferCplt+0x3c>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800078a:	6803      	ldr	r3, [r0, #0]
 800078c:	6819      	ldr	r1, [r3, #0]
    if(((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 800078e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000790:	f012 0201 	ands.w	r2, r2, #1
 8000794:	d10b      	bne.n	80007ae <DCMI_DMAXferCplt+0x2e>
 8000796:	0309      	lsls	r1, r1, #12
 8000798:	d509      	bpl.n	80007ae <DCMI_DMAXferCplt+0x2e>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800079a:	68db      	ldr	r3, [r3, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8*hdcmi->XferSize)), MEMORY0);
 800079c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8*hdcmi->XferSize)), MEMORY1);
 800079e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80007a2:	f000 fd33 	bl	800120c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80007a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007a8:	3b01      	subs	r3, #1
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
  {
    tmp = hdcmi->pBuffPtr;
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4*hdcmi->XferSize));
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80007aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80007ac:	e00c      	b.n	80007c8 <DCMI_DMAXferCplt+0x48>
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	0312      	lsls	r2, r2, #12
 80007b2:	d409      	bmi.n	80007c8 <DCMI_DMAXferCplt+0x48>
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80007b4:	691b      	ldr	r3, [r3, #16]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8*hdcmi->XferSize)), MEMORY1);
 80007b6:	2201      	movs	r2, #1
 80007b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80007ba:	e7f0      	b.n	800079e <DCMI_DMAXferCplt+0x1e>
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 80007bc:	6803      	ldr	r3, [r0, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	0311      	lsls	r1, r2, #12
 80007c2:	d511      	bpl.n	80007e8 <DCMI_DMAXferCplt+0x68>
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80007c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007c6:	60da      	str	r2, [r3, #12]
  }

  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80007c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d10a      	bne.n	80007e6 <DCMI_DMAXferCplt+0x66>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	68da      	ldr	r2, [r3, #12]
 80007d4:	f042 0201 	orr.w	r2, r2, #1
 80007d8:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	079b      	lsls	r3, r3, #30
 80007de:	d502      	bpl.n	80007e6 <DCMI_DMAXferCplt+0x66>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 80007e0:	2301      	movs	r3, #1
 80007e2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80007e6:	bd10      	pop	{r4, pc}
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	0312      	lsls	r2, r2, #12
 80007ec:	d4ec      	bmi.n	80007c8 <DCMI_DMAXferCplt+0x48>
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4*hdcmi->XferSize));
 80007ee:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80007f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007f2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80007f6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80007f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007fa:	e7d6      	b.n	80007aa <DCMI_DMAXferCplt+0x2a>

080007fc <HAL_DCMI_Init>:
{     
 80007fc:	b538      	push	{r3, r4, r5, lr}
  if(hdcmi == NULL)
 80007fe:	4604      	mov	r4, r0
 8000800:	2800      	cmp	r0, #0
 8000802:	d03d      	beq.n	8000880 <HAL_DCMI_Init+0x84>
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000804:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000808:	b90b      	cbnz	r3, 800080e <HAL_DCMI_Init+0x12>
    HAL_DCMI_MspInit(hdcmi);
 800080a:	f002 fcfb 	bl	8003204 <HAL_DCMI_MspInit>
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800080e:	6822      	ldr	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000810:	2302      	movs	r3, #2
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000812:	68e5      	ldr	r5, [r4, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000814:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <HAL_DCMI_Init+0x88>)
 800081a:	6811      	ldr	r1, [r2, #0]
 800081c:	400b      	ands	r3, r1
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800081e:	6861      	ldr	r1, [r4, #4]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000820:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000822:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000824:	6963      	ldr	r3, [r4, #20]
 8000826:	6810      	ldr	r0, [r2, #0]
 8000828:	ea43 0301 	orr.w	r3, r3, r1
 800082c:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000830:	6925      	ldr	r5, [r4, #16]
 8000832:	ea43 0305 	orr.w	r3, r3, r5
 8000836:	68a5      	ldr	r5, [r4, #8]
 8000838:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800083c:	69a5      	ldr	r5, [r4, #24]
 800083e:	ea43 0305 	orr.w	r3, r3, r5
 8000842:	6a25      	ldr	r5, [r4, #32]
 8000844:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000848:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800084a:	ea43 0305 	orr.w	r3, r3, r5
 800084e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000850:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000854:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000856:	ea43 0305 	orr.w	r3, r3, r5
 800085a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800085c:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000860:	ea43 0300 	orr.w	r3, r3, r0
 8000864:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000866:	d101      	bne.n	800086c <HAL_DCMI_Init+0x70>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000868:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800086a:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800086c:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800086e:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000870:	f043 031e 	orr.w	r3, r3, #30
 8000874:	60d3      	str	r3, [r2, #12]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000876:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000878:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800087a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800087e:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8000880:	2001      	movs	r0, #1
}
 8000882:	bd38      	pop	{r3, r4, r5, pc}
 8000884:	ffe0f007 	.word	0xffe0f007

08000888 <HAL_DCMI_Start_DMA>:
{  
 8000888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800088a:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 800088c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
{  
 8000890:	4616      	mov	r6, r2
  __HAL_LOCK(hdcmi);
 8000892:	2801      	cmp	r0, #1
 8000894:	f04f 0002 	mov.w	r0, #2
 8000898:	d02d      	beq.n	80008f6 <HAL_DCMI_Start_DMA+0x6e>
  __HAL_DCMI_ENABLE(hdcmi);
 800089a:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hdcmi);
 800089c:	f04f 0e01 	mov.w	lr, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80008a0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  if(Length <= 0xFFFF)
 80008a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  __HAL_DCMI_ENABLE(hdcmi);
 80008a8:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hdcmi);
 80008aa:	f884 e034 	strb.w	lr, [r4, #52]	; 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 80008ae:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80008b2:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8000940 <HAL_DCMI_Start_DMA+0xb8>
  __HAL_DCMI_ENABLE(hdcmi);
 80008b6:	6028      	str	r0, [r5, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80008b8:	6828      	ldr	r0, [r5, #0]
 80008ba:	f020 0002 	bic.w	r0, r0, #2
 80008be:	6028      	str	r0, [r5, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80008c0:	6828      	ldr	r0, [r5, #0]
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80008c6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80008c8:	6029      	str	r1, [r5, #0]
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80008ca:	491c      	ldr	r1, [pc, #112]	; (800093c <HAL_DCMI_Start_DMA+0xb4>)
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80008cc:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80008d0:	64c1      	str	r1, [r0, #76]	; 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80008d2:	f04f 0100 	mov.w	r1, #0
 80008d6:	6501      	str	r1, [r0, #80]	; 0x50
  hdcmi->XferCount = 0;
 80008d8:	63a1      	str	r1, [r4, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80008da:	6421      	str	r1, [r4, #64]	; 0x40
  if(Length <= 0xFFFF)
 80008dc:	d20d      	bcs.n	80008fa <HAL_DCMI_Start_DMA+0x72>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 80008de:	f105 0128 	add.w	r1, r5, #40	; 0x28
 80008e2:	f000 f95b 	bl	8000b9c <HAL_DMA_Start_IT>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80008e6:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdcmi);
 80008e8:	2000      	movs	r0, #0
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80008ea:	6813      	ldr	r3, [r2, #0]
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hdcmi);
 80008f2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80008f6:	b003      	add	sp, #12
 80008f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt; 
 80008fa:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
    hdcmi->XferCount = 1;
 80008fe:	f8c4 e038 	str.w	lr, [r4, #56]	; 0x38
    hdcmi->pBuffPtr = pData;
 8000902:	6462      	str	r2, [r4, #68]	; 0x44
    hdcmi->XferSize = Length;
 8000904:	63e3      	str	r3, [r4, #60]	; 0x3c
    while(hdcmi->XferSize > 0xFFFF)
 8000906:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800090c:	d20f      	bcs.n	800092e <HAL_DCMI_Start_DMA+0xa6>
    hdcmi->XferCount = (hdcmi->XferCount - 2);
 800090e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8000910:	f105 0128 	add.w	r1, r5, #40	; 0x28
    hdcmi->XferCount = (hdcmi->XferCount - 2);
 8000914:	3b02      	subs	r3, #2
 8000916:	63a3      	str	r3, [r4, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8000918:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800091a:	6423      	str	r3, [r4, #64]	; 0x40
    SecondMemAddress = (uint32_t)(pData + (4*hdcmi->XferSize));
 800091c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 800091e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000920:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8000924:	9200      	str	r2, [sp, #0]
 8000926:	4632      	mov	r2, r6
 8000928:	f000 fa84 	bl	8000e34 <HAL_DMAEx_MultiBufferStart_IT>
 800092c:	e7db      	b.n	80008e6 <HAL_DCMI_Start_DMA+0x5e>
      hdcmi->XferSize = (hdcmi->XferSize/2);
 800092e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2;
 8000934:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	63a3      	str	r3, [r4, #56]	; 0x38
 800093a:	e7e4      	b.n	8000906 <HAL_DCMI_Start_DMA+0x7e>
 800093c:	080009bd 	.word	0x080009bd
 8000940:	08000781 	.word	0x08000781

08000944 <HAL_DCMI_Stop>:
{
 8000944:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdcmi);
 8000946:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 800094a:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 800094c:	2b01      	cmp	r3, #1
 800094e:	d031      	beq.n	80009b4 <HAL_DCMI_Stop+0x70>
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock /8/1000);
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <HAL_DCMI_Stop+0x74>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000958:	fbb2 f3f3 	udiv	r3, r2, r3
 800095c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000960:	435a      	muls	r2, r3
  __HAL_LOCK(hdcmi);
 8000962:	2301      	movs	r3, #1
 8000964:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000968:	2302      	movs	r3, #2
 800096a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800096e:	6803      	ldr	r3, [r0, #0]
 8000970:	6819      	ldr	r1, [r3, #0]
 8000972:	f021 0101 	bic.w	r1, r1, #1
 8000976:	6019      	str	r1, [r3, #0]
    if (count-- == 0)
 8000978:	f112 32ff 	adds.w	r2, r2, #4294967295
 800097c:	d215      	bcs.n	80009aa <HAL_DCMI_Stop+0x66>
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800097e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      status = HAL_TIMEOUT;
 8000980:	2503      	movs	r5, #3
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8000982:	f042 0220 	orr.w	r2, r2, #32
 8000986:	64e2      	str	r2, [r4, #76]	; 0x4c
  __HAL_DCMI_DISABLE(hdcmi);
 8000988:	681a      	ldr	r2, [r3, #0]
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 800098a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  __HAL_DCMI_DISABLE(hdcmi);
 800098c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000990:	601a      	str	r2, [r3, #0]
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8000992:	f000 f940 	bl	8000c16 <HAL_DMA_Abort>
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8000996:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000998:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdcmi->State = HAL_DCMI_STATE_READY;
 800099a:	2301      	movs	r3, #1
 800099c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 80009a0:	2300      	movs	r3, #0
 80009a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80009a6:	4628      	mov	r0, r5
 80009a8:	bd38      	pop	{r3, r4, r5, pc}
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0);
 80009aa:	681d      	ldr	r5, [r3, #0]
 80009ac:	f015 0501 	ands.w	r5, r5, #1
 80009b0:	d1e2      	bne.n	8000978 <HAL_DCMI_Stop+0x34>
 80009b2:	e7e9      	b.n	8000988 <HAL_DCMI_Stop+0x44>
  __HAL_LOCK(hdcmi);
 80009b4:	2502      	movs	r5, #2
 80009b6:	e7f6      	b.n	80009a6 <HAL_DCMI_Stop+0x62>
 80009b8:	20000008 	.word	0x20000008

080009bc <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009bc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80009be:	b508      	push	{r3, lr}
 
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80009c0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80009c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d006      	beq.n	80009d6 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80009c8:	2301      	movs	r3, #1
 80009ca:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80009ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80009d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d4:	64c3      	str	r3, [r0, #76]	; 0x4c
  }

  /* DCMI error Callback */  
  HAL_DCMI_ErrorCallback(hdcmi);
 80009d6:	f002 fb23 	bl	8003020 <HAL_DCMI_ErrorCallback>
 80009da:	bd08      	pop	{r3, pc}

080009dc <HAL_DCMI_VsyncEventCallback>:
 80009dc:	4770      	bx	lr
	...

080009e0 <HAL_DCMI_IRQHandler>:
{  
 80009e0:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80009e2:	6803      	ldr	r3, [r0, #0]
{  
 80009e4:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80009e6:	691d      	ldr	r5, [r3, #16]
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80009e8:	0769      	lsls	r1, r5, #29
 80009ea:	d50c      	bpl.n	8000a06 <HAL_DCMI_IRQHandler+0x26>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80009ec:	2204      	movs	r2, #4
 80009ee:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80009f0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80009f2:	f043 0302 	orr.w	r3, r3, #2
 80009f6:	64c3      	str	r3, [r0, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80009f8:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_DCMI_IRQHandler+0x90>)
 80009fe:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8000a00:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle); 
 8000a02:	f000 f94b 	bl	8000c9c <HAL_DMA_Abort_IT>
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8000a06:	07aa      	lsls	r2, r5, #30
 8000a08:	d50e      	bpl.n	8000a28 <HAL_DCMI_IRQHandler+0x48>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	2202      	movs	r2, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000a0e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8000a10:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8000a12:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <HAL_DCMI_IRQHandler+0x90>)
 8000a22:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8000a24:	f000 f93a 	bl	8000c9c <HAL_DMA_Abort_IT>
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8000a28:	06eb      	lsls	r3, r5, #27
 8000a2a:	d505      	bpl.n	8000a38 <HAL_DCMI_IRQHandler+0x58>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 8000a30:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8000a32:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 8000a34:	f002 faf2 	bl	800301c <HAL_DCMI_LineEventCallback>
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8000a38:	0728      	lsls	r0, r5, #28
 8000a3a:	d505      	bpl.n	8000a48 <HAL_DCMI_IRQHandler+0x68>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8000a40:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8000a42:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8000a44:	f7ff ffca 	bl	80009dc <HAL_DCMI_VsyncEventCallback>
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)   
 8000a48:	07e9      	lsls	r1, r5, #31
 8000a4a:	d510      	bpl.n	8000a6e <HAL_DCMI_IRQHandler+0x8e>
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	0792      	lsls	r2, r2, #30
 8000a52:	d503      	bpl.n	8000a5c <HAL_DCMI_IRQHandler+0x7c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000a54:	68da      	ldr	r2, [r3, #12]
 8000a56:	f022 021e 	bic.w	r2, r2, #30
 8000a5a:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8000a5c:	68da      	ldr	r2, [r3, #12]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8000a5e:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8000a60:	f022 0201 	bic.w	r2, r2, #1
 8000a64:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8000a66:	2201      	movs	r2, #1
 8000a68:	615a      	str	r2, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8000a6a:	f002 fac7 	bl	8002ffc <HAL_DCMI_FrameEventCallback>
 8000a6e:	bd38      	pop	{r3, r4, r5, pc}
 8000a70:	080009bd 	.word	0x080009bd

08000a74 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000a74:	6803      	ldr	r3, [r0, #0]
 8000a76:	2118      	movs	r1, #24
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000a7e:	3a10      	subs	r2, #16
 8000a80:	f023 0303 	bic.w	r3, r3, #3
 8000a84:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000a88:	4904      	ldr	r1, [pc, #16]	; (8000a9c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000a8a:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000a8c:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000a8e:	bf88      	it	hi
 8000a90:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000a92:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000a94:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8000a96:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	08003e4c 	.word	0x08003e4c

08000aa0 <HAL_DMA_Init>:
{
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000aa4:	f7ff fde8 	bl	8000678 <HAL_GetTick>
 8000aa8:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000aaa:	2c00      	cmp	r4, #0
 8000aac:	d071      	beq.n	8000b92 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000aae:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8000ab0:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8000ab2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000abc:	6813      	ldr	r3, [r2, #0]
 8000abe:	f023 0301 	bic.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ac4:	6821      	ldr	r1, [r4, #0]
 8000ac6:	680b      	ldr	r3, [r1, #0]
 8000ac8:	07d8      	lsls	r0, r3, #31
 8000aca:	d43c      	bmi.n	8000b46 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000acc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ace:	4d32      	ldr	r5, [pc, #200]	; (8000b98 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ad0:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ad2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ad4:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ad6:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	68e2      	ldr	r2, [r4, #12]
 8000adc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ade:	6922      	ldr	r2, [r4, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	6962      	ldr	r2, [r4, #20]
 8000ae4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ae6:	69e2      	ldr	r2, [r4, #28]
 8000ae8:	4303      	orrs	r3, r0
 8000aea:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000aec:	6a22      	ldr	r2, [r4, #32]
 8000aee:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000af0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000af2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000af4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000af8:	bf01      	itttt	eq
 8000afa:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000afc:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000afe:	4335      	orreq	r5, r6
 8000b00:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b02:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8000b04:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000b06:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b08:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000b0c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b10:	d10b      	bne.n	8000b2a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000b12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b14:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000b16:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b18:	b13d      	cbz	r5, 8000b2a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000b1a:	b9f8      	cbnz	r0, 8000b5c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000b1c:	2a01      	cmp	r2, #1
 8000b1e:	d02d      	beq.n	8000b7c <HAL_DMA_Init+0xdc>
 8000b20:	d301      	bcc.n	8000b26 <HAL_DMA_Init+0x86>
 8000b22:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000b24:	d101      	bne.n	8000b2a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b26:	01ea      	lsls	r2, r5, #7
 8000b28:	d42b      	bmi.n	8000b82 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000b2a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f7ff ffa1 	bl	8000a74 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b34:	233f      	movs	r3, #63	; 0x3f
 8000b36:	4093      	lsls	r3, r2
 8000b38:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b3a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000b3c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b3e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000b40:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000b44:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b46:	f7ff fd97 	bl	8000678 <HAL_GetTick>
 8000b4a:	1b40      	subs	r0, r0, r5
 8000b4c:	2805      	cmp	r0, #5
 8000b4e:	d9b9      	bls.n	8000ac4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b50:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b52:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b54:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000b56:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000b5a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000b5c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000b60:	d113      	bne.n	8000b8a <HAL_DMA_Init+0xea>
    switch (tmp)
 8000b62:	2a03      	cmp	r2, #3
 8000b64:	d8e1      	bhi.n	8000b2a <HAL_DMA_Init+0x8a>
 8000b66:	a001      	add	r0, pc, #4	; (adr r0, 8000b6c <HAL_DMA_Init+0xcc>)
 8000b68:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000b6c:	08000b83 	.word	0x08000b83
 8000b70:	08000b27 	.word	0x08000b27
 8000b74:	08000b83 	.word	0x08000b83
 8000b78:	08000b7d 	.word	0x08000b7d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000b7c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000b80:	d1d3      	bne.n	8000b2a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b82:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000b84:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b86:	6563      	str	r3, [r4, #84]	; 0x54
 8000b88:	e7e5      	b.n	8000b56 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000b8a:	2a02      	cmp	r2, #2
 8000b8c:	d9f9      	bls.n	8000b82 <HAL_DMA_Init+0xe2>
 8000b8e:	2a03      	cmp	r2, #3
 8000b90:	e7c8      	b.n	8000b24 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000b92:	2001      	movs	r0, #1
 8000b94:	bd70      	pop	{r4, r5, r6, pc}
 8000b96:	bf00      	nop
 8000b98:	e010803f 	.word	0xe010803f

08000b9c <HAL_DMA_Start_IT>:
{
 8000b9c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000b9e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000ba2:	2c01      	cmp	r4, #1
 8000ba4:	d035      	beq.n	8000c12 <HAL_DMA_Start_IT+0x76>
 8000ba6:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ba8:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000baa:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8000bac:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bb0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000bb4:	2c01      	cmp	r4, #1
 8000bb6:	f04f 0402 	mov.w	r4, #2
 8000bba:	d128      	bne.n	8000c0e <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bbc:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000bc0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bc2:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000bc4:	6825      	ldr	r5, [r4, #0]
 8000bc6:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000bca:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000bcc:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bce:	6883      	ldr	r3, [r0, #8]
 8000bd0:	2b40      	cmp	r3, #64	; 0x40
 8000bd2:	d119      	bne.n	8000c08 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8000bd4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000bd6:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bd8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000bda:	233f      	movs	r3, #63	; 0x3f
 8000bdc:	4093      	lsls	r3, r2
 8000bde:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000be0:	6823      	ldr	r3, [r4, #0]
 8000be2:	f043 0316 	orr.w	r3, r3, #22
 8000be6:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000be8:	6963      	ldr	r3, [r4, #20]
 8000bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bee:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000bf0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000bf2:	b11b      	cbz	r3, 8000bfc <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000bf4:	6823      	ldr	r3, [r4, #0]
 8000bf6:	f043 0308 	orr.w	r3, r3, #8
 8000bfa:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000bfc:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000bfe:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6023      	str	r3, [r4, #0]
 8000c06:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000c08:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000c0a:	60e2      	str	r2, [r4, #12]
 8000c0c:	e7e4      	b.n	8000bd8 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000c0e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000c12:	2002      	movs	r0, #2
}
 8000c14:	bd70      	pop	{r4, r5, r6, pc}

08000c16 <HAL_DMA_Abort>:
{
 8000c16:	b570      	push	{r4, r5, r6, lr}
 8000c18:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c1a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff fd2c 	bl	8000678 <HAL_GetTick>
 8000c20:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c22:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d006      	beq.n	8000c38 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c2a:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
 8000c2c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c2e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8000c30:	2300      	movs	r3, #0
 8000c32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8000c36:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c38:	6823      	ldr	r3, [r4, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	f022 0216 	bic.w	r2, r2, #22
 8000c40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c42:	695a      	ldr	r2, [r3, #20]
 8000c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c48:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c4c:	b90a      	cbnz	r2, 8000c52 <HAL_DMA_Abort+0x3c>
 8000c4e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000c50:	b11a      	cbz	r2, 8000c5a <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	f022 0208 	bic.w	r2, r2, #8
 8000c58:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	f022 0201 	bic.w	r2, r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c62:	6823      	ldr	r3, [r4, #0]
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	f010 0001 	ands.w	r0, r0, #1
 8000c6a:	d109      	bne.n	8000c80 <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c6c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000c6e:	233f      	movs	r3, #63	; 0x3f
 8000c70:	4093      	lsls	r3, r2
 8000c72:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8000c74:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8000c76:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8000c7a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8000c7e:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c80:	f7ff fcfa 	bl	8000678 <HAL_GetTick>
 8000c84:	1b80      	subs	r0, r0, r6
 8000c86:	2805      	cmp	r0, #5
 8000c88:	d9eb      	bls.n	8000c62 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c8a:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c8c:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c8e:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8000c90:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c92:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8000c96:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}

08000c9c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c9c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d003      	beq.n	8000cac <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000cac:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8000cb4:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000cb6:	6813      	ldr	r3, [r2, #0]
 8000cb8:	f023 0301 	bic.w	r3, r3, #1
 8000cbc:	6013      	str	r3, [r2, #0]
}
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000cc0:	2300      	movs	r3, #0
{
 8000cc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000cc4:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cc6:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8000cc8:	4b59      	ldr	r3, [pc, #356]	; (8000e30 <HAL_DMA_IRQHandler+0x170>)
{
 8000cca:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ccc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000cce:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cd0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000cd2:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cd4:	409a      	lsls	r2, r3
 8000cd6:	4216      	tst	r6, r2
 8000cd8:	d00c      	beq.n	8000cf4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000cda:	6801      	ldr	r1, [r0, #0]
 8000cdc:	6808      	ldr	r0, [r1, #0]
 8000cde:	0740      	lsls	r0, r0, #29
 8000ce0:	d508      	bpl.n	8000cf4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ce2:	6808      	ldr	r0, [r1, #0]
 8000ce4:	f020 0004 	bic.w	r0, r0, #4
 8000ce8:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000cea:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000cec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000cee:	f042 0201 	orr.w	r2, r2, #1
 8000cf2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	4216      	tst	r6, r2
 8000cfa:	d008      	beq.n	8000d0e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000cfc:	6821      	ldr	r1, [r4, #0]
 8000cfe:	6949      	ldr	r1, [r1, #20]
 8000d00:	0609      	lsls	r1, r1, #24
 8000d02:	d504      	bpl.n	8000d0e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000d04:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000d06:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d08:	f042 0202 	orr.w	r2, r2, #2
 8000d0c:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d0e:	2204      	movs	r2, #4
 8000d10:	409a      	lsls	r2, r3
 8000d12:	4216      	tst	r6, r2
 8000d14:	d008      	beq.n	8000d28 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000d16:	6821      	ldr	r1, [r4, #0]
 8000d18:	6809      	ldr	r1, [r1, #0]
 8000d1a:	0788      	lsls	r0, r1, #30
 8000d1c:	d504      	bpl.n	8000d28 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000d1e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000d20:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d22:	f042 0204 	orr.w	r2, r2, #4
 8000d26:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000d28:	2210      	movs	r2, #16
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	4216      	tst	r6, r2
 8000d2e:	d010      	beq.n	8000d52 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	6819      	ldr	r1, [r3, #0]
 8000d34:	0709      	lsls	r1, r1, #28
 8000d36:	d50c      	bpl.n	8000d52 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000d38:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	0350      	lsls	r0, r2, #13
 8000d3e:	d535      	bpl.n	8000dac <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	0319      	lsls	r1, r3, #12
 8000d44:	d401      	bmi.n	8000d4a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d48:	e000      	b.n	8000d4c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000d4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000d4c:	b10b      	cbz	r3, 8000d52 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000d4e:	4620      	mov	r0, r4
 8000d50:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000d52:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000d54:	2220      	movs	r2, #32
 8000d56:	408a      	lsls	r2, r1
 8000d58:	4216      	tst	r6, r2
 8000d5a:	d038      	beq.n	8000dce <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	06c6      	lsls	r6, r0, #27
 8000d62:	d534      	bpl.n	8000dce <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000d64:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d66:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000d6a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d6c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d6e:	d125      	bne.n	8000dbc <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d70:	f022 0216 	bic.w	r2, r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d76:	695a      	ldr	r2, [r3, #20]
 8000d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d7c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d80:	b90a      	cbnz	r2, 8000d86 <HAL_DMA_IRQHandler+0xc6>
 8000d82:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000d84:	b11a      	cbz	r2, 8000d8e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	f022 0208 	bic.w	r2, r2, #8
 8000d8c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d8e:	233f      	movs	r3, #63	; 0x3f
 8000d90:	408b      	lsls	r3, r1
 8000d92:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000d94:	2300      	movs	r3, #0
 8000d96:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000da0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000da2:	b10b      	cbz	r3, 8000da8 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000da4:	4620      	mov	r0, r4
 8000da6:	4798      	blx	r3
}
 8000da8:	b003      	add	sp, #12
 8000daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	05d2      	lsls	r2, r2, #23
 8000db0:	d4c9      	bmi.n	8000d46 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	f022 0208 	bic.w	r2, r2, #8
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	e7c4      	b.n	8000d46 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000dbc:	0350      	lsls	r0, r2, #13
 8000dbe:	d528      	bpl.n	8000e12 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	0319      	lsls	r1, r3, #12
 8000dc4:	d432      	bmi.n	8000e2c <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000dc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000dc8:	b10b      	cbz	r3, 8000dce <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000dca:	4620      	mov	r0, r4
 8000dcc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000dce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0e9      	beq.n	8000da8 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000dd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000dd6:	07da      	lsls	r2, r3, #31
 8000dd8:	d519      	bpl.n	8000e0e <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dda:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000ddc:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dde:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000de2:	6813      	ldr	r3, [r2, #0]
 8000de4:	f023 0301 	bic.w	r3, r3, #1
 8000de8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000dea:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000dee:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000df2:	9b01      	ldr	r3, [sp, #4]
 8000df4:	3301      	adds	r3, #1
 8000df6:	429f      	cmp	r7, r3
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	d302      	bcc.n	8000e02 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000dfc:	6813      	ldr	r3, [r2, #0]
 8000dfe:	07db      	lsls	r3, r3, #31
 8000e00:	d4f7      	bmi.n	8000df2 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000e02:	2300      	movs	r3, #0
 8000e04:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000e0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000e10:	e7c7      	b.n	8000da2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000e18:	d108      	bne.n	8000e2c <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000e1a:	6819      	ldr	r1, [r3, #0]
 8000e1c:	f021 0110 	bic.w	r1, r1, #16
 8000e20:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000e22:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000e24:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000e28:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000e2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e2e:	e7cb      	b.n	8000dc8 <HAL_DMA_IRQHandler+0x108>
 8000e30:	20000008 	.word	0x20000008

08000e34 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8000e34:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e36:	6886      	ldr	r6, [r0, #8]
 8000e38:	2e80      	cmp	r6, #128	; 0x80
 8000e3a:	d104      	bne.n	8000e46 <HAL_DMAEx_MultiBufferStart_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8000e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e40:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000e42:	2001      	movs	r0, #1
 8000e44:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e46:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000e4a:	2c01      	cmp	r4, #1
 8000e4c:	f000 81d4 	beq.w	80011f8 <HAL_DMAEx_MultiBufferStart_IT+0x3c4>
 8000e50:	2401      	movs	r4, #1
 8000e52:	2500      	movs	r5, #0
 8000e54:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e58:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000e5c:	2c01      	cmp	r4, #1
 8000e5e:	f04f 0402 	mov.w	r4, #2
 8000e62:	f040 81c7 	bne.w	80011f4 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e66:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e6a:	2e40      	cmp	r6, #64	; 0x40
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8000e6c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e6e:	6545      	str	r5, [r0, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8000e70:	6825      	ldr	r5, [r4, #0]
 8000e72:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
 8000e76:	6025      	str	r5, [r4, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 8000e78:	6123      	str	r3, [r4, #16]
  hdma->Instance->NDTR = DataLength;
 8000e7a:	9b04      	ldr	r3, [sp, #16]
 8000e7c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e7e:	d13f      	bne.n	8000f00 <HAL_DMAEx_MultiBufferStart_IT+0xcc>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e80:	60a2      	str	r2, [r4, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e82:	60e1      	str	r1, [r4, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e84:	4bb0      	ldr	r3, [pc, #704]	; (8001148 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8000e86:	429c      	cmp	r4, r3
 8000e88:	d942      	bls.n	8000f10 <HAL_DMAEx_MultiBufferStart_IT+0xdc>
 8000e8a:	3318      	adds	r3, #24
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	d03a      	beq.n	8000f06 <HAL_DMAEx_MultiBufferStart_IT+0xd2>
 8000e90:	4aae      	ldr	r2, [pc, #696]	; (800114c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8000e92:	4294      	cmp	r4, r2
 8000e94:	d039      	beq.n	8000f0a <HAL_DMAEx_MultiBufferStart_IT+0xd6>
 8000e96:	3218      	adds	r2, #24
 8000e98:	4294      	cmp	r4, r2
 8000e9a:	bf14      	ite	ne
 8000e9c:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000ea0:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000ea4:	49aa      	ldr	r1, [pc, #680]	; (8001150 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ea6:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ea8:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000eaa:	f040 80b3 	bne.w	8001014 <HAL_DMAEx_MultiBufferStart_IT+0x1e0>
 8000eae:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000eb0:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000eb2:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000eb4:	f040 80e6 	bne.w	8001084 <HAL_DMAEx_MultiBufferStart_IT+0x250>
 8000eb8:	2208      	movs	r2, #8
 8000eba:	49a5      	ldr	r1, [pc, #660]	; (8001150 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000ebc:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000ebe:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000ec0:	f040 8118 	bne.w	80010f4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>
 8000ec4:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000ec6:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000ec8:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000eca:	f040 815f 	bne.w	800118c <HAL_DMAEx_MultiBufferStart_IT+0x358>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	4a9f      	ldr	r2, [pc, #636]	; (8001150 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8000ed2:	60d3      	str	r3, [r2, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ed4:	6823      	ldr	r3, [r4, #0]
 8000ed6:	f043 0316 	orr.w	r3, r3, #22
 8000eda:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000edc:	6963      	ldr	r3, [r4, #20]
 8000ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee2:	6163      	str	r3, [r4, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ee4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ee6:	b90b      	cbnz	r3, 8000eec <HAL_DMAEx_MultiBufferStart_IT+0xb8>
 8000ee8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000eea:	b11b      	cbz	r3, 8000ef4 <HAL_DMAEx_MultiBufferStart_IT+0xc0>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000eec:	6823      	ldr	r3, [r4, #0]
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma); 
 8000ef4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6023      	str	r3, [r4, #0]
 8000efe:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000f00:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000f02:	60e2      	str	r2, [r4, #12]
 8000f04:	e7be      	b.n	8000e84 <HAL_DMAEx_MultiBufferStart_IT+0x50>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f06:	2220      	movs	r2, #32
 8000f08:	e7cc      	b.n	8000ea4 <HAL_DMAEx_MultiBufferStart_IT+0x70>
 8000f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f0e:	e7c9      	b.n	8000ea4 <HAL_DMAEx_MultiBufferStart_IT+0x70>
 8000f10:	4b90      	ldr	r3, [pc, #576]	; (8001154 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8000f12:	429c      	cmp	r4, r3
 8000f14:	d92a      	bls.n	8000f6c <HAL_DMAEx_MultiBufferStart_IT+0x138>
 8000f16:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000f1a:	429c      	cmp	r4, r3
 8000f1c:	d021      	beq.n	8000f62 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8000f1e:	4a8e      	ldr	r2, [pc, #568]	; (8001158 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8000f20:	4294      	cmp	r4, r2
 8000f22:	d020      	beq.n	8000f66 <HAL_DMAEx_MultiBufferStart_IT+0x132>
 8000f24:	3218      	adds	r2, #24
 8000f26:	4294      	cmp	r4, r2
 8000f28:	bf14      	ite	ne
 8000f2a:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000f2e:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000f32:	4987      	ldr	r1, [pc, #540]	; (8001150 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f34:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f36:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f38:	d17a      	bne.n	8001030 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8000f3a:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f3c:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f3e:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f40:	f040 80ae 	bne.w	80010a0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8000f44:	2208      	movs	r2, #8
 8000f46:	4982      	ldr	r1, [pc, #520]	; (8001150 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f48:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f4a:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f4c:	f040 80e0 	bne.w	8001110 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>
 8000f50:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000f52:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f54:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000f56:	f040 8126 	bne.w	80011a6 <HAL_DMAEx_MultiBufferStart_IT+0x372>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	4a7c      	ldr	r2, [pc, #496]	; (8001150 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8000f5e:	6093      	str	r3, [r2, #8]
 8000f60:	e7b8      	b.n	8000ed4 <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f62:	2220      	movs	r2, #32
 8000f64:	e7e5      	b.n	8000f32 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8000f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f6a:	e7e2      	b.n	8000f32 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8000f6c:	4b7b      	ldr	r3, [pc, #492]	; (800115c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8000f6e:	429c      	cmp	r4, r3
 8000f70:	d928      	bls.n	8000fc4 <HAL_DMAEx_MultiBufferStart_IT+0x190>
 8000f72:	3318      	adds	r3, #24
 8000f74:	429c      	cmp	r4, r3
 8000f76:	d020      	beq.n	8000fba <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8000f78:	4a79      	ldr	r2, [pc, #484]	; (8001160 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8000f7a:	4294      	cmp	r4, r2
 8000f7c:	d01f      	beq.n	8000fbe <HAL_DMAEx_MultiBufferStart_IT+0x18a>
 8000f7e:	3218      	adds	r2, #24
 8000f80:	4294      	cmp	r4, r2
 8000f82:	bf14      	ite	ne
 8000f84:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000f88:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000f8c:	4975      	ldr	r1, [pc, #468]	; (8001164 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f8e:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f90:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f92:	d15b      	bne.n	800104c <HAL_DMAEx_MultiBufferStart_IT+0x218>
 8000f94:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f96:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f98:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f9a:	f040 808f 	bne.w	80010bc <HAL_DMAEx_MultiBufferStart_IT+0x288>
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	4970      	ldr	r1, [pc, #448]	; (8001164 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000fa2:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000fa4:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000fa6:	f040 80c1 	bne.w	800112c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>
 8000faa:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000fac:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000fae:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000fb0:	f040 8106 	bne.w	80011c0 <HAL_DMAEx_MultiBufferStart_IT+0x38c>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	4a6b      	ldr	r2, [pc, #428]	; (8001164 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8000fb8:	e78b      	b.n	8000ed2 <HAL_DMAEx_MultiBufferStart_IT+0x9e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fba:	2220      	movs	r2, #32
 8000fbc:	e7e6      	b.n	8000f8c <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8000fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc2:	e7e3      	b.n	8000f8c <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8000fc4:	4b68      	ldr	r3, [pc, #416]	; (8001168 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8000fc6:	429c      	cmp	r4, r3
 8000fc8:	d01f      	beq.n	800100a <HAL_DMAEx_MultiBufferStart_IT+0x1d6>
 8000fca:	4a68      	ldr	r2, [pc, #416]	; (800116c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8000fcc:	4294      	cmp	r4, r2
 8000fce:	d01e      	beq.n	800100e <HAL_DMAEx_MultiBufferStart_IT+0x1da>
 8000fd0:	3218      	adds	r2, #24
 8000fd2:	4294      	cmp	r4, r2
 8000fd4:	bf14      	ite	ne
 8000fd6:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000fda:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000fde:	4961      	ldr	r1, [pc, #388]	; (8001164 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fe0:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fe2:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fe4:	d140      	bne.n	8001068 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8000fe6:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000fe8:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fea:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000fec:	d174      	bne.n	80010d8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>
 8000fee:	2208      	movs	r2, #8
 8000ff0:	495c      	ldr	r1, [pc, #368]	; (8001164 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000ff2:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000ff4:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000ff6:	f040 80bb 	bne.w	8001170 <HAL_DMAEx_MultiBufferStart_IT+0x33c>
 8000ffa:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000ffc:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000ffe:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001000:	f040 80eb 	bne.w	80011da <HAL_DMAEx_MultiBufferStart_IT+0x3a6>
 8001004:	2301      	movs	r3, #1
 8001006:	4a57      	ldr	r2, [pc, #348]	; (8001164 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8001008:	e7a9      	b.n	8000f5e <HAL_DMAEx_MultiBufferStart_IT+0x12a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800100a:	2220      	movs	r2, #32
 800100c:	e7e7      	b.n	8000fde <HAL_DMAEx_MultiBufferStart_IT+0x1aa>
 800100e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001012:	e7e4      	b.n	8000fde <HAL_DMAEx_MultiBufferStart_IT+0x1aa>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001014:	4a4d      	ldr	r2, [pc, #308]	; (800114c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8001016:	4294      	cmp	r4, r2
 8001018:	d007      	beq.n	800102a <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 800101a:	3218      	adds	r2, #24
 800101c:	4294      	cmp	r4, r2
 800101e:	bf14      	ite	ne
 8001020:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8001024:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001028:	e742      	b.n	8000eb0 <HAL_DMAEx_MultiBufferStart_IT+0x7c>
 800102a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800102e:	e73f      	b.n	8000eb0 <HAL_DMAEx_MultiBufferStart_IT+0x7c>
 8001030:	4a49      	ldr	r2, [pc, #292]	; (8001158 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8001032:	4294      	cmp	r4, r2
 8001034:	d007      	beq.n	8001046 <HAL_DMAEx_MultiBufferStart_IT+0x212>
 8001036:	3218      	adds	r2, #24
 8001038:	4294      	cmp	r4, r2
 800103a:	bf14      	ite	ne
 800103c:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8001040:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001044:	e77a      	b.n	8000f3c <HAL_DMAEx_MultiBufferStart_IT+0x108>
 8001046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800104a:	e777      	b.n	8000f3c <HAL_DMAEx_MultiBufferStart_IT+0x108>
 800104c:	4a44      	ldr	r2, [pc, #272]	; (8001160 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 800104e:	4294      	cmp	r4, r2
 8001050:	d007      	beq.n	8001062 <HAL_DMAEx_MultiBufferStart_IT+0x22e>
 8001052:	3218      	adds	r2, #24
 8001054:	4294      	cmp	r4, r2
 8001056:	bf14      	ite	ne
 8001058:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 800105c:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001060:	e799      	b.n	8000f96 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8001062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001066:	e796      	b.n	8000f96 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8001068:	4a40      	ldr	r2, [pc, #256]	; (800116c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800106a:	4294      	cmp	r4, r2
 800106c:	d007      	beq.n	800107e <HAL_DMAEx_MultiBufferStart_IT+0x24a>
 800106e:	3218      	adds	r2, #24
 8001070:	4294      	cmp	r4, r2
 8001072:	bf14      	ite	ne
 8001074:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8001078:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 800107c:	e7b4      	b.n	8000fe8 <HAL_DMAEx_MultiBufferStart_IT+0x1b4>
 800107e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001082:	e7b1      	b.n	8000fe8 <HAL_DMAEx_MultiBufferStart_IT+0x1b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001084:	4a31      	ldr	r2, [pc, #196]	; (800114c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8001086:	4294      	cmp	r4, r2
 8001088:	d007      	beq.n	800109a <HAL_DMAEx_MultiBufferStart_IT+0x266>
 800108a:	3218      	adds	r2, #24
 800108c:	4294      	cmp	r4, r2
 800108e:	bf14      	ite	ne
 8001090:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8001094:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8001098:	e70f      	b.n	8000eba <HAL_DMAEx_MultiBufferStart_IT+0x86>
 800109a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800109e:	e70c      	b.n	8000eba <HAL_DMAEx_MultiBufferStart_IT+0x86>
 80010a0:	4a2d      	ldr	r2, [pc, #180]	; (8001158 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80010a2:	4294      	cmp	r4, r2
 80010a4:	d007      	beq.n	80010b6 <HAL_DMAEx_MultiBufferStart_IT+0x282>
 80010a6:	3218      	adds	r2, #24
 80010a8:	4294      	cmp	r4, r2
 80010aa:	bf14      	ite	ne
 80010ac:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80010b0:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 80010b4:	e747      	b.n	8000f46 <HAL_DMAEx_MultiBufferStart_IT+0x112>
 80010b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ba:	e744      	b.n	8000f46 <HAL_DMAEx_MultiBufferStart_IT+0x112>
 80010bc:	4a28      	ldr	r2, [pc, #160]	; (8001160 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80010be:	4294      	cmp	r4, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_DMAEx_MultiBufferStart_IT+0x29e>
 80010c2:	3218      	adds	r2, #24
 80010c4:	4294      	cmp	r4, r2
 80010c6:	bf14      	ite	ne
 80010c8:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80010cc:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 80010d0:	e766      	b.n	8000fa0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80010d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d6:	e763      	b.n	8000fa0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80010d8:	4a24      	ldr	r2, [pc, #144]	; (800116c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80010da:	4294      	cmp	r4, r2
 80010dc:	d007      	beq.n	80010ee <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 80010de:	3218      	adds	r2, #24
 80010e0:	4294      	cmp	r4, r2
 80010e2:	bf14      	ite	ne
 80010e4:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80010e8:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 80010ec:	e780      	b.n	8000ff0 <HAL_DMAEx_MultiBufferStart_IT+0x1bc>
 80010ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f2:	e77d      	b.n	8000ff0 <HAL_DMAEx_MultiBufferStart_IT+0x1bc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80010f4:	4a15      	ldr	r2, [pc, #84]	; (800114c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80010f6:	4294      	cmp	r4, r2
 80010f8:	d007      	beq.n	800110a <HAL_DMAEx_MultiBufferStart_IT+0x2d6>
 80010fa:	3218      	adds	r2, #24
 80010fc:	4294      	cmp	r4, r2
 80010fe:	bf14      	ite	ne
 8001100:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 8001104:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8001108:	e6dd      	b.n	8000ec6 <HAL_DMAEx_MultiBufferStart_IT+0x92>
 800110a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110e:	e6da      	b.n	8000ec6 <HAL_DMAEx_MultiBufferStart_IT+0x92>
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8001112:	4294      	cmp	r4, r2
 8001114:	d007      	beq.n	8001126 <HAL_DMAEx_MultiBufferStart_IT+0x2f2>
 8001116:	3218      	adds	r2, #24
 8001118:	4294      	cmp	r4, r2
 800111a:	bf14      	ite	ne
 800111c:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 8001120:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8001124:	e715      	b.n	8000f52 <HAL_DMAEx_MultiBufferStart_IT+0x11e>
 8001126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112a:	e712      	b.n	8000f52 <HAL_DMAEx_MultiBufferStart_IT+0x11e>
 800112c:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 800112e:	4294      	cmp	r4, r2
 8001130:	d007      	beq.n	8001142 <HAL_DMAEx_MultiBufferStart_IT+0x30e>
 8001132:	3218      	adds	r2, #24
 8001134:	4294      	cmp	r4, r2
 8001136:	bf14      	ite	ne
 8001138:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 800113c:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8001140:	e734      	b.n	8000fac <HAL_DMAEx_MultiBufferStart_IT+0x178>
 8001142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001146:	e731      	b.n	8000fac <HAL_DMAEx_MultiBufferStart_IT+0x178>
 8001148:	40026458 	.word	0x40026458
 800114c:	40026488 	.word	0x40026488
 8001150:	40026400 	.word	0x40026400
 8001154:	400260b8 	.word	0x400260b8
 8001158:	40026428 	.word	0x40026428
 800115c:	40026058 	.word	0x40026058
 8001160:	40026088 	.word	0x40026088
 8001164:	40026000 	.word	0x40026000
 8001168:	40026010 	.word	0x40026010
 800116c:	40026028 	.word	0x40026028
 8001170:	4a22      	ldr	r2, [pc, #136]	; (80011fc <HAL_DMAEx_MultiBufferStart_IT+0x3c8>)
 8001172:	4294      	cmp	r4, r2
 8001174:	d007      	beq.n	8001186 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8001176:	3218      	adds	r2, #24
 8001178:	4294      	cmp	r4, r2
 800117a:	bf14      	ite	ne
 800117c:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 8001180:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8001184:	e73a      	b.n	8000ffc <HAL_DMAEx_MultiBufferStart_IT+0x1c8>
 8001186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118a:	e737      	b.n	8000ffc <HAL_DMAEx_MultiBufferStart_IT+0x1c8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_DMAEx_MultiBufferStart_IT+0x3cc>)
 800118e:	429c      	cmp	r4, r3
 8001190:	d007      	beq.n	80011a2 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
 8001192:	3318      	adds	r3, #24
 8001194:	429c      	cmp	r4, r3
 8001196:	bf14      	ite	ne
 8001198:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 800119c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80011a0:	e696      	b.n	8000ed0 <HAL_DMAEx_MultiBufferStart_IT+0x9c>
 80011a2:	2340      	movs	r3, #64	; 0x40
 80011a4:	e694      	b.n	8000ed0 <HAL_DMAEx_MultiBufferStart_IT+0x9c>
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>)
 80011a8:	429c      	cmp	r4, r3
 80011aa:	d007      	beq.n	80011bc <HAL_DMAEx_MultiBufferStart_IT+0x388>
 80011ac:	3318      	adds	r3, #24
 80011ae:	429c      	cmp	r4, r3
 80011b0:	bf14      	ite	ne
 80011b2:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 80011b6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80011ba:	e6cf      	b.n	8000f5c <HAL_DMAEx_MultiBufferStart_IT+0x128>
 80011bc:	2340      	movs	r3, #64	; 0x40
 80011be:	e6cd      	b.n	8000f5c <HAL_DMAEx_MultiBufferStart_IT+0x128>
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_DMAEx_MultiBufferStart_IT+0x3d4>)
 80011c2:	429c      	cmp	r4, r3
 80011c4:	d007      	beq.n	80011d6 <HAL_DMAEx_MultiBufferStart_IT+0x3a2>
 80011c6:	3318      	adds	r3, #24
 80011c8:	429c      	cmp	r4, r3
 80011ca:	bf14      	ite	ne
 80011cc:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 80011d0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80011d4:	e6ef      	b.n	8000fb6 <HAL_DMAEx_MultiBufferStart_IT+0x182>
 80011d6:	2340      	movs	r3, #64	; 0x40
 80011d8:	e6ed      	b.n	8000fb6 <HAL_DMAEx_MultiBufferStart_IT+0x182>
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_DMAEx_MultiBufferStart_IT+0x3c8>)
 80011dc:	429c      	cmp	r4, r3
 80011de:	d007      	beq.n	80011f0 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 80011e0:	3318      	adds	r3, #24
 80011e2:	429c      	cmp	r4, r3
 80011e4:	bf14      	ite	ne
 80011e6:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 80011ea:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80011ee:	e70a      	b.n	8001006 <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 80011f0:	2340      	movs	r3, #64	; 0x40
 80011f2:	e708      	b.n	8001006 <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
    __HAL_UNLOCK(hdma);	  
 80011f4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80011f8:	2002      	movs	r0, #2
}
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
 80011fc:	40026028 	.word	0x40026028
 8001200:	40026488 	.word	0x40026488
 8001204:	40026428 	.word	0x40026428
 8001208:	40026088 	.word	0x40026088

0800120c <HAL_DMAEx_ChangeMemory>:
{
 800120c:	6803      	ldr	r3, [r0, #0]
  if(memory == MEMORY0)
 800120e:	b912      	cbnz	r2, 8001216 <HAL_DMAEx_ChangeMemory+0xa>
    hdma->Instance->M0AR = Address;
 8001210:	60d9      	str	r1, [r3, #12]
}
 8001212:	2000      	movs	r0, #0
 8001214:	4770      	bx	lr
    hdma->Instance->M1AR = Address;
 8001216:	6119      	str	r1, [r3, #16]
 8001218:	e7fb      	b.n	8001212 <HAL_DMAEx_ChangeMemory+0x6>
	...

0800121c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001220:	680b      	ldr	r3, [r1, #0]
{
 8001222:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001224:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80013e8 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001228:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800122a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122c:	4a6c      	ldr	r2, [pc, #432]	; (80013e0 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800122e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80013ec <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8001232:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8001238:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001240:	45b6      	cmp	lr, r6
 8001242:	f040 80b3 	bne.w	80013ac <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001246:	684c      	ldr	r4, [r1, #4]
 8001248:	f024 0710 	bic.w	r7, r4, #16
 800124c:	2f02      	cmp	r7, #2
 800124e:	d116      	bne.n	800127e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8001250:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001254:	f003 0b07 	and.w	fp, r3, #7
 8001258:	f04f 0c0f 	mov.w	ip, #15
 800125c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001260:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001264:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001268:	fa0c fc0b 	lsl.w	ip, ip, fp
 800126c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001270:	690d      	ldr	r5, [r1, #16]
 8001272:	fa05 f50b 	lsl.w	r5, r5, fp
 8001276:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800127a:	f8ca 5020 	str.w	r5, [sl, #32]
 800127e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001282:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001284:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001288:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800128c:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001290:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001292:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001296:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001298:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800129a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800129e:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 80012a2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a6:	d811      	bhi.n	80012cc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80012a8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012aa:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80012ae:	68cf      	ldr	r7, [r1, #12]
 80012b0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80012b4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80012b8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80012ba:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012bc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80012c0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80012c4:	409f      	lsls	r7, r3
 80012c6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80012ca:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80012cc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012ce:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80012d0:	688f      	ldr	r7, [r1, #8]
 80012d2:	fa07 f70a 	lsl.w	r7, r7, sl
 80012d6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80012d8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012da:	00e5      	lsls	r5, r4, #3
 80012dc:	d566      	bpl.n	80013ac <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80012e2:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012e6:	f003 0e03 	and.w	lr, r3, #3
 80012ea:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80012f2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012f6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80012fe:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001302:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8001306:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800130a:	9503      	str	r5, [sp, #12]
 800130c:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800130e:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8001312:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001316:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800131a:	4d32      	ldr	r5, [pc, #200]	; (80013e4 <HAL_GPIO_Init+0x1c8>)
 800131c:	42a8      	cmp	r0, r5
 800131e:	d04c      	beq.n	80013ba <HAL_GPIO_Init+0x19e>
 8001320:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001324:	42a8      	cmp	r0, r5
 8001326:	d04a      	beq.n	80013be <HAL_GPIO_Init+0x1a2>
 8001328:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800132c:	42a8      	cmp	r0, r5
 800132e:	d048      	beq.n	80013c2 <HAL_GPIO_Init+0x1a6>
 8001330:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001334:	42a8      	cmp	r0, r5
 8001336:	d046      	beq.n	80013c6 <HAL_GPIO_Init+0x1aa>
 8001338:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800133c:	42a8      	cmp	r0, r5
 800133e:	d044      	beq.n	80013ca <HAL_GPIO_Init+0x1ae>
 8001340:	4548      	cmp	r0, r9
 8001342:	d044      	beq.n	80013ce <HAL_GPIO_Init+0x1b2>
 8001344:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001348:	42a8      	cmp	r0, r5
 800134a:	d042      	beq.n	80013d2 <HAL_GPIO_Init+0x1b6>
 800134c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001350:	42a8      	cmp	r0, r5
 8001352:	d040      	beq.n	80013d6 <HAL_GPIO_Init+0x1ba>
 8001354:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001358:	42a8      	cmp	r0, r5
 800135a:	d03e      	beq.n	80013da <HAL_GPIO_Init+0x1be>
 800135c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001360:	42a8      	cmp	r0, r5
 8001362:	bf14      	ite	ne
 8001364:	250a      	movne	r5, #10
 8001366:	2509      	moveq	r5, #9
 8001368:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800136c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001370:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001374:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8001376:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 800137a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800137c:	bf0c      	ite	eq
 800137e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001380:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001382:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8001386:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001388:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800138a:	bf0c      	ite	eq
 800138c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800138e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001390:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8001394:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001396:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001398:	bf0c      	ite	eq
 800139a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800139c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800139e:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80013a0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80013a2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	bf54      	ite	pl
 80013a6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80013a8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80013aa:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013ac:	3301      	adds	r3, #1
 80013ae:	2b10      	cmp	r3, #16
 80013b0:	f47f af3f 	bne.w	8001232 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80013b4:	b005      	add	sp, #20
 80013b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013ba:	2500      	movs	r5, #0
 80013bc:	e7d4      	b.n	8001368 <HAL_GPIO_Init+0x14c>
 80013be:	2501      	movs	r5, #1
 80013c0:	e7d2      	b.n	8001368 <HAL_GPIO_Init+0x14c>
 80013c2:	2502      	movs	r5, #2
 80013c4:	e7d0      	b.n	8001368 <HAL_GPIO_Init+0x14c>
 80013c6:	2503      	movs	r5, #3
 80013c8:	e7ce      	b.n	8001368 <HAL_GPIO_Init+0x14c>
 80013ca:	2504      	movs	r5, #4
 80013cc:	e7cc      	b.n	8001368 <HAL_GPIO_Init+0x14c>
 80013ce:	2505      	movs	r5, #5
 80013d0:	e7ca      	b.n	8001368 <HAL_GPIO_Init+0x14c>
 80013d2:	2506      	movs	r5, #6
 80013d4:	e7c8      	b.n	8001368 <HAL_GPIO_Init+0x14c>
 80013d6:	2507      	movs	r5, #7
 80013d8:	e7c6      	b.n	8001368 <HAL_GPIO_Init+0x14c>
 80013da:	2508      	movs	r5, #8
 80013dc:	e7c4      	b.n	8001368 <HAL_GPIO_Init+0x14c>
 80013de:	bf00      	nop
 80013e0:	40013c00 	.word	0x40013c00
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40021400 	.word	0x40021400

080013f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013f0:	6903      	ldr	r3, [r0, #16]
 80013f2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80013f4:	bf14      	ite	ne
 80013f6:	2001      	movne	r0, #1
 80013f8:	2000      	moveq	r0, #0
 80013fa:	4770      	bx	lr

080013fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	b10a      	cbz	r2, 8001402 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013fe:	6181      	str	r1, [r0, #24]
 8001400:	4770      	bx	lr
 8001402:	0409      	lsls	r1, r1, #16
 8001404:	e7fb      	b.n	80013fe <HAL_GPIO_WritePin+0x2>

08001406 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001406:	6803      	ldr	r3, [r0, #0]
 8001408:	699a      	ldr	r2, [r3, #24]
 800140a:	0791      	lsls	r1, r2, #30
 800140c:	d501      	bpl.n	8001412 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800140e:	2200      	movs	r2, #0
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001412:	699a      	ldr	r2, [r3, #24]
 8001414:	07d2      	lsls	r2, r2, #31
 8001416:	d403      	bmi.n	8001420 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001418:	699a      	ldr	r2, [r3, #24]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	619a      	str	r2, [r3, #24]
 8001420:	4770      	bx	lr

08001422 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001422:	b530      	push	{r4, r5, lr}
 8001424:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001426:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800142a:	6805      	ldr	r5, [r0, #0]
 800142c:	4323      	orrs	r3, r4
 800142e:	0d64      	lsrs	r4, r4, #21
 8001430:	6868      	ldr	r0, [r5, #4]
 8001432:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001436:	4319      	orrs	r1, r3
 8001438:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800143c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001440:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001444:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001448:	f044 0403 	orr.w	r4, r4, #3
 800144c:	ea20 0404 	bic.w	r4, r0, r4
 8001450:	4321      	orrs	r1, r4
 8001452:	6069      	str	r1, [r5, #4]
 8001454:	bd30      	pop	{r4, r5, pc}

08001456 <I2C_WaitOnFlagUntilTimeout>:
{
 8001456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800145a:	9f06      	ldr	r7, [sp, #24]
 800145c:	4604      	mov	r4, r0
 800145e:	4688      	mov	r8, r1
 8001460:	4616      	mov	r6, r2
 8001462:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001464:	6822      	ldr	r2, [r4, #0]
 8001466:	6993      	ldr	r3, [r2, #24]
 8001468:	ea38 0303 	bics.w	r3, r8, r3
 800146c:	bf0c      	ite	eq
 800146e:	2301      	moveq	r3, #1
 8001470:	2300      	movne	r3, #0
 8001472:	42b3      	cmp	r3, r6
 8001474:	d002      	beq.n	800147c <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001476:	2000      	movs	r0, #0
}
 8001478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800147c:	1c6b      	adds	r3, r5, #1
 800147e:	d0f2      	beq.n	8001466 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001480:	b955      	cbnz	r5, 8001498 <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 8001482:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8001484:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 8001486:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800148a:	2300      	movs	r3, #0
 800148c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001490:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001498:	f7ff f8ee 	bl	8000678 <HAL_GetTick>
 800149c:	1bc0      	subs	r0, r0, r7
 800149e:	4285      	cmp	r5, r0
 80014a0:	d2e0      	bcs.n	8001464 <I2C_WaitOnFlagUntilTimeout+0xe>
 80014a2:	e7ee      	b.n	8001482 <I2C_WaitOnFlagUntilTimeout+0x2c>

080014a4 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014a4:	6803      	ldr	r3, [r0, #0]
{
 80014a6:	b570      	push	{r4, r5, r6, lr}
 80014a8:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014aa:	6998      	ldr	r0, [r3, #24]
{
 80014ac:	460d      	mov	r5, r1
 80014ae:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014b0:	f010 0010 	ands.w	r0, r0, #16
 80014b4:	d112      	bne.n	80014dc <I2C_IsAcknowledgeFailed+0x38>
 80014b6:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80014b8:	1c69      	adds	r1, r5, #1
 80014ba:	d010      	beq.n	80014de <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80014bc:	b94d      	cbnz	r5, 80014d2 <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 80014be:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 80014c0:	2003      	movs	r0, #3
          hi2c->State = HAL_I2C_STATE_READY;
 80014c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80014cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80014d0:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80014d2:	f7ff f8d1 	bl	8000678 <HAL_GetTick>
 80014d6:	1b80      	subs	r0, r0, r6
 80014d8:	4285      	cmp	r5, r0
 80014da:	d3f0      	bcc.n	80014be <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	6999      	ldr	r1, [r3, #24]
 80014e0:	068a      	lsls	r2, r1, #26
 80014e2:	d5e9      	bpl.n	80014b8 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014e4:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014e6:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 80014e8:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014ea:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014ec:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80014ee:	f7ff ff8a 	bl	8001406 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80014f2:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 80014f4:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80014f6:	6853      	ldr	r3, [r2, #4]
 80014f8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80014fc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001500:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800150a:	2304      	movs	r3, #4
 800150c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800150e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001510:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001514:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800151c:	bd70      	pop	{r4, r5, r6, pc}

0800151e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800151e:	b570      	push	{r4, r5, r6, lr}
 8001520:	4604      	mov	r4, r0
 8001522:	460d      	mov	r5, r1
 8001524:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	075b      	lsls	r3, r3, #29
 800152c:	d40e      	bmi.n	800154c <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800152e:	4632      	mov	r2, r6
 8001530:	4629      	mov	r1, r5
 8001532:	4620      	mov	r0, r4
 8001534:	f7ff ffb6 	bl	80014a4 <I2C_IsAcknowledgeFailed>
 8001538:	b9f0      	cbnz	r0, 8001578 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	699a      	ldr	r2, [r3, #24]
 800153e:	0691      	lsls	r1, r2, #26
 8001540:	d51c      	bpl.n	800157c <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001542:	699a      	ldr	r2, [r3, #24]
 8001544:	0752      	lsls	r2, r2, #29
 8001546:	d503      	bpl.n	8001550 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8001548:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800154a:	b10a      	cbz	r2, 8001550 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 800154c:	2000      	movs	r0, #0
 800154e:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001550:	2120      	movs	r1, #32
 8001552:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800155a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800155e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001568:	2300      	movs	r3, #0
 800156a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800156c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8001570:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8001578:	2001      	movs	r0, #1
}
 800157a:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800157c:	b95d      	cbnz	r5, 8001596 <I2C_WaitOnRXNEFlagUntilTimeout+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800157e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_TIMEOUT;
 8001580:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001582:	f043 0320 	orr.w	r3, r3, #32
 8001586:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001588:	2320      	movs	r3, #32
 800158a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 800158e:	2300      	movs	r3, #0
 8001590:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 8001594:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001596:	f7ff f86f 	bl	8000678 <HAL_GetTick>
 800159a:	1b80      	subs	r0, r0, r6
 800159c:	4285      	cmp	r5, r0
 800159e:	d2c2      	bcs.n	8001526 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80015a0:	e7ed      	b.n	800157e <I2C_WaitOnRXNEFlagUntilTimeout+0x60>

080015a2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80015a2:	b570      	push	{r4, r5, r6, lr}
 80015a4:	4604      	mov	r4, r0
 80015a6:	460d      	mov	r5, r1
 80015a8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	079b      	lsls	r3, r3, #30
 80015b0:	d501      	bpl.n	80015b6 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80015b2:	2000      	movs	r0, #0
 80015b4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015b6:	4632      	mov	r2, r6
 80015b8:	4629      	mov	r1, r5
 80015ba:	4620      	mov	r0, r4
 80015bc:	f7ff ff72 	bl	80014a4 <I2C_IsAcknowledgeFailed>
 80015c0:	b9b0      	cbnz	r0, 80015f0 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80015c2:	1c6a      	adds	r2, r5, #1
 80015c4:	d0f1      	beq.n	80015aa <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80015c6:	b96d      	cbnz	r5, 80015e4 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80015ca:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015cc:	f043 0320 	orr.w	r3, r3, #32
 80015d0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	2320      	movs	r3, #32
 80015d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d8:	2300      	movs	r3, #0
 80015da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80015de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80015e2:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80015e4:	f7ff f848 	bl	8000678 <HAL_GetTick>
 80015e8:	1b80      	subs	r0, r0, r6
 80015ea:	4285      	cmp	r5, r0
 80015ec:	d2dd      	bcs.n	80015aa <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 80015ee:	e7eb      	b.n	80015c8 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 80015f0:	2001      	movs	r0, #1
}
 80015f2:	bd70      	pop	{r4, r5, r6, pc}

080015f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	4604      	mov	r4, r0
 80015f8:	460d      	mov	r5, r1
 80015fa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	069b      	lsls	r3, r3, #26
 8001602:	d501      	bpl.n	8001608 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001604:	2000      	movs	r0, #0
 8001606:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001608:	4632      	mov	r2, r6
 800160a:	4629      	mov	r1, r5
 800160c:	4620      	mov	r0, r4
 800160e:	f7ff ff49 	bl	80014a4 <I2C_IsAcknowledgeFailed>
 8001612:	b9a0      	cbnz	r0, 800163e <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001614:	b96d      	cbnz	r5, 8001632 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001616:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001618:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800161a:	f043 0320 	orr.w	r3, r3, #32
 800161e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001620:	2320      	movs	r3, #32
 8001622:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001626:	2300      	movs	r3, #0
 8001628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800162c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001630:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001632:	f7ff f821 	bl	8000678 <HAL_GetTick>
 8001636:	1b80      	subs	r0, r0, r6
 8001638:	4285      	cmp	r5, r0
 800163a:	d2df      	bcs.n	80015fc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 800163c:	e7eb      	b.n	8001616 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800163e:	2001      	movs	r0, #1
}
 8001640:	bd70      	pop	{r4, r5, r6, pc}

08001642 <HAL_I2C_Init>:
{
 8001642:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001644:	4604      	mov	r4, r0
 8001646:	2800      	cmp	r0, #0
 8001648:	d04a      	beq.n	80016e0 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800164a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800164e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001652:	b91b      	cbnz	r3, 800165c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001654:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001658:	f001 fe8e 	bl	8003378 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800165c:	2324      	movs	r3, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800165e:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001660:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001664:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001670:	6862      	ldr	r2, [r4, #4]
 8001672:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001676:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001682:	d124      	bne.n	80016ce <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001684:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001688:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800168a:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800168c:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800168e:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001690:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001694:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001698:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016a0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80016a2:	6922      	ldr	r2, [r4, #16]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	69a1      	ldr	r1, [r4, #24]
 80016a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016ac:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80016ae:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016b0:	69e2      	ldr	r2, [r4, #28]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	f042 0201 	orr.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80016be:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016c6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 80016cc:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016d2:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016d4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016d6:	d1d8      	bne.n	800168a <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	e7d4      	b.n	800168a <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80016e0:	2001      	movs	r0, #1
}
 80016e2:	bd10      	pop	{r4, pc}

080016e4 <HAL_I2C_Master_Transmit>:
{
 80016e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80016e8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80016ee:	4604      	mov	r4, r0
 80016f0:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f2:	2b20      	cmp	r3, #32
{
 80016f4:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f6:	f040 8089 	bne.w	800180c <HAL_I2C_Master_Transmit+0x128>
    __HAL_LOCK(hi2c);
 80016fa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80016fe:	2b01      	cmp	r3, #1
 8001700:	f000 8084 	beq.w	800180c <HAL_I2C_Master_Transmit+0x128>
 8001704:	2701      	movs	r7, #1
 8001706:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800170a:	f7fe ffb5 	bl	8000678 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800170e:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001710:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001712:	9000      	str	r0, [sp, #0]
 8001714:	463a      	mov	r2, r7
 8001716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff fe9b 	bl	8001456 <I2C_WaitOnFlagUntilTimeout>
 8001720:	2800      	cmp	r0, #0
 8001722:	d148      	bne.n	80017b6 <HAL_I2C_Master_Transmit+0xd2>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001724:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8001726:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800172a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800172c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001730:	2310      	movs	r3, #16
 8001732:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001736:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001738:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800173c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800173e:	b29b      	uxth	r3, r3
 8001740:	2bff      	cmp	r3, #255	; 0xff
 8001742:	4b33      	ldr	r3, [pc, #204]	; (8001810 <HAL_I2C_Master_Transmit+0x12c>)
 8001744:	d925      	bls.n	8001792 <HAL_I2C_Master_Transmit+0xae>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001746:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001748:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800174a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800174c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001750:	4631      	mov	r1, r6
 8001752:	4620      	mov	r0, r4
 8001754:	f7ff fe65 	bl	8001422 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001758:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800175a:	462a      	mov	r2, r5
 800175c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800175e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001760:	b29b      	uxth	r3, r3
 8001762:	b9f3      	cbnz	r3, 80017a2 <HAL_I2C_Master_Transmit+0xbe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001764:	f7ff ff46 	bl	80015f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001768:	b9f0      	cbnz	r0, 80017a8 <HAL_I2C_Master_Transmit+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	2120      	movs	r1, #32
 800176e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001776:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800177a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800177e:	f022 0201 	bic.w	r2, r2, #1
 8001782:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001784:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001788:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800178c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001790:	e00e      	b.n	80017b0 <HAL_I2C_Master_Transmit+0xcc>
      hi2c->XferSize = hi2c->XferCount;
 8001792:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001794:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001796:	b292      	uxth	r2, r2
 8001798:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800179a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	e7d6      	b.n	8001750 <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a2:	f7ff fefe 	bl	80015a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80017a6:	b140      	cbz	r0, 80017ba <HAL_I2C_Master_Transmit+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d103      	bne.n	80017b6 <HAL_I2C_Master_Transmit+0xd2>
          return HAL_ERROR;
 80017ae:	2001      	movs	r0, #1
}
 80017b0:	b003      	add	sp, #12
 80017b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 80017b6:	2003      	movs	r0, #3
 80017b8:	e7fa      	b.n	80017b0 <HAL_I2C_Master_Transmit+0xcc>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80017ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017bc:	6822      	ldr	r2, [r4, #0]
 80017be:	1c59      	adds	r1, r3, #1
 80017c0:	6261      	str	r1, [r4, #36]	; 0x24
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferSize--;
 80017c6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80017c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80017ca:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80017cc:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80017ce:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80017d0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80017d2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80017d4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	d1be      	bne.n	8001758 <HAL_I2C_Master_Transmit+0x74>
 80017da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017dc:	b29b      	uxth	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0ba      	beq.n	8001758 <HAL_I2C_Master_Transmit+0x74>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017e2:	9500      	str	r5, [sp, #0]
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff fe34 	bl	8001456 <I2C_WaitOnFlagUntilTimeout>
 80017ee:	2800      	cmp	r0, #0
 80017f0:	d1e1      	bne.n	80017b6 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	2bff      	cmp	r3, #255	; 0xff
 80017f8:	d903      	bls.n	8001802 <HAL_I2C_Master_Transmit+0x11e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017fa:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017fc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017fe:	8522      	strh	r2, [r4, #40]	; 0x28
 8001800:	e7a4      	b.n	800174c <HAL_I2C_Master_Transmit+0x68>
          hi2c->XferSize = hi2c->XferCount;
 8001802:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001804:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001806:	b292      	uxth	r2, r2
 8001808:	8522      	strh	r2, [r4, #40]	; 0x28
 800180a:	e7c6      	b.n	800179a <HAL_I2C_Master_Transmit+0xb6>
    return HAL_BUSY;
 800180c:	2002      	movs	r0, #2
 800180e:	e7cf      	b.n	80017b0 <HAL_I2C_Master_Transmit+0xcc>
 8001810:	80002000 	.word	0x80002000

08001814 <HAL_I2C_Master_Receive>:
{
 8001814:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001818:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800181a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800181e:	4604      	mov	r4, r0
 8001820:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001822:	2b20      	cmp	r3, #32
{
 8001824:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001826:	f040 8089 	bne.w	800193c <HAL_I2C_Master_Receive+0x128>
    __HAL_LOCK(hi2c);
 800182a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800182e:	2b01      	cmp	r3, #1
 8001830:	f000 8084 	beq.w	800193c <HAL_I2C_Master_Receive+0x128>
 8001834:	2701      	movs	r7, #1
 8001836:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800183a:	f7fe ff1d 	bl	8000678 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800183e:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001840:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001842:	9000      	str	r0, [sp, #0]
 8001844:	463a      	mov	r2, r7
 8001846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800184a:	4620      	mov	r0, r4
 800184c:	f7ff fe03 	bl	8001456 <I2C_WaitOnFlagUntilTimeout>
 8001850:	2800      	cmp	r0, #0
 8001852:	d148      	bne.n	80018e6 <HAL_I2C_Master_Receive+0xd2>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001854:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 8001856:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800185a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800185c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001860:	2310      	movs	r3, #16
 8001862:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001866:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001868:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800186c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800186e:	b29b      	uxth	r3, r3
 8001870:	2bff      	cmp	r3, #255	; 0xff
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <HAL_I2C_Master_Receive+0x12c>)
 8001874:	d925      	bls.n	80018c2 <HAL_I2C_Master_Receive+0xae>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001876:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001878:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800187a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800187c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001880:	4631      	mov	r1, r6
 8001882:	4620      	mov	r0, r4
 8001884:	f7ff fdcd 	bl	8001422 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001888:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800188a:	462a      	mov	r2, r5
 800188c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800188e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001890:	b29b      	uxth	r3, r3
 8001892:	b9f3      	cbnz	r3, 80018d2 <HAL_I2C_Master_Receive+0xbe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001894:	f7ff feae 	bl	80015f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001898:	b9f0      	cbnz	r0, 80018d8 <HAL_I2C_Master_Receive+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800189a:	6823      	ldr	r3, [r4, #0]
 800189c:	2120      	movs	r1, #32
 800189e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80018a6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80018aa:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80018b4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80018b8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018bc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80018c0:	e00e      	b.n	80018e0 <HAL_I2C_Master_Receive+0xcc>
      hi2c->XferSize = hi2c->XferCount;
 80018c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80018c4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80018c6:	b292      	uxth	r2, r2
 80018c8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	e7d6      	b.n	8001880 <HAL_I2C_Master_Receive+0x6c>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d2:	f7ff fe24 	bl	800151e <I2C_WaitOnRXNEFlagUntilTimeout>
 80018d6:	b140      	cbz	r0, 80018ea <HAL_I2C_Master_Receive+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d103      	bne.n	80018e6 <HAL_I2C_Master_Receive+0xd2>
          return HAL_ERROR;
 80018de:	2001      	movs	r0, #1
}
 80018e0:	b003      	add	sp, #12
 80018e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 80018e6:	2003      	movs	r0, #3
 80018e8:	e7fa      	b.n	80018e0 <HAL_I2C_Master_Receive+0xcc>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80018ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	6262      	str	r2, [r4, #36]	; 0x24
 80018f0:	6822      	ldr	r2, [r4, #0]
 80018f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018f4:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80018f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80018f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80018fa:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80018fc:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80018fe:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001900:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001902:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001904:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001906:	2a00      	cmp	r2, #0
 8001908:	d1be      	bne.n	8001888 <HAL_I2C_Master_Receive+0x74>
 800190a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800190c:	b29b      	uxth	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0ba      	beq.n	8001888 <HAL_I2C_Master_Receive+0x74>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001912:	9500      	str	r5, [sp, #0]
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001918:	4620      	mov	r0, r4
 800191a:	f7ff fd9c 	bl	8001456 <I2C_WaitOnFlagUntilTimeout>
 800191e:	2800      	cmp	r0, #0
 8001920:	d1e1      	bne.n	80018e6 <HAL_I2C_Master_Receive+0xd2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001922:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001924:	b29b      	uxth	r3, r3
 8001926:	2bff      	cmp	r3, #255	; 0xff
 8001928:	d903      	bls.n	8001932 <HAL_I2C_Master_Receive+0x11e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800192a:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800192c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800192e:	8522      	strh	r2, [r4, #40]	; 0x28
 8001930:	e7a4      	b.n	800187c <HAL_I2C_Master_Receive+0x68>
          hi2c->XferSize = hi2c->XferCount;
 8001932:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001934:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001936:	b292      	uxth	r2, r2
 8001938:	8522      	strh	r2, [r4, #40]	; 0x28
 800193a:	e7c6      	b.n	80018ca <HAL_I2C_Master_Receive+0xb6>
    return HAL_BUSY;
 800193c:	2002      	movs	r0, #2
 800193e:	e7cf      	b.n	80018e0 <HAL_I2C_Master_Receive+0xcc>
 8001940:	80002400 	.word	0x80002400

08001944 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001944:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	2a20      	cmp	r2, #32
{
 800194c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800194e:	d11d      	bne.n	800198c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001950:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001954:	2b01      	cmp	r3, #1
 8001956:	d019      	beq.n	800198c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001958:	2324      	movs	r3, #36	; 0x24
 800195a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800195e:	6803      	ldr	r3, [r0, #0]
 8001960:	681c      	ldr	r4, [r3, #0]
 8001962:	f024 0401 	bic.w	r4, r4, #1
 8001966:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001968:	681c      	ldr	r4, [r3, #0]
 800196a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800196e:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001970:	681c      	ldr	r4, [r3, #0]
 8001972:	4321      	orrs	r1, r4
 8001974:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001976:	6819      	ldr	r1, [r3, #0]
 8001978:	f041 0101 	orr.w	r1, r1, #1
 800197c:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800197e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001980:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001984:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001988:	4618      	mov	r0, r3
 800198a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800198c:	2002      	movs	r0, #2
  }
}
 800198e:	bd10      	pop	{r4, pc}

08001990 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001990:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001992:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001996:	b2e4      	uxtb	r4, r4
 8001998:	2c20      	cmp	r4, #32
 800199a:	d11c      	bne.n	80019d6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800199c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d018      	beq.n	80019d6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019a4:	2324      	movs	r3, #36	; 0x24
 80019a6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019aa:	6803      	ldr	r3, [r0, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019b4:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019b6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019ba:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019be:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80019ca:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80019ce:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80019d2:	4618      	mov	r0, r3
 80019d4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80019d6:	2002      	movs	r0, #2
  }
}
 80019d8:	bd10      	pop	{r4, pc}
	...

080019dc <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019dc:	4a02      	ldr	r2, [pc, #8]	; (80019e8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80019de:	6813      	ldr	r3, [r2, #0]
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4770      	bx	lr
 80019e8:	40007000 	.word	0x40007000

080019ec <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80019ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019f2:	4c19      	ldr	r4, [pc, #100]	; (8001a58 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a0c:	f7fe fe34 	bl	8000678 <HAL_GetTick>
 8001a10:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a12:	6863      	ldr	r3, [r4, #4]
 8001a14:	03da      	lsls	r2, r3, #15
 8001a16:	d50c      	bpl.n	8001a32 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a20:	f7fe fe2a 	bl	8000678 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a24:	4c0c      	ldr	r4, [pc, #48]	; (8001a58 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8001a26:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a28:	6863      	ldr	r3, [r4, #4]
 8001a2a:	039b      	lsls	r3, r3, #14
 8001a2c:	d50a      	bpl.n	8001a44 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001a2e:	2000      	movs	r0, #0
 8001a30:	e006      	b.n	8001a40 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a32:	f7fe fe21 	bl	8000678 <HAL_GetTick>
 8001a36:	1b40      	subs	r0, r0, r5
 8001a38:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a3c:	d9e9      	bls.n	8001a12 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001a3e:	2003      	movs	r0, #3
}
 8001a40:	b003      	add	sp, #12
 8001a42:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a44:	f7fe fe18 	bl	8000678 <HAL_GetTick>
 8001a48:	1b40      	subs	r0, r0, r5
 8001a4a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a4e:	d9eb      	bls.n	8001a28 <HAL_PWREx_EnableOverDrive+0x3c>
 8001a50:	e7f5      	b.n	8001a3e <HAL_PWREx_EnableOverDrive+0x52>
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40007000 	.word	0x40007000

08001a5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a60:	4604      	mov	r4, r0
 8001a62:	b918      	cbnz	r0, 8001a6c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001a64:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001a66:	b002      	add	sp, #8
 8001a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6c:	6803      	ldr	r3, [r0, #0]
 8001a6e:	07d8      	lsls	r0, r3, #31
 8001a70:	d410      	bmi.n	8001a94 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	0799      	lsls	r1, r3, #30
 8001a76:	d45e      	bmi.n	8001b36 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	0719      	lsls	r1, r3, #28
 8001a7c:	f100 80a3 	bmi.w	8001bc6 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	075a      	lsls	r2, r3, #29
 8001a84:	f100 80c4 	bmi.w	8001c10 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a88:	69a2      	ldr	r2, [r4, #24]
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	f040 812e 	bne.w	8001cec <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001a90:	2000      	movs	r0, #0
 8001a92:	e7e8      	b.n	8001a66 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a94:	4b93      	ldr	r3, [pc, #588]	; (8001ce4 <HAL_RCC_OscConfig+0x288>)
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	f002 020c 	and.w	r2, r2, #12
 8001a9c:	2a04      	cmp	r2, #4
 8001a9e:	d007      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	f002 020c 	and.w	r2, r2, #12
 8001aa6:	2a08      	cmp	r2, #8
 8001aa8:	d10a      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x64>
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	025a      	lsls	r2, r3, #9
 8001aae:	d507      	bpl.n	8001ac0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	4b8c      	ldr	r3, [pc, #560]	; (8001ce4 <HAL_RCC_OscConfig+0x288>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	039b      	lsls	r3, r3, #14
 8001ab6:	d5dc      	bpl.n	8001a72 <HAL_RCC_OscConfig+0x16>
 8001ab8:	6863      	ldr	r3, [r4, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1d9      	bne.n	8001a72 <HAL_RCC_OscConfig+0x16>
 8001abe:	e7d1      	b.n	8001a64 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac0:	6863      	ldr	r3, [r4, #4]
 8001ac2:	4d88      	ldr	r5, [pc, #544]	; (8001ce4 <HAL_RCC_OscConfig+0x288>)
 8001ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac8:	d111      	bne.n	8001aee <HAL_RCC_OscConfig+0x92>
 8001aca:	682b      	ldr	r3, [r5, #0]
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ad2:	f7fe fdd1 	bl	8000678 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4d83      	ldr	r5, [pc, #524]	; (8001ce4 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8001ad8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	682b      	ldr	r3, [r5, #0]
 8001adc:	039f      	lsls	r7, r3, #14
 8001ade:	d4c8      	bmi.n	8001a72 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7fe fdca 	bl	8000678 <HAL_GetTick>
 8001ae4:	1b80      	subs	r0, r0, r6
 8001ae6:	2864      	cmp	r0, #100	; 0x64
 8001ae8:	d9f7      	bls.n	8001ada <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001aea:	2003      	movs	r0, #3
 8001aec:	e7bb      	b.n	8001a66 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aee:	b99b      	cbnz	r3, 8001b18 <HAL_RCC_OscConfig+0xbc>
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af6:	602b      	str	r3, [r5, #0]
 8001af8:	682b      	ldr	r3, [r5, #0]
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b00:	f7fe fdba 	bl	8000678 <HAL_GetTick>
 8001b04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	682b      	ldr	r3, [r5, #0]
 8001b08:	0398      	lsls	r0, r3, #14
 8001b0a:	d5b2      	bpl.n	8001a72 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7fe fdb4 	bl	8000678 <HAL_GetTick>
 8001b10:	1b80      	subs	r0, r0, r6
 8001b12:	2864      	cmp	r0, #100	; 0x64
 8001b14:	d9f7      	bls.n	8001b06 <HAL_RCC_OscConfig+0xaa>
 8001b16:	e7e8      	b.n	8001aea <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b1c:	682b      	ldr	r3, [r5, #0]
 8001b1e:	d103      	bne.n	8001b28 <HAL_RCC_OscConfig+0xcc>
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b24:	602b      	str	r3, [r5, #0]
 8001b26:	e7d0      	b.n	8001aca <HAL_RCC_OscConfig+0x6e>
 8001b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2c:	602b      	str	r3, [r5, #0]
 8001b2e:	682b      	ldr	r3, [r5, #0]
 8001b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b34:	e7cc      	b.n	8001ad0 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b36:	4b6b      	ldr	r3, [pc, #428]	; (8001ce4 <HAL_RCC_OscConfig+0x288>)
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	f012 0f0c 	tst.w	r2, #12
 8001b3e:	d007      	beq.n	8001b50 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	f002 020c 	and.w	r2, r2, #12
 8001b46:	2a08      	cmp	r2, #8
 8001b48:	d111      	bne.n	8001b6e <HAL_RCC_OscConfig+0x112>
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	0259      	lsls	r1, r3, #9
 8001b4e:	d40e      	bmi.n	8001b6e <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b50:	4b64      	ldr	r3, [pc, #400]	; (8001ce4 <HAL_RCC_OscConfig+0x288>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	0792      	lsls	r2, r2, #30
 8001b56:	d502      	bpl.n	8001b5e <HAL_RCC_OscConfig+0x102>
 8001b58:	68e2      	ldr	r2, [r4, #12]
 8001b5a:	2a01      	cmp	r2, #1
 8001b5c:	d182      	bne.n	8001a64 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	6921      	ldr	r1, [r4, #16]
 8001b62:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001b66:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001b6a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6c:	e784      	b.n	8001a78 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b6e:	68e3      	ldr	r3, [r4, #12]
 8001b70:	4d5c      	ldr	r5, [pc, #368]	; (8001ce4 <HAL_RCC_OscConfig+0x288>)
 8001b72:	b1bb      	cbz	r3, 8001ba4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001b74:	682b      	ldr	r3, [r5, #0]
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b7c:	f7fe fd7c 	bl	8000678 <HAL_GetTick>
 8001b80:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	682b      	ldr	r3, [r5, #0]
 8001b84:	079f      	lsls	r7, r3, #30
 8001b86:	d507      	bpl.n	8001b98 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	682b      	ldr	r3, [r5, #0]
 8001b8a:	6922      	ldr	r2, [r4, #16]
 8001b8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b94:	602b      	str	r3, [r5, #0]
 8001b96:	e76f      	b.n	8001a78 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b98:	f7fe fd6e 	bl	8000678 <HAL_GetTick>
 8001b9c:	1b80      	subs	r0, r0, r6
 8001b9e:	2802      	cmp	r0, #2
 8001ba0:	d9ef      	bls.n	8001b82 <HAL_RCC_OscConfig+0x126>
 8001ba2:	e7a2      	b.n	8001aea <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001bac:	f7fe fd64 	bl	8000678 <HAL_GetTick>
 8001bb0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	682b      	ldr	r3, [r5, #0]
 8001bb4:	0798      	lsls	r0, r3, #30
 8001bb6:	f57f af5f 	bpl.w	8001a78 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bba:	f7fe fd5d 	bl	8000678 <HAL_GetTick>
 8001bbe:	1b80      	subs	r0, r0, r6
 8001bc0:	2802      	cmp	r0, #2
 8001bc2:	d9f6      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x156>
 8001bc4:	e791      	b.n	8001aea <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bc6:	6963      	ldr	r3, [r4, #20]
 8001bc8:	4d46      	ldr	r5, [pc, #280]	; (8001ce4 <HAL_RCC_OscConfig+0x288>)
 8001bca:	b183      	cbz	r3, 8001bee <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001bcc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001bd4:	f7fe fd50 	bl	8000678 <HAL_GetTick>
 8001bd8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bdc:	079b      	lsls	r3, r3, #30
 8001bde:	f53f af4f 	bmi.w	8001a80 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be2:	f7fe fd49 	bl	8000678 <HAL_GetTick>
 8001be6:	1b80      	subs	r0, r0, r6
 8001be8:	2802      	cmp	r0, #2
 8001bea:	d9f6      	bls.n	8001bda <HAL_RCC_OscConfig+0x17e>
 8001bec:	e77d      	b.n	8001aea <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001bee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001bf6:	f7fe fd3f 	bl	8000678 <HAL_GetTick>
 8001bfa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bfe:	079f      	lsls	r7, r3, #30
 8001c00:	f57f af3e 	bpl.w	8001a80 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c04:	f7fe fd38 	bl	8000678 <HAL_GetTick>
 8001c08:	1b80      	subs	r0, r0, r6
 8001c0a:	2802      	cmp	r0, #2
 8001c0c:	d9f6      	bls.n	8001bfc <HAL_RCC_OscConfig+0x1a0>
 8001c0e:	e76c      	b.n	8001aea <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c10:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <HAL_RCC_OscConfig+0x288>)
 8001c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c14:	00d0      	lsls	r0, r2, #3
 8001c16:	d427      	bmi.n	8001c68 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001c1a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c20:	641a      	str	r2, [r3, #64]	; 0x40
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2c:	4d2e      	ldr	r5, [pc, #184]	; (8001ce8 <HAL_RCC_OscConfig+0x28c>)
 8001c2e:	682b      	ldr	r3, [r5, #0]
 8001c30:	05d9      	lsls	r1, r3, #23
 8001c32:	d51b      	bpl.n	8001c6c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c34:	68a3      	ldr	r3, [r4, #8]
 8001c36:	4d2b      	ldr	r5, [pc, #172]	; (8001ce4 <HAL_RCC_OscConfig+0x288>)
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d127      	bne.n	8001c8c <HAL_RCC_OscConfig+0x230>
 8001c3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c48:	f7fe fd16 	bl	8000678 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	4f25      	ldr	r7, [pc, #148]	; (8001ce4 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001c4e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c52:	079b      	lsls	r3, r3, #30
 8001c54:	d53f      	bpl.n	8001cd6 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8001c56:	2e00      	cmp	r6, #0
 8001c58:	f43f af16 	beq.w	8001a88 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5c:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <HAL_RCC_OscConfig+0x288>)
 8001c5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	e70f      	b.n	8001a88 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001c68:	2600      	movs	r6, #0
 8001c6a:	e7df      	b.n	8001c2c <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001c6c:	682b      	ldr	r3, [r5, #0]
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c72:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001c74:	f7fe fd00 	bl	8000678 <HAL_GetTick>
 8001c78:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7a:	682b      	ldr	r3, [r5, #0]
 8001c7c:	05da      	lsls	r2, r3, #23
 8001c7e:	d4d9      	bmi.n	8001c34 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c80:	f7fe fcfa 	bl	8000678 <HAL_GetTick>
 8001c84:	1bc0      	subs	r0, r0, r7
 8001c86:	2864      	cmp	r0, #100	; 0x64
 8001c88:	d9f7      	bls.n	8001c7a <HAL_RCC_OscConfig+0x21e>
 8001c8a:	e72e      	b.n	8001aea <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8c:	b9ab      	cbnz	r3, 8001cba <HAL_RCC_OscConfig+0x25e>
 8001c8e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c90:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	672b      	str	r3, [r5, #112]	; 0x70
 8001c9a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c9c:	f023 0304 	bic.w	r3, r3, #4
 8001ca0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001ca2:	f7fe fce9 	bl	8000678 <HAL_GetTick>
 8001ca6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001caa:	0798      	lsls	r0, r3, #30
 8001cac:	d5d3      	bpl.n	8001c56 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7fe fce3 	bl	8000678 <HAL_GetTick>
 8001cb2:	1bc0      	subs	r0, r0, r7
 8001cb4:	4540      	cmp	r0, r8
 8001cb6:	d9f7      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x24c>
 8001cb8:	e717      	b.n	8001aea <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cbe:	d103      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x26c>
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	672b      	str	r3, [r5, #112]	; 0x70
 8001cc6:	e7b9      	b.n	8001c3c <HAL_RCC_OscConfig+0x1e0>
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	672b      	str	r3, [r5, #112]	; 0x70
 8001cce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	e7b5      	b.n	8001c42 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f7fe fccf 	bl	8000678 <HAL_GetTick>
 8001cda:	eba0 0008 	sub.w	r0, r0, r8
 8001cde:	42a8      	cmp	r0, r5
 8001ce0:	d9b6      	bls.n	8001c50 <HAL_RCC_OscConfig+0x1f4>
 8001ce2:	e702      	b.n	8001aea <HAL_RCC_OscConfig+0x8e>
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cec:	4d24      	ldr	r5, [pc, #144]	; (8001d80 <HAL_RCC_OscConfig+0x324>)
 8001cee:	68ab      	ldr	r3, [r5, #8]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	f43f aeb5 	beq.w	8001a64 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d02:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d04:	d12f      	bne.n	8001d66 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8001d06:	f7fe fcb7 	bl	8000678 <HAL_GetTick>
 8001d0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0c:	682b      	ldr	r3, [r5, #0]
 8001d0e:	0199      	lsls	r1, r3, #6
 8001d10:	d423      	bmi.n	8001d5a <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d12:	6a22      	ldr	r2, [r4, #32]
 8001d14:	69e3      	ldr	r3, [r4, #28]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d1a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d24:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d26:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001d2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2c:	4c14      	ldr	r4, [pc, #80]	; (8001d80 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d2e:	0852      	lsrs	r2, r2, #1
 8001d30:	3a01      	subs	r2, #1
 8001d32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d36:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d38:	682b      	ldr	r3, [r5, #0]
 8001d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d40:	f7fe fc9a 	bl	8000678 <HAL_GetTick>
 8001d44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	019a      	lsls	r2, r3, #6
 8001d4a:	f53f aea1 	bmi.w	8001a90 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7fe fc93 	bl	8000678 <HAL_GetTick>
 8001d52:	1b40      	subs	r0, r0, r5
 8001d54:	2802      	cmp	r0, #2
 8001d56:	d9f6      	bls.n	8001d46 <HAL_RCC_OscConfig+0x2ea>
 8001d58:	e6c7      	b.n	8001aea <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7fe fc8d 	bl	8000678 <HAL_GetTick>
 8001d5e:	1b80      	subs	r0, r0, r6
 8001d60:	2802      	cmp	r0, #2
 8001d62:	d9d3      	bls.n	8001d0c <HAL_RCC_OscConfig+0x2b0>
 8001d64:	e6c1      	b.n	8001aea <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001d66:	f7fe fc87 	bl	8000678 <HAL_GetTick>
 8001d6a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6c:	682b      	ldr	r3, [r5, #0]
 8001d6e:	019b      	lsls	r3, r3, #6
 8001d70:	f57f ae8e 	bpl.w	8001a90 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d74:	f7fe fc80 	bl	8000678 <HAL_GetTick>
 8001d78:	1b00      	subs	r0, r0, r4
 8001d7a:	2802      	cmp	r0, #2
 8001d7c:	d9f6      	bls.n	8001d6c <HAL_RCC_OscConfig+0x310>
 8001d7e:	e6b4      	b.n	8001aea <HAL_RCC_OscConfig+0x8e>
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001d84:	b570      	push	{r4, r5, r6, lr}
 8001d86:	4c20      	ldr	r4, [pc, #128]	; (8001e08 <HAL_RCC_MCOConfig+0x84>)
 8001d88:	b088      	sub	sp, #32
 8001d8a:	460d      	mov	r5, r1
 8001d8c:	4616      	mov	r6, r2
  if(RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8001d8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(RCC_MCOx == RCC_MCO1)
 8001d90:	b9e0      	cbnz	r0, 8001dcc <HAL_RCC_MCOConfig+0x48>
    MCO1_CLK_ENABLE();
 8001d92:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001d96:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8001d98:	6323      	str	r3, [r4, #48]	; 0x30
 8001d9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	9005      	str	r0, [sp, #20]
    MCO1_CLK_ENABLE();
 8001d9e:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001da2:	9007      	str	r0, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001da4:	4819      	ldr	r0, [pc, #100]	; (8001e0c <HAL_RCC_MCOConfig+0x88>)
    MCO1_CLK_ENABLE();
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001db8:	f7ff fa30 	bl	800121c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001dbc:	68a1      	ldr	r1, [r4, #8]
 8001dbe:	f021 61ec 	bic.w	r1, r1, #123731968	; 0x7600000
 8001dc2:	4331      	orrs	r1, r6
 8001dc4:	4329      	orrs	r1, r5
 8001dc6:	60a1      	str	r1, [r4, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8001dc8:	b008      	add	sp, #32
 8001dca:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001dd0:	a903      	add	r1, sp, #12
 8001dd2:	480f      	ldr	r0, [pc, #60]	; (8001e10 <HAL_RCC_MCOConfig+0x8c>)
    MCO2_CLK_ENABLE();
 8001dd4:	6323      	str	r3, [r4, #48]	; 0x30
 8001dd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001df2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001df4:	f7ff fa12 	bl	800121c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 8001df8:	68a3      	ldr	r3, [r4, #8]
 8001dfa:	ea45 01c6 	orr.w	r1, r5, r6, lsl #3
 8001dfe:	f023 4578 	bic.w	r5, r3, #4160749568	; 0xf8000000
 8001e02:	430d      	orrs	r5, r1
 8001e04:	60a5      	str	r5, [r4, #8]
}
 8001e06:	e7df      	b.n	8001dc8 <HAL_RCC_MCOConfig+0x44>
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40020800 	.word	0x40020800

08001e14 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e14:	4913      	ldr	r1, [pc, #76]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001e16:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e18:	688b      	ldr	r3, [r1, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d003      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0x16>
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d003      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e26:	4810      	ldr	r0, [pc, #64]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e28:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001e2a:	4810      	ldr	r0, [pc, #64]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x58>)
 8001e2c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e2e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e30:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e32:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e34:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e38:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e40:	bf1a      	itte	ne
 8001e42:	480a      	ldrne	r0, [pc, #40]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x58>)
 8001e44:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e46:	4808      	ldreq	r0, [pc, #32]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x54>)
 8001e48:	fba1 0100 	umull	r0, r1, r1, r0
 8001e4c:	f7fe fa50 	bl	80002f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x50>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e58:	3301      	adds	r3, #1
 8001e5a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001e5c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e60:	bd08      	pop	{r3, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	007a1200 	.word	0x007a1200

08001e70 <HAL_RCC_ClockConfig>:
{
 8001e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e74:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001e76:	4604      	mov	r4, r0
 8001e78:	b910      	cbnz	r0, 8001e80 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4a46      	ldr	r2, [pc, #280]	; (8001f9c <HAL_RCC_ClockConfig+0x12c>)
 8001e82:	6813      	ldr	r3, [r2, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	428b      	cmp	r3, r1
 8001e8a:	d328      	bcc.n	8001ede <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8c:	6821      	ldr	r1, [r4, #0]
 8001e8e:	078f      	lsls	r7, r1, #30
 8001e90:	d430      	bmi.n	8001ef4 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	07c8      	lsls	r0, r1, #31
 8001e94:	d443      	bmi.n	8001f1e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e96:	4a41      	ldr	r2, [pc, #260]	; (8001f9c <HAL_RCC_ClockConfig+0x12c>)
 8001e98:	6813      	ldr	r3, [r2, #0]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	429d      	cmp	r5, r3
 8001ea0:	d367      	bcc.n	8001f72 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea2:	6822      	ldr	r2, [r4, #0]
 8001ea4:	0751      	lsls	r1, r2, #29
 8001ea6:	d470      	bmi.n	8001f8a <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea8:	0713      	lsls	r3, r2, #28
 8001eaa:	d507      	bpl.n	8001ebc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eac:	4a3c      	ldr	r2, [pc, #240]	; (8001fa0 <HAL_RCC_ClockConfig+0x130>)
 8001eae:	6921      	ldr	r1, [r4, #16]
 8001eb0:	6893      	ldr	r3, [r2, #8]
 8001eb2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001eb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001eba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ebc:	f7ff ffaa 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001ec0:	4b37      	ldr	r3, [pc, #220]	; (8001fa0 <HAL_RCC_ClockConfig+0x130>)
 8001ec2:	4a38      	ldr	r2, [pc, #224]	; (8001fa4 <HAL_RCC_ClockConfig+0x134>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001eca:	5cd3      	ldrb	r3, [r2, r3]
 8001ecc:	40d8      	lsrs	r0, r3
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <HAL_RCC_ClockConfig+0x138>)
 8001ed0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7fe fb94 	bl	8000600 <HAL_InitTick>
  return HAL_OK;
 8001ed8:	2000      	movs	r0, #0
 8001eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	6813      	ldr	r3, [r2, #0]
 8001ee0:	f023 030f 	bic.w	r3, r3, #15
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee8:	6813      	ldr	r3, [r2, #0]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	4299      	cmp	r1, r3
 8001ef0:	d1c3      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xa>
 8001ef2:	e7cb      	b.n	8001e8c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	f011 0f04 	tst.w	r1, #4
 8001ef8:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_RCC_ClockConfig+0x130>)
 8001efa:	d003      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001f02:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	070e      	lsls	r6, r1, #28
 8001f06:	d503      	bpl.n	8001f10 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001f0e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	68a0      	ldr	r0, [r4, #8]
 8001f14:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f18:	4302      	orrs	r2, r0
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	e7b9      	b.n	8001e92 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1e:	6861      	ldr	r1, [r4, #4]
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <HAL_RCC_ClockConfig+0x130>)
 8001f22:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f24:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f26:	d11c      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f28:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	d0a5      	beq.n	8001e7a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f30:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f34:	4e1a      	ldr	r6, [pc, #104]	; (8001fa0 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	f022 0203 	bic.w	r2, r2, #3
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001f3e:	f7fe fb9b 	bl	8000678 <HAL_GetTick>
 8001f42:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f44:	68b3      	ldr	r3, [r6, #8]
 8001f46:	6862      	ldr	r2, [r4, #4]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f50:	d0a1      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f52:	f7fe fb91 	bl	8000678 <HAL_GetTick>
 8001f56:	1bc0      	subs	r0, r0, r7
 8001f58:	4540      	cmp	r0, r8
 8001f5a:	d9f3      	bls.n	8001f44 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001f5c:	2003      	movs	r0, #3
}
 8001f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f62:	2902      	cmp	r1, #2
 8001f64:	d102      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f66:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001f6a:	e7df      	b.n	8001f2c <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	f012 0f02 	tst.w	r2, #2
 8001f70:	e7dc      	b.n	8001f2c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	6813      	ldr	r3, [r2, #0]
 8001f74:	f023 030f 	bic.w	r3, r3, #15
 8001f78:	432b      	orrs	r3, r5
 8001f7a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7c:	6813      	ldr	r3, [r2, #0]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	429d      	cmp	r5, r3
 8001f84:	f47f af79 	bne.w	8001e7a <HAL_RCC_ClockConfig+0xa>
 8001f88:	e78b      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8a:	4905      	ldr	r1, [pc, #20]	; (8001fa0 <HAL_RCC_ClockConfig+0x130>)
 8001f8c:	68e0      	ldr	r0, [r4, #12]
 8001f8e:	688b      	ldr	r3, [r1, #8]
 8001f90:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001f94:	4303      	orrs	r3, r0
 8001f96:	608b      	str	r3, [r1, #8]
 8001f98:	e786      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x38>
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	080040f3 	.word	0x080040f3
 8001fa8:	20000008 	.word	0x20000008

08001fac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	4a03      	ldr	r2, [pc, #12]	; (8001fc8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001fba:	6810      	ldr	r0, [r2, #0]
}
 8001fbc:	40d8      	lsrs	r0, r3
 8001fbe:	4770      	bx	lr
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	08004103 	.word	0x08004103
 8001fc8:	20000008 	.word	0x20000008

08001fcc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001fd6:	5cd3      	ldrb	r3, [r2, r3]
 8001fd8:	4a03      	ldr	r2, [pc, #12]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001fda:	6810      	ldr	r0, [r2, #0]
}
 8001fdc:	40d8      	lsrs	r0, r3
 8001fde:	4770      	bx	lr
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	08004103 	.word	0x08004103
 8001fe8:	20000008 	.word	0x20000008

08001fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ff0:	6802      	ldr	r2, [r0, #0]
{
 8001ff2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ff4:	f012 0601 	ands.w	r6, r2, #1
 8001ff8:	d00b      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ffa:	4bba      	ldr	r3, [pc, #744]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ffc:	6899      	ldr	r1, [r3, #8]
 8001ffe:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8002002:	6099      	str	r1, [r3, #8]
 8002004:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8002006:	6899      	ldr	r1, [r3, #8]
 8002008:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800200a:	fab6 f686 	clz	r6, r6
 800200e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002010:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002012:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8002016:	d012      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002018:	49b2      	ldr	r1, [pc, #712]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800201a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800201c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002020:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002024:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8002028:	bf08      	it	eq
 800202a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800202c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002030:	bf16      	itet	ne
 8002032:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8002036:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002038:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800203a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800203e:	02d7      	lsls	r7, r2, #11
 8002040:	d510      	bpl.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002042:	48a8      	ldr	r0, [pc, #672]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002044:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002046:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800204a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800204e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002052:	ea43 0301 	orr.w	r3, r3, r1
 8002056:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800205a:	f000 81a9 	beq.w	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800205e:	2900      	cmp	r1, #0
 8002060:	bf08      	it	eq
 8002062:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002064:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002068:	bf18      	it	ne
 800206a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800206c:	0690      	lsls	r0, r2, #26
 800206e:	d531      	bpl.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b9c      	ldr	r3, [pc, #624]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002072:	4f9d      	ldr	r7, [pc, #628]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002076:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800207a:	641a      	str	r2, [r3, #64]	; 0x40
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800208e:	f7fe faf3 	bl	8000678 <HAL_GetTick>
 8002092:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	05d9      	lsls	r1, r3, #23
 8002098:	f140 818c 	bpl.w	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800209c:	4f91      	ldr	r7, [pc, #580]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800209e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80020a4:	f040 8191 	bne.w	80023ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020aa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80020ae:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80020b2:	4a8c      	ldr	r2, [pc, #560]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80020b4:	f040 81af 	bne.w	8002416 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80020b8:	6891      	ldr	r1, [r2, #8]
 80020ba:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80020be:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80020c2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80020c6:	4301      	orrs	r1, r0
 80020c8:	6091      	str	r1, [r2, #8]
 80020ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ce:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80020d0:	430b      	orrs	r3, r1
 80020d2:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	06df      	lsls	r7, r3, #27
 80020d8:	d50c      	bpl.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020da:	4a82      	ldr	r2, [pc, #520]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80020dc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80020e0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80020e4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80020e8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80020ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80020ee:	4301      	orrs	r1, r0
 80020f0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020f4:	0458      	lsls	r0, r3, #17
 80020f6:	d508      	bpl.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020f8:	497a      	ldr	r1, [pc, #488]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80020fa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80020fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002100:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002104:	4302      	orrs	r2, r0
 8002106:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800210a:	0419      	lsls	r1, r3, #16
 800210c:	d508      	bpl.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800210e:	4975      	ldr	r1, [pc, #468]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002110:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002112:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002116:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800211a:	4302      	orrs	r2, r0
 800211c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002120:	03da      	lsls	r2, r3, #15
 8002122:	d508      	bpl.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002124:	496f      	ldr	r1, [pc, #444]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002126:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002128:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800212c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002130:	4302      	orrs	r2, r0
 8002132:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002136:	039f      	lsls	r7, r3, #14
 8002138:	d508      	bpl.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800213a:	496a      	ldr	r1, [pc, #424]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800213c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800213e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002142:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002146:	4302      	orrs	r2, r0
 8002148:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800214c:	0658      	lsls	r0, r3, #25
 800214e:	d508      	bpl.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002150:	4964      	ldr	r1, [pc, #400]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002152:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002154:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002158:	f022 0203 	bic.w	r2, r2, #3
 800215c:	4302      	orrs	r2, r0
 800215e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002162:	0619      	lsls	r1, r3, #24
 8002164:	d508      	bpl.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002166:	495f      	ldr	r1, [pc, #380]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002168:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800216a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800216e:	f022 020c 	bic.w	r2, r2, #12
 8002172:	4302      	orrs	r2, r0
 8002174:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002178:	05da      	lsls	r2, r3, #23
 800217a:	d508      	bpl.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800217c:	4959      	ldr	r1, [pc, #356]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800217e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002180:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002184:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002188:	4302      	orrs	r2, r0
 800218a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800218e:	059f      	lsls	r7, r3, #22
 8002190:	d508      	bpl.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002192:	4954      	ldr	r1, [pc, #336]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002194:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002196:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800219a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800219e:	4302      	orrs	r2, r0
 80021a0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021a4:	0558      	lsls	r0, r3, #21
 80021a6:	d508      	bpl.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021a8:	494e      	ldr	r1, [pc, #312]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80021aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80021b4:	4302      	orrs	r2, r0
 80021b6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80021ba:	0519      	lsls	r1, r3, #20
 80021bc:	d508      	bpl.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80021be:	4949      	ldr	r1, [pc, #292]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80021c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80021ca:	4302      	orrs	r2, r0
 80021cc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80021d0:	04da      	lsls	r2, r3, #19
 80021d2:	d508      	bpl.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80021d4:	4943      	ldr	r1, [pc, #268]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80021d6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80021d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021dc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80021e0:	4302      	orrs	r2, r0
 80021e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80021e6:	049f      	lsls	r7, r3, #18
 80021e8:	d508      	bpl.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80021ea:	493e      	ldr	r1, [pc, #248]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80021ec:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80021ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80021f6:	4302      	orrs	r2, r0
 80021f8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021fc:	0258      	lsls	r0, r3, #9
 80021fe:	d508      	bpl.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002200:	4938      	ldr	r1, [pc, #224]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002202:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002204:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002208:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800220c:	4302      	orrs	r2, r0
 800220e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002212:	0299      	lsls	r1, r3, #10
 8002214:	d50c      	bpl.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002216:	4833      	ldr	r0, [pc, #204]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002218:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800221a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800221e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002222:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8002226:	bf08      	it	eq
 8002228:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800222a:	430a      	orrs	r2, r1
 800222c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002230:	f013 0f08 	tst.w	r3, #8
 8002234:	bf18      	it	ne
 8002236:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002238:	035a      	lsls	r2, r3, #13
 800223a:	d508      	bpl.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800223c:	4929      	ldr	r1, [pc, #164]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800223e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002240:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002244:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002248:	4302      	orrs	r2, r0
 800224a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800224e:	021f      	lsls	r7, r3, #8
 8002250:	d509      	bpl.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002252:	4924      	ldr	r1, [pc, #144]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002254:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002258:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800225c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002260:	4302      	orrs	r2, r0
 8002262:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002266:	0158      	lsls	r0, r3, #5
 8002268:	d509      	bpl.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800226a:	491e      	ldr	r1, [pc, #120]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800226c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8002270:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002274:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002278:	4302      	orrs	r2, r0
 800227a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800227e:	0119      	lsls	r1, r3, #4
 8002280:	d509      	bpl.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002282:	4918      	ldr	r1, [pc, #96]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002284:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8002288:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800228c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002290:	4302      	orrs	r2, r0
 8002292:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002296:	00da      	lsls	r2, r3, #3
 8002298:	d509      	bpl.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800229a:	4912      	ldr	r1, [pc, #72]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800229c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80022a0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80022a4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80022a8:	4302      	orrs	r2, r0
 80022aa:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80022ae:	2e01      	cmp	r6, #1
 80022b0:	f000 80b5 	beq.w	800241e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80022b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022b8:	f000 80b1 	beq.w	800241e <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80022bc:	2d01      	cmp	r5, #1
 80022be:	d175      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80022c0:	4d08      	ldr	r5, [pc, #32]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80022c2:	682b      	ldr	r3, [r5, #0]
 80022c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c8:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ca:	f7fe f9d5 	bl	8000678 <HAL_GetTick>
 80022ce:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022d0:	682b      	ldr	r3, [r5, #0]
 80022d2:	009f      	lsls	r7, r3, #2
 80022d4:	f100 8127 	bmi.w	8002526 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022d8:	6821      	ldr	r1, [r4, #0]
 80022da:	030e      	lsls	r6, r1, #12
 80022dc:	d506      	bpl.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x300>
 80022de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80022e0:	b143      	cbz	r3, 80022f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80022e2:	e003      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x300>
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40007000 	.word	0x40007000
 80022ec:	02cd      	lsls	r5, r1, #11
 80022ee:	d51d      	bpl.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022f2:	b9db      	cbnz	r3, 800232c <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022f4:	4a93      	ldr	r2, [pc, #588]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80022f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022fa:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80022fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002302:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002306:	4303      	orrs	r3, r0
 8002308:	6960      	ldr	r0, [r4, #20]
 800230a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800230e:	69a0      	ldr	r0, [r4, #24]
 8002310:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002318:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800231c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800231e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002322:	3801      	subs	r0, #1
 8002324:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002328:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800232c:	0288      	lsls	r0, r1, #10
 800232e:	d515      	bpl.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x370>
 8002330:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002336:	d111      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002338:	4a82      	ldr	r2, [pc, #520]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800233a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800233e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002342:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002346:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800234a:	4303      	orrs	r3, r0
 800234c:	6960      	ldr	r0, [r4, #20]
 800234e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002352:	6a20      	ldr	r0, [r4, #32]
 8002354:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800235c:	070a      	lsls	r2, r1, #28
 800235e:	d519      	bpl.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002360:	4978      	ldr	r1, [pc, #480]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002362:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002366:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800236a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800236e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002372:	4313      	orrs	r3, r2
 8002374:	6962      	ldr	r2, [r4, #20]
 8002376:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800237a:	69e2      	ldr	r2, [r4, #28]
 800237c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002384:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8002388:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800238a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002394:	4c6b      	ldr	r4, [pc, #428]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800239e:	f7fe f96b 	bl	8000678 <HAL_GetTick>
 80023a2:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	f140 80c4 	bpl.w	8002534 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80023ac:	2000      	movs	r0, #0
 80023ae:	e009      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 80023b0:	2601      	movs	r6, #1
 80023b2:	e657      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b4:	f7fe f960 	bl	8000678 <HAL_GetTick>
 80023b8:	eba0 0008 	sub.w	r0, r0, r8
 80023bc:	2864      	cmp	r0, #100	; 0x64
 80023be:	f67f ae69 	bls.w	8002094 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80023c2:	2003      	movs	r0, #3
}
 80023c4:	b003      	add	sp, #12
 80023c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80023cc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80023d0:	4293      	cmp	r3, r2
 80023d2:	f43f ae69 	beq.w	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80023d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80023de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023e2:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80023e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023ea:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80023ec:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023f0:	07da      	lsls	r2, r3, #31
 80023f2:	f57f ae59 	bpl.w	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80023f6:	f7fe f93f 	bl	8000678 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80023fe:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002402:	079b      	lsls	r3, r3, #30
 8002404:	f53f ae50 	bmi.w	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002408:	f7fe f936 	bl	8000678 <HAL_GetTick>
 800240c:	eba0 0008 	sub.w	r0, r0, r8
 8002410:	4548      	cmp	r0, r9
 8002412:	d9f5      	bls.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002414:	e7d5      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002416:	6891      	ldr	r1, [r2, #8]
 8002418:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800241c:	e654      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800241e:	4e49      	ldr	r6, [pc, #292]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002420:	6833      	ldr	r3, [r6, #0]
 8002422:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002426:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002428:	f7fe f926 	bl	8000678 <HAL_GetTick>
 800242c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800242e:	6833      	ldr	r3, [r6, #0]
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	d472      	bmi.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002434:	6822      	ldr	r2, [r4, #0]
 8002436:	07d7      	lsls	r7, r2, #31
 8002438:	d512      	bpl.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x474>
 800243a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800243c:	b983      	cbnz	r3, 8002460 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800243e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002442:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002446:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800244a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800244e:	430b      	orrs	r3, r1
 8002450:	6861      	ldr	r1, [r4, #4]
 8002452:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002456:	68a1      	ldr	r1, [r4, #8]
 8002458:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800245c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002460:	0316      	lsls	r6, r2, #12
 8002462:	d503      	bpl.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002464:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800246a:	d005      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800246c:	02d0      	lsls	r0, r2, #11
 800246e:	d51e      	bpl.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002476:	d11a      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002478:	4932      	ldr	r1, [pc, #200]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800247a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800247e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002482:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002486:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800248a:	4303      	orrs	r3, r0
 800248c:	6860      	ldr	r0, [r4, #4]
 800248e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002492:	68e0      	ldr	r0, [r4, #12]
 8002494:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800249c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80024a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024a2:	f020 001f 	bic.w	r0, r0, #31
 80024a6:	3b01      	subs	r3, #1
 80024a8:	4303      	orrs	r3, r0
 80024aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024ae:	01d1      	lsls	r1, r2, #7
 80024b0:	d511      	bpl.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024b2:	4924      	ldr	r1, [pc, #144]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80024b4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024b8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80024bc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80024c0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80024c4:	4303      	orrs	r3, r0
 80024c6:	6860      	ldr	r0, [r4, #4]
 80024c8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80024cc:	6920      	ldr	r0, [r4, #16]
 80024ce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80024d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024d6:	0192      	lsls	r2, r2, #6
 80024d8:	d50d      	bpl.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024da:	6923      	ldr	r3, [r4, #16]
 80024dc:	6862      	ldr	r2, [r4, #4]
 80024de:	041b      	lsls	r3, r3, #16
 80024e0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80024e4:	68e2      	ldr	r2, [r4, #12]
 80024e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80024ea:	68a2      	ldr	r2, [r4, #8]
 80024ec:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80024f0:	4a14      	ldr	r2, [pc, #80]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80024f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80024f6:	4e13      	ldr	r6, [pc, #76]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80024f8:	6833      	ldr	r3, [r6, #0]
 80024fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024fe:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002500:	f7fe f8ba 	bl	8000678 <HAL_GetTick>
 8002504:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002506:	6833      	ldr	r3, [r6, #0]
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	f53f aed7 	bmi.w	80022bc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800250e:	f7fe f8b3 	bl	8000678 <HAL_GetTick>
 8002512:	1bc0      	subs	r0, r0, r7
 8002514:	2864      	cmp	r0, #100	; 0x64
 8002516:	d9f6      	bls.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002518:	e753      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800251a:	f7fe f8ad 	bl	8000678 <HAL_GetTick>
 800251e:	1bc0      	subs	r0, r0, r7
 8002520:	2864      	cmp	r0, #100	; 0x64
 8002522:	d984      	bls.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002524:	e74d      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002526:	f7fe f8a7 	bl	8000678 <HAL_GetTick>
 800252a:	1b80      	subs	r0, r0, r6
 800252c:	2864      	cmp	r0, #100	; 0x64
 800252e:	f67f aecf 	bls.w	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8002532:	e746      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002534:	f7fe f8a0 	bl	8000678 <HAL_GetTick>
 8002538:	1b40      	subs	r0, r0, r5
 800253a:	2864      	cmp	r0, #100	; 0x64
 800253c:	f67f af32 	bls.w	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8002540:	e73f      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800

08002548 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002548:	6803      	ldr	r3, [r0, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002550:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800255a:	2320      	movs	r3, #32
 800255c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8002560:	4770      	bx	lr

08002562 <UART_WaitOnFlagUntilTimeout>:
{
 8002562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002566:	9d06      	ldr	r5, [sp, #24]
 8002568:	4604      	mov	r4, r0
 800256a:	460f      	mov	r7, r1
 800256c:	4616      	mov	r6, r2
 800256e:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002570:	6821      	ldr	r1, [r4, #0]
 8002572:	69ca      	ldr	r2, [r1, #28]
 8002574:	ea37 0302 	bics.w	r3, r7, r2
 8002578:	bf0c      	ite	eq
 800257a:	2201      	moveq	r2, #1
 800257c:	2200      	movne	r2, #0
 800257e:	42b2      	cmp	r2, r6
 8002580:	d002      	beq.n	8002588 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002582:	2000      	movs	r0, #0
}
 8002584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002588:	1c6b      	adds	r3, r5, #1
 800258a:	d0f2      	beq.n	8002572 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800258c:	b99d      	cbnz	r5, 80025b6 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800258e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002590:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002598:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	f022 0201 	bic.w	r2, r2, #1
 80025a0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80025a2:	2320      	movs	r3, #32
 80025a4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80025a8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80025ac:	2300      	movs	r3, #0
 80025ae:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80025b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80025b6:	f7fe f85f 	bl	8000678 <HAL_GetTick>
 80025ba:	eba0 0008 	sub.w	r0, r0, r8
 80025be:	4285      	cmp	r5, r0
 80025c0:	d8d6      	bhi.n	8002570 <UART_WaitOnFlagUntilTimeout+0xe>
 80025c2:	e7e4      	b.n	800258e <UART_WaitOnFlagUntilTimeout+0x2c>

080025c4 <HAL_UART_Transmit>:
{
 80025c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80025c8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80025ca:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 80025ce:	4604      	mov	r4, r0
 80025d0:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 80025d2:	2b20      	cmp	r3, #32
{
 80025d4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80025d6:	d14c      	bne.n	8002672 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80025d8:	2900      	cmp	r1, #0
 80025da:	d048      	beq.n	800266e <HAL_UART_Transmit+0xaa>
 80025dc:	2a00      	cmp	r2, #0
 80025de:	d046      	beq.n	800266e <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80025e0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d044      	beq.n	8002672 <HAL_UART_Transmit+0xae>
 80025e8:	2301      	movs	r3, #1
 80025ea:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025f2:	2321      	movs	r3, #33	; 0x21
 80025f4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80025f8:	f7fe f83e 	bl	8000678 <HAL_GetTick>
 80025fc:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80025fe:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8002602:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002606:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800260a:	b292      	uxth	r2, r2
 800260c:	b962      	cbnz	r2, 8002628 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800260e:	9700      	str	r7, [sp, #0]
 8002610:	4633      	mov	r3, r6
 8002612:	2140      	movs	r1, #64	; 0x40
 8002614:	4620      	mov	r0, r4
 8002616:	f7ff ffa4 	bl	8002562 <UART_WaitOnFlagUntilTimeout>
 800261a:	b998      	cbnz	r0, 8002644 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 800261c:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800261e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8002622:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 8002626:	e00e      	b.n	8002646 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8002628:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262c:	2200      	movs	r2, #0
 800262e:	9700      	str	r7, [sp, #0]
 8002630:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 8002632:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002634:	4620      	mov	r0, r4
      huart->TxXferCount--;
 8002636:	b29b      	uxth	r3, r3
 8002638:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800263c:	4633      	mov	r3, r6
 800263e:	f7ff ff90 	bl	8002562 <UART_WaitOnFlagUntilTimeout>
 8002642:	b118      	cbz	r0, 800264c <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8002644:	2003      	movs	r0, #3
}
 8002646:	b002      	add	sp, #8
 8002648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800264c:	68a3      	ldr	r3, [r4, #8]
 800264e:	6822      	ldr	r2, [r4, #0]
 8002650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002654:	d107      	bne.n	8002666 <HAL_UART_Transmit+0xa2>
 8002656:	6923      	ldr	r3, [r4, #16]
 8002658:	b92b      	cbnz	r3, 8002666 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800265a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800265e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002662:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8002664:	e7cf      	b.n	8002606 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002666:	782b      	ldrb	r3, [r5, #0]
 8002668:	3501      	adds	r5, #1
 800266a:	6293      	str	r3, [r2, #40]	; 0x28
 800266c:	e7cb      	b.n	8002606 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800266e:	2001      	movs	r0, #1
 8002670:	e7e9      	b.n	8002646 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002672:	2002      	movs	r0, #2
 8002674:	e7e7      	b.n	8002646 <HAL_UART_Transmit+0x82>

08002676 <HAL_UART_TxCpltCallback>:
 8002676:	4770      	bx	lr

08002678 <HAL_UART_RxCpltCallback>:
 8002678:	4770      	bx	lr

0800267a <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800267a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800267e:	6802      	ldr	r2, [r0, #0]
 8002680:	2b22      	cmp	r3, #34	; 0x22
{
 8002682:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002684:	d12a      	bne.n	80026dc <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002686:	6883      	ldr	r3, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8002688:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800268c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002690:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002692:	d11d      	bne.n	80026d0 <UART_Receive_IT+0x56>
 8002694:	6904      	ldr	r4, [r0, #16]
 8002696:	b9dc      	cbnz	r4, 80026d0 <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002698:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800269a:	4011      	ands	r1, r2
 800269c:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 80026a0:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 80026a2:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80026a6:	3c01      	subs	r4, #1
 80026a8:	b2a4      	uxth	r4, r4
 80026aa:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80026ae:	b96c      	cbnz	r4, 80026cc <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026b0:	6803      	ldr	r3, [r0, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026b8:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	f022 0201 	bic.w	r2, r2, #1
 80026c0:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80026c2:	2320      	movs	r3, #32
 80026c4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80026c8:	f7ff ffd6 	bl	8002678 <HAL_UART_RxCpltCallback>
    return HAL_OK;
 80026cc:	2000      	movs	r0, #0
}
 80026ce:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80026d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026d2:	1c5c      	adds	r4, r3, #1
 80026d4:	4011      	ands	r1, r2
 80026d6:	6544      	str	r4, [r0, #84]	; 0x54
 80026d8:	7019      	strb	r1, [r3, #0]
 80026da:	e7e2      	b.n	80026a2 <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80026dc:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 80026de:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80026e0:	f043 0308 	orr.w	r3, r3, #8
 80026e4:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 80026e6:	bd10      	pop	{r4, pc}

080026e8 <HAL_UART_ErrorCallback>:
{
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026ec:	6803      	ldr	r3, [r0, #0]
 80026ee:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026f0:	6819      	ldr	r1, [r3, #0]
{
 80026f2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80026f4:	0716      	lsls	r6, r2, #28
{
 80026f6:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026f8:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 80026fa:	d107      	bne.n	800270c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026fc:	0695      	lsls	r5, r2, #26
 80026fe:	d563      	bpl.n	80027c8 <HAL_UART_IRQHandler+0xdc>
 8002700:	068e      	lsls	r6, r1, #26
 8002702:	d561      	bpl.n	80027c8 <HAL_UART_IRQHandler+0xdc>
}
 8002704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002708:	f7ff bfb7 	b.w	800267a <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800270c:	f015 0001 	ands.w	r0, r5, #1
 8002710:	d102      	bne.n	8002718 <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002712:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002716:	d057      	beq.n	80027c8 <HAL_UART_IRQHandler+0xdc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002718:	07d5      	lsls	r5, r2, #31
 800271a:	d507      	bpl.n	800272c <HAL_UART_IRQHandler+0x40>
 800271c:	05ce      	lsls	r6, r1, #23
 800271e:	d505      	bpl.n	800272c <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002720:	2501      	movs	r5, #1
 8002722:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002724:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002726:	f045 0501 	orr.w	r5, r5, #1
 800272a:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800272c:	0795      	lsls	r5, r2, #30
 800272e:	d506      	bpl.n	800273e <HAL_UART_IRQHandler+0x52>
 8002730:	b128      	cbz	r0, 800273e <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002732:	2502      	movs	r5, #2
 8002734:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002736:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002738:	f045 0504 	orr.w	r5, r5, #4
 800273c:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800273e:	0756      	lsls	r6, r2, #29
 8002740:	d506      	bpl.n	8002750 <HAL_UART_IRQHandler+0x64>
 8002742:	b128      	cbz	r0, 8002750 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002744:	2504      	movs	r5, #4
 8002746:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002748:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800274a:	f045 0502 	orr.w	r5, r5, #2
 800274e:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002750:	0715      	lsls	r5, r2, #28
 8002752:	d507      	bpl.n	8002764 <HAL_UART_IRQHandler+0x78>
 8002754:	068e      	lsls	r6, r1, #26
 8002756:	d400      	bmi.n	800275a <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002758:	b120      	cbz	r0, 8002764 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800275a:	2008      	movs	r0, #8
 800275c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800275e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002760:	4303      	orrs	r3, r0
 8002762:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002764:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d06a      	beq.n	8002840 <HAL_UART_IRQHandler+0x154>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800276a:	0695      	lsls	r5, r2, #26
 800276c:	d504      	bpl.n	8002778 <HAL_UART_IRQHandler+0x8c>
 800276e:	0688      	lsls	r0, r1, #26
 8002770:	d502      	bpl.n	8002778 <HAL_UART_IRQHandler+0x8c>
        UART_Receive_IT(huart);
 8002772:	4620      	mov	r0, r4
 8002774:	f7ff ff81 	bl	800267a <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002778:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 800277a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800277c:	0719      	lsls	r1, r3, #28
 800277e:	d404      	bmi.n	800278a <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002784:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002788:	d01a      	beq.n	80027c0 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 800278a:	f7ff fedd 	bl	8002548 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	0652      	lsls	r2, r2, #25
 8002794:	d510      	bpl.n	80027b8 <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002796:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002798:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800279a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800279e:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80027a0:	b150      	cbz	r0, 80027b8 <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027a2:	4b28      	ldr	r3, [pc, #160]	; (8002844 <HAL_UART_IRQHandler+0x158>)
 80027a4:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027a6:	f7fe fa79 	bl	8000c9c <HAL_DMA_Abort_IT>
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d048      	beq.n	8002840 <HAL_UART_IRQHandler+0x154>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027ae:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80027b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80027b6:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80027b8:	4620      	mov	r0, r4
 80027ba:	f7ff ff95 	bl	80026e8 <HAL_UART_ErrorCallback>
 80027be:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80027c0:	f7ff ff92 	bl	80026e8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c4:	66e5      	str	r5, [r4, #108]	; 0x6c
 80027c6:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027c8:	0616      	lsls	r6, r2, #24
 80027ca:	d52b      	bpl.n	8002824 <HAL_UART_IRQHandler+0x138>
 80027cc:	060d      	lsls	r5, r1, #24
 80027ce:	d529      	bpl.n	8002824 <HAL_UART_IRQHandler+0x138>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027d0:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 80027d4:	2a21      	cmp	r2, #33	; 0x21
 80027d6:	d133      	bne.n	8002840 <HAL_UART_IRQHandler+0x154>
    if(huart->TxXferCount == 0U)
 80027d8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80027dc:	b292      	uxth	r2, r2
 80027de:	b942      	cbnz	r2, 80027f2 <HAL_UART_IRQHandler+0x106>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027e6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f2:	68a2      	ldr	r2, [r4, #8]
 80027f4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80027f8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80027fa:	d10e      	bne.n	800281a <HAL_UART_IRQHandler+0x12e>
 80027fc:	6921      	ldr	r1, [r4, #16]
 80027fe:	b961      	cbnz	r1, 800281a <HAL_UART_IRQHandler+0x12e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002800:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002804:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002808:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800280a:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 800280c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002810:	3b01      	subs	r3, #1
 8002812:	b29b      	uxth	r3, r3
 8002814:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002818:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800281a:	1c51      	adds	r1, r2, #1
 800281c:	64e1      	str	r1, [r4, #76]	; 0x4c
 800281e:	7812      	ldrb	r2, [r2, #0]
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
 8002822:	e7f3      	b.n	800280c <HAL_UART_IRQHandler+0x120>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002824:	0650      	lsls	r0, r2, #25
 8002826:	d50b      	bpl.n	8002840 <HAL_UART_IRQHandler+0x154>
 8002828:	064a      	lsls	r2, r1, #25
 800282a:	d509      	bpl.n	8002840 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800282c:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 800282e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002834:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002836:	2320      	movs	r3, #32
 8002838:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 800283c:	f7ff ff1b 	bl	8002676 <HAL_UART_TxCpltCallback>
 8002840:	bd70      	pop	{r4, r5, r6, pc}
 8002842:	bf00      	nop
 8002844:	08002849 	.word	0x08002849

08002848 <UART_DMAAbortOnError>:
{
 8002848:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800284a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002852:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002856:	f7ff ff47 	bl	80026e8 <HAL_UART_ErrorCallback>
 800285a:	bd08      	pop	{r3, pc}

0800285c <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800285c:	b538      	push	{r3, r4, r5, lr}
 800285e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002860:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002862:	69c3      	ldr	r3, [r0, #28]
 8002864:	6921      	ldr	r1, [r4, #16]
 8002866:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002868:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800286a:	430a      	orrs	r2, r1
 800286c:	6961      	ldr	r1, [r4, #20]
 800286e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002870:	4993      	ldr	r1, [pc, #588]	; (8002ac0 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002872:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002874:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002876:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002878:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800287a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800287c:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800287e:	686a      	ldr	r2, [r5, #4]
 8002880:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002884:	430a      	orrs	r2, r1
 8002886:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002888:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800288a:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800288c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800288e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8002892:	430a      	orrs	r2, r1
 8002894:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002896:	4a8b      	ldr	r2, [pc, #556]	; (8002ac4 <UART_SetConfig+0x268>)
 8002898:	4295      	cmp	r5, r2
 800289a:	d119      	bne.n	80028d0 <UART_SetConfig+0x74>
 800289c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80028a0:	4989      	ldr	r1, [pc, #548]	; (8002ac8 <UART_SetConfig+0x26c>)
 80028a2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80028a6:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ae:	5c8a      	ldrb	r2, [r1, r2]
 80028b0:	f040 80b3 	bne.w	8002a1a <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 80028b4:	2a08      	cmp	r2, #8
 80028b6:	f200 80ad 	bhi.w	8002a14 <UART_SetConfig+0x1b8>
 80028ba:	e8df f012 	tbh	[pc, r2, lsl #1]
 80028be:	0026      	.short	0x0026
 80028c0:	00e9007b 	.word	0x00e9007b
 80028c4:	00f500ab 	.word	0x00f500ab
 80028c8:	00ab00ab 	.word	0x00ab00ab
 80028cc:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028d0:	4a7e      	ldr	r2, [pc, #504]	; (8002acc <UART_SetConfig+0x270>)
 80028d2:	4295      	cmp	r5, r2
 80028d4:	d107      	bne.n	80028e6 <UART_SetConfig+0x8a>
 80028d6:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80028da:	497d      	ldr	r1, [pc, #500]	; (8002ad0 <UART_SetConfig+0x274>)
 80028dc:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80028e0:	f002 020c 	and.w	r2, r2, #12
 80028e4:	e7e1      	b.n	80028aa <UART_SetConfig+0x4e>
 80028e6:	4a7b      	ldr	r2, [pc, #492]	; (8002ad4 <UART_SetConfig+0x278>)
 80028e8:	4295      	cmp	r5, r2
 80028ea:	d12b      	bne.n	8002944 <UART_SetConfig+0xe8>
 80028ec:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 80028f0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80028f4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80028f8:	2a10      	cmp	r2, #16
 80028fa:	f000 80d2 	beq.w	8002aa2 <UART_SetConfig+0x246>
 80028fe:	d816      	bhi.n	800292e <UART_SetConfig+0xd2>
 8002900:	b9da      	cbnz	r2, 800293a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002906:	f040 809f 	bne.w	8002a48 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800290a:	f7ff fb4f 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800290e:	6861      	ldr	r1, [r4, #4]
 8002910:	084a      	lsrs	r2, r1, #1
 8002912:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002916:	fbb3 f3f1 	udiv	r3, r3, r1
 800291a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800291c:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 800291e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002922:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002926:	6821      	ldr	r1, [r4, #0]
 8002928:	4313      	orrs	r3, r2
 800292a:	60cb      	str	r3, [r1, #12]
 800292c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800292e:	2a20      	cmp	r2, #32
 8002930:	f000 80ab 	beq.w	8002a8a <UART_SetConfig+0x22e>
 8002934:	2a30      	cmp	r2, #48	; 0x30
 8002936:	f000 80ba 	beq.w	8002aae <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800293a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800293e:	d069      	beq.n	8002a14 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002940:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8002942:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002944:	4a64      	ldr	r2, [pc, #400]	; (8002ad8 <UART_SetConfig+0x27c>)
 8002946:	4295      	cmp	r5, r2
 8002948:	d10e      	bne.n	8002968 <UART_SetConfig+0x10c>
 800294a:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 800294e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002952:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002956:	2a40      	cmp	r2, #64	; 0x40
 8002958:	f000 80a3 	beq.w	8002aa2 <UART_SetConfig+0x246>
 800295c:	d9d0      	bls.n	8002900 <UART_SetConfig+0xa4>
 800295e:	2a80      	cmp	r2, #128	; 0x80
 8002960:	f000 8093 	beq.w	8002a8a <UART_SetConfig+0x22e>
 8002964:	2ac0      	cmp	r2, #192	; 0xc0
 8002966:	e7e6      	b.n	8002936 <UART_SetConfig+0xda>
 8002968:	4a5c      	ldr	r2, [pc, #368]	; (8002adc <UART_SetConfig+0x280>)
 800296a:	4295      	cmp	r5, r2
 800296c:	d110      	bne.n	8002990 <UART_SetConfig+0x134>
 800296e:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8002972:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002976:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800297a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800297e:	f000 8090 	beq.w	8002aa2 <UART_SetConfig+0x246>
 8002982:	d9bd      	bls.n	8002900 <UART_SetConfig+0xa4>
 8002984:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002988:	d07f      	beq.n	8002a8a <UART_SetConfig+0x22e>
 800298a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800298e:	e7d2      	b.n	8002936 <UART_SetConfig+0xda>
 8002990:	4a53      	ldr	r2, [pc, #332]	; (8002ae0 <UART_SetConfig+0x284>)
 8002992:	4295      	cmp	r5, r2
 8002994:	d117      	bne.n	80029c6 <UART_SetConfig+0x16a>
 8002996:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 800299a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800299e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80029a2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80029a6:	d07c      	beq.n	8002aa2 <UART_SetConfig+0x246>
 80029a8:	d807      	bhi.n	80029ba <UART_SetConfig+0x15e>
 80029aa:	2a00      	cmp	r2, #0
 80029ac:	d1c5      	bne.n	800293a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b2:	d154      	bne.n	8002a5e <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029b4:	f7ff fb0a 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 80029b8:	e7a9      	b.n	800290e <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ba:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80029be:	d064      	beq.n	8002a8a <UART_SetConfig+0x22e>
 80029c0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80029c4:	e7b7      	b.n	8002936 <UART_SetConfig+0xda>
 80029c6:	4a47      	ldr	r2, [pc, #284]	; (8002ae4 <UART_SetConfig+0x288>)
 80029c8:	4295      	cmp	r5, r2
 80029ca:	d10f      	bne.n	80029ec <UART_SetConfig+0x190>
 80029cc:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80029d0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80029d4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80029d8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80029dc:	d061      	beq.n	8002aa2 <UART_SetConfig+0x246>
 80029de:	d98f      	bls.n	8002900 <UART_SetConfig+0xa4>
 80029e0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80029e4:	d051      	beq.n	8002a8a <UART_SetConfig+0x22e>
 80029e6:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80029ea:	e7a4      	b.n	8002936 <UART_SetConfig+0xda>
 80029ec:	4a3e      	ldr	r2, [pc, #248]	; (8002ae8 <UART_SetConfig+0x28c>)
 80029ee:	4295      	cmp	r5, r2
 80029f0:	d1a3      	bne.n	800293a <UART_SetConfig+0xde>
 80029f2:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 80029f6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80029fa:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80029fe:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002a02:	d04e      	beq.n	8002aa2 <UART_SetConfig+0x246>
 8002a04:	f67f af7c 	bls.w	8002900 <UART_SetConfig+0xa4>
 8002a08:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002a0c:	d03d      	beq.n	8002a8a <UART_SetConfig+0x22e>
 8002a0e:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8002a12:	e790      	b.n	8002936 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8002a14:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e781      	b.n	800291e <UART_SetConfig+0xc2>
    switch (clocksource)
 8002a1a:	2a08      	cmp	r2, #8
 8002a1c:	d890      	bhi.n	8002940 <UART_SetConfig+0xe4>
 8002a1e:	a301      	add	r3, pc, #4	; (adr r3, 8002a24 <UART_SetConfig+0x1c8>)
 8002a20:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002a24:	08002a49 	.word	0x08002a49
 8002a28:	08002a5f 	.word	0x08002a5f
 8002a2c:	08002a65 	.word	0x08002a65
 8002a30:	08002941 	.word	0x08002941
 8002a34:	08002a7b 	.word	0x08002a7b
 8002a38:	08002941 	.word	0x08002941
 8002a3c:	08002941 	.word	0x08002941
 8002a40:	08002941 	.word	0x08002941
 8002a44:	08002a81 	.word	0x08002a81
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a48:	f7ff fab0 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a4c:	6863      	ldr	r3, [r4, #4]
 8002a4e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002a52:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a56:	b280      	uxth	r0, r0
 8002a58:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a5a:	2000      	movs	r0, #0
      break;
 8002a5c:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a5e:	f7ff fab5 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 8002a62:	e7f3      	b.n	8002a4c <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a64:	6862      	ldr	r2, [r4, #4]
 8002a66:	0853      	lsrs	r3, r2, #1
 8002a68:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002a6c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	60eb      	str	r3, [r5, #12]
 8002a78:	e7ef      	b.n	8002a5a <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a7a:	f7ff f9cb 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8002a7e:	e7e5      	b.n	8002a4c <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a80:	6862      	ldr	r2, [r4, #4]
 8002a82:	0853      	lsrs	r3, r2, #1
 8002a84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a88:	e7f2      	b.n	8002a70 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a8e:	d1e9      	bne.n	8002a64 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a90:	6860      	ldr	r0, [r4, #4]
 8002a92:	0843      	lsrs	r3, r0, #1
 8002a94:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002a98:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a9c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002aa0:	e73b      	b.n	800291a <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa6:	d1e8      	bne.n	8002a7a <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002aa8:	f7ff f9b4 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8002aac:	e72f      	b.n	800290e <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab2:	d1e5      	bne.n	8002a80 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ab4:	6860      	ldr	r0, [r4, #4]
 8002ab6:	0843      	lsrs	r3, r0, #1
 8002ab8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002abc:	e7ee      	b.n	8002a9c <UART_SetConfig+0x240>
 8002abe:	bf00      	nop
 8002ac0:	efff69f3 	.word	0xefff69f3
 8002ac4:	40011000 	.word	0x40011000
 8002ac8:	08003e54 	.word	0x08003e54
 8002acc:	40004400 	.word	0x40004400
 8002ad0:	08003e58 	.word	0x08003e58
 8002ad4:	40004800 	.word	0x40004800
 8002ad8:	40004c00 	.word	0x40004c00
 8002adc:	40005000 	.word	0x40005000
 8002ae0:	40011400 	.word	0x40011400
 8002ae4:	40007800 	.word	0x40007800
 8002ae8:	40007c00 	.word	0x40007c00

08002aec <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002aec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002aee:	07da      	lsls	r2, r3, #31
{
 8002af0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002af2:	d506      	bpl.n	8002b02 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002af4:	6801      	ldr	r1, [r0, #0]
 8002af6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002af8:	684a      	ldr	r2, [r1, #4]
 8002afa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002afe:	4322      	orrs	r2, r4
 8002b00:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b02:	079c      	lsls	r4, r3, #30
 8002b04:	d506      	bpl.n	8002b14 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b06:	6801      	ldr	r1, [r0, #0]
 8002b08:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002b0a:	684a      	ldr	r2, [r1, #4]
 8002b0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b10:	4322      	orrs	r2, r4
 8002b12:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b14:	0759      	lsls	r1, r3, #29
 8002b16:	d506      	bpl.n	8002b26 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b18:	6801      	ldr	r1, [r0, #0]
 8002b1a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002b1c:	684a      	ldr	r2, [r1, #4]
 8002b1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b22:	4322      	orrs	r2, r4
 8002b24:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b26:	071a      	lsls	r2, r3, #28
 8002b28:	d506      	bpl.n	8002b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b2a:	6801      	ldr	r1, [r0, #0]
 8002b2c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002b2e:	684a      	ldr	r2, [r1, #4]
 8002b30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b34:	4322      	orrs	r2, r4
 8002b36:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b38:	06dc      	lsls	r4, r3, #27
 8002b3a:	d506      	bpl.n	8002b4a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b3c:	6801      	ldr	r1, [r0, #0]
 8002b3e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002b40:	688a      	ldr	r2, [r1, #8]
 8002b42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b46:	4322      	orrs	r2, r4
 8002b48:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b4a:	0699      	lsls	r1, r3, #26
 8002b4c:	d506      	bpl.n	8002b5c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b4e:	6801      	ldr	r1, [r0, #0]
 8002b50:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002b52:	688a      	ldr	r2, [r1, #8]
 8002b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b58:	4322      	orrs	r2, r4
 8002b5a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b5c:	065a      	lsls	r2, r3, #25
 8002b5e:	d510      	bpl.n	8002b82 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b60:	6801      	ldr	r1, [r0, #0]
 8002b62:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002b64:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b66:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b6a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002b6e:	ea42 0204 	orr.w	r2, r2, r4
 8002b72:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b74:	d105      	bne.n	8002b82 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b76:	684a      	ldr	r2, [r1, #4]
 8002b78:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002b7a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002b7e:	4322      	orrs	r2, r4
 8002b80:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b82:	061b      	lsls	r3, r3, #24
 8002b84:	d506      	bpl.n	8002b94 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b86:	6802      	ldr	r2, [r0, #0]
 8002b88:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b8a:	6853      	ldr	r3, [r2, #4]
 8002b8c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002b90:	430b      	orrs	r3, r1
 8002b92:	6053      	str	r3, [r2, #4]
 8002b94:	bd10      	pop	{r4, pc}

08002b96 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b96:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b98:	2500      	movs	r5, #0
{
 8002b9a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9c:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002b9e:	f7fd fd6b 	bl	8000678 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ba2:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002ba4:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	0712      	lsls	r2, r2, #28
 8002baa:	d409      	bmi.n	8002bc0 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002bac:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bae:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002bb0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002bb4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8002bb8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8002bbc:	b003      	add	sp, #12
 8002bbe:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bc0:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002bc4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002bc8:	4620      	mov	r0, r4
 8002bca:	9200      	str	r2, [sp, #0]
 8002bcc:	462a      	mov	r2, r5
 8002bce:	f7ff fcc8 	bl	8002562 <UART_WaitOnFlagUntilTimeout>
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d0ea      	beq.n	8002bac <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002bd6:	2003      	movs	r0, #3
 8002bd8:	e7f0      	b.n	8002bbc <UART_CheckIdleState+0x26>

08002bda <HAL_UART_Init>:
{
 8002bda:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002bdc:	4604      	mov	r4, r0
 8002bde:	b360      	cbz	r0, 8002c3a <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002be0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002be4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002be8:	b91b      	cbnz	r3, 8002bf2 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002bea:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002bee:	f000 fbf9 	bl	80033e4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002bf2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002bf4:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bf6:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002bf8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002bfc:	6813      	ldr	r3, [r2, #0]
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c04:	f7ff fe2a 	bl	800285c <UART_SetConfig>
 8002c08:	2801      	cmp	r0, #1
 8002c0a:	d016      	beq.n	8002c3a <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c0e:	b113      	cbz	r3, 8002c16 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002c10:	4620      	mov	r0, r4
 8002c12:	f7ff ff6b 	bl	8002aec <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c16:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002c18:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c28:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	f042 0201 	orr.w	r2, r2, #1
}
 8002c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002c34:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002c36:	f7ff bfae 	b.w	8002b96 <UART_CheckIdleState>
}
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	bd10      	pop	{r4, pc}
	...

08002c40 <vprint>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vprint(const char *fmt, va_list argp) {
 8002c40:	b500      	push	{lr}
 8002c42:	b0b3      	sub	sp, #204	; 0xcc
	char string[200];
	if (0 < vsprintf(string, fmt, argp)) // build string
 8002c44:	460a      	mov	r2, r1
 8002c46:	4601      	mov	r1, r0
 8002c48:	4668      	mov	r0, sp
 8002c4a:	f000 fce1 	bl	8003610 <vsiprintf>
 8002c4e:	2800      	cmp	r0, #0
 8002c50:	dd09      	ble.n	8002c66 <vprint+0x26>
			{
		HAL_UART_Transmit(&huart3, (uint8_t*) string, strlen(string), 0xffffff); // send message via UART
 8002c52:	4668      	mov	r0, sp
 8002c54:	f7fd faf4 	bl	8000240 <strlen>
 8002c58:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002c5c:	b282      	uxth	r2, r0
 8002c5e:	4669      	mov	r1, sp
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <vprint+0x2c>)
 8002c62:	f7ff fcaf 	bl	80025c4 <HAL_UART_Transmit>
	}
}
 8002c66:	b033      	add	sp, #204	; 0xcc
 8002c68:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c6c:	200258fc 	.word	0x200258fc

08002c70 <my_printf>:

void my_printf(const char *fmt, ...) // custom printf() function
{
 8002c70:	b40f      	push	{r0, r1, r2, r3}
 8002c72:	b507      	push	{r0, r1, r2, lr}
 8002c74:	a904      	add	r1, sp, #16
 8002c76:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list argp;
	va_start(argp, fmt);
 8002c7a:	9101      	str	r1, [sp, #4]
	vprint(fmt, argp);
 8002c7c:	f7ff ffe0 	bl	8002c40 <vprint>
	va_end(argp);
}
 8002c80:	b003      	add	sp, #12
 8002c82:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c86:	b004      	add	sp, #16
 8002c88:	4770      	bx	lr
	...

08002c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c8c:	b510      	push	{r4, lr}
 8002c8e:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c90:	2234      	movs	r2, #52	; 0x34
 8002c92:	2100      	movs	r1, #0
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c94:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c96:	a807      	add	r0, sp, #28
 8002c98:	f000 fc9a 	bl	80035d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c9c:	2214      	movs	r2, #20
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	a802      	add	r0, sp, #8
 8002ca2:	f000 fc95 	bl	80035d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2290      	movs	r2, #144	; 0x90
 8002caa:	a814      	add	r0, sp, #80	; 0x50
 8002cac:	f000 fc90 	bl	80035d0 <memset>
  HAL_PWR_EnableBkUpAccess();
 8002cb0:	f7fe fe94 	bl	80019dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb4:	4b25      	ldr	r3, [pc, #148]	; (8002d4c <SystemClock_Config+0xc0>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 210;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cb6:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cca:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <SystemClock_Config+0xc4>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cd6:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cdc:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002ce6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002cea:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cec:	2301      	movs	r3, #1
 8002cee:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cf4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cf8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 210;
 8002cfe:	23d2      	movs	r3, #210	; 0xd2
 8002d00:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002d02:	2309      	movs	r3, #9
 8002d04:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d06:	f7fe fea9 	bl	8001a5c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d0a:	f7fe fe6f 	bl	80019ec <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d0e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d10:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d12:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d14:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002d1a:	2106      	movs	r1, #6
 8002d1c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d1e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d24:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d26:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002d28:	f7ff f8a2 	bl	8001e70 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8002d2c:	f44f 4382 	mov.w	r3, #16640	; 0x4100
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d30:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002d32:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8002d34:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d36:	942d      	str	r4, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d38:	f7ff f958 	bl	8001fec <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	4621      	mov	r1, r4
 8002d40:	4620      	mov	r0, r4
 8002d42:	f7ff f81f 	bl	8001d84 <HAL_RCC_MCOConfig>
}
 8002d46:	b038      	add	sp, #224	; 0xe0
 8002d48:	bd10      	pop	{r4, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40007000 	.word	0x40007000

08002d54 <main>:
{
 8002d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d58:	b08f      	sub	sp, #60	; 0x3c
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d5a:	4d98      	ldr	r5, [pc, #608]	; (8002fbc <main+0x268>)
  HAL_Init();
 8002d5c:	f7fd fc74 	bl	8000648 <HAL_Init>
  HAL_GPIO_WritePin(GPIOG, CAMERA_PWDN_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2400      	movs	r4, #0
  SystemClock_Config();
 8002d62:	f7ff ff93 	bl	8002c8c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d66:	2214      	movs	r2, #20
 8002d68:	2100      	movs	r1, #0
 8002d6a:	a809      	add	r0, sp, #36	; 0x24
 8002d6c:	f000 fc30 	bl	80035d0 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002d72:	2200      	movs	r2, #0
 8002d74:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d78:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002d7c:	4890      	ldr	r0, [pc, #576]	; (8002fc0 <main+0x26c>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d7e:	f04f 0801 	mov.w	r8, #1

  /*Configure GPIO pin : DCMI_XCLX_Pin */
  GPIO_InitStruct.Pin = DCMI_XCLX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d82:	2603      	movs	r6, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d84:	632b      	str	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hi2c1.Instance = I2C1;
 8002d8c:	4f8d      	ldr	r7, [pc, #564]	; (8002fc4 <main+0x270>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	9302      	str	r3, [sp, #8]
 8002d94:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d96:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	632b      	str	r3, [r5, #48]	; 0x30
 8002d9e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	9303      	str	r3, [sp, #12]
 8002da6:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002da8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dae:	632b      	str	r3, [r5, #48]	; 0x30
 8002db0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	9304      	str	r3, [sp, #16]
 8002db8:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	632b      	str	r3, [r5, #48]	; 0x30
 8002dc2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	9305      	str	r3, [sp, #20]
 8002dca:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dcc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002dce:	f043 0302 	orr.w	r3, r3, #2
 8002dd2:	632b      	str	r3, [r5, #48]	; 0x30
 8002dd4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	9306      	str	r3, [sp, #24]
 8002ddc:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dde:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de4:	632b      	str	r3, [r5, #48]	; 0x30
 8002de6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	9307      	str	r3, [sp, #28]
 8002dee:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002df0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002df2:	f043 0308 	orr.w	r3, r3, #8
 8002df6:	632b      	str	r3, [r5, #48]	; 0x30
 8002df8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	9308      	str	r3, [sp, #32]
 8002e00:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002e02:	f7fe fafb 	bl	80013fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, CAMERA_PWDN_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2142      	movs	r1, #66	; 0x42
 8002e0a:	486f      	ldr	r0, [pc, #444]	; (8002fc8 <main+0x274>)
 8002e0c:	f7fe faf6 	bl	80013fc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002e14:	a909      	add	r1, sp, #36	; 0x24
 8002e16:	486d      	ldr	r0, [pc, #436]	; (8002fcc <main+0x278>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002e18:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e1a:	4b6d      	ldr	r3, [pc, #436]	; (8002fd0 <main+0x27c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e1e:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002e20:	f7fe f9fc 	bl	800121c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002e24:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e28:	a909      	add	r1, sp, #36	; 0x24
 8002e2a:	4865      	ldr	r0, [pc, #404]	; (8002fc0 <main+0x26c>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002e2c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e36:	f7fe f9f1 	bl	800121c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin|USB_OverCurrent_Pin;
 8002e3a:	2381      	movs	r3, #129	; 0x81
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e3c:	a909      	add	r1, sp, #36	; 0x24
 8002e3e:	4862      	ldr	r0, [pc, #392]	; (8002fc8 <main+0x274>)
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin|USB_OverCurrent_Pin;
 8002e40:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e42:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e46:	f7fe f9e9 	bl	800121c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAMERA_PWDN_Pin|USB_PowerSwitchOn_Pin;
 8002e4a:	2342      	movs	r3, #66	; 0x42
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e4c:	a909      	add	r1, sp, #36	; 0x24
 8002e4e:	485e      	ldr	r0, [pc, #376]	; (8002fc8 <main+0x274>)
  GPIO_InitStruct.Pin = CAMERA_PWDN_Pin|USB_PowerSwitchOn_Pin;
 8002e50:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e52:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e58:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e5a:	f7fe f9df 	bl	800121c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_XCLX_Pin;
 8002e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
  HAL_GPIO_Init(DCMI_XCLX_GPIO_Port, &GPIO_InitStruct);
 8002e62:	a909      	add	r1, sp, #36	; 0x24
 8002e64:	485b      	ldr	r0, [pc, #364]	; (8002fd4 <main+0x280>)
  GPIO_InitStruct.Pin = DCMI_XCLX_Pin;
 8002e66:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e68:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e70:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(DCMI_XCLX_GPIO_Port, &GPIO_InitStruct);
 8002e72:	f7fe f9d3 	bl	800121c <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e76:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8002e78:	4857      	ldr	r0, [pc, #348]	; (8002fd8 <main+0x284>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e7e:	632b      	str	r3, [r5, #48]	; 0x30
 8002e80:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e90:	632b      	str	r3, [r5, #48]	; 0x30
 8002e92:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002e94:	6286      	str	r6, [r0, #40]	; 0x28
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e9a:	6144      	str	r4, [r0, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e9c:	6184      	str	r4, [r0, #24]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8002ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8002ea2:	4b4e      	ldr	r3, [pc, #312]	; (8002fdc <main+0x288>)
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002ea4:	61c4      	str	r4, [r0, #28]
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8002ea6:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002ea8:	6304      	str	r4, [r0, #48]	; 0x30
  huart3.Instance = USART3;
 8002eaa:	4d4d      	ldr	r5, [pc, #308]	; (8002fe0 <main+0x28c>)
  hdcmi.Instance = DCMI;
 8002eac:	4e4d      	ldr	r6, [pc, #308]	; (8002fe4 <main+0x290>)
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002eae:	e880 0018 	stmia.w	r0, {r3, r4}
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	6083      	str	r3, [r0, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eba:	60c3      	str	r3, [r0, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec0:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8002ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ec6:	6203      	str	r3, [r0, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ec8:	2304      	movs	r3, #4
 8002eca:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8002ecc:	f7fd fde8 	bl	8000aa0 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002ed0:	4622      	mov	r2, r4
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	200e      	movs	r0, #14
 8002ed6:	f7fd fbf9 	bl	80006cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002eda:	200e      	movs	r0, #14
 8002edc:	f7fd fc2e 	bl	800073c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	2039      	movs	r0, #57	; 0x39
 8002ee6:	f7fd fbf1 	bl	80006cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002eea:	2039      	movs	r0, #57	; 0x39
 8002eec:	f7fd fc26 	bl	800073c <HAL_NVIC_EnableIRQ>
  huart3.Init.BaudRate = 115200;
 8002ef0:	4a3d      	ldr	r2, [pc, #244]	; (8002fe8 <main+0x294>)
 8002ef2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ef6:	4628      	mov	r0, r5
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef8:	60ac      	str	r4, [r5, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002efa:	60ec      	str	r4, [r5, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002efc:	612c      	str	r4, [r5, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002efe:	61ac      	str	r4, [r5, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f00:	61ec      	str	r4, [r5, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f02:	622c      	str	r4, [r5, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f04:	626c      	str	r4, [r5, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 8002f06:	e885 000c 	stmia.w	r5, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f0a:	230c      	movs	r3, #12
 8002f0c:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f0e:	f7ff fe64 	bl	8002bda <HAL_UART_Init>
  hdcmi.Instance = DCMI;
 8002f12:	4b36      	ldr	r3, [pc, #216]	; (8002fec <main+0x298>)
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002f14:	4630      	mov	r0, r6
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8002f16:	60f4      	str	r4, [r6, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8002f18:	6134      	str	r4, [r6, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8002f1a:	6174      	str	r4, [r6, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002f1c:	61b4      	str	r4, [r6, #24]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002f1e:	6274      	str	r4, [r6, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8002f20:	62b4      	str	r4, [r6, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002f22:	62f4      	str	r4, [r6, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8002f24:	6334      	str	r4, [r6, #48]	; 0x30
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8002f26:	e886 0018 	stmia.w	r6, {r3, r4}
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	60b3      	str	r3, [r6, #8]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8002f2e:	2308      	movs	r3, #8
 8002f30:	6233      	str	r3, [r6, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002f32:	f7fd fc63 	bl	80007fc <HAL_DCMI_Init>
  hi2c1.Init.Timing = 0x1060669A;
 8002f36:	4b2e      	ldr	r3, [pc, #184]	; (8002ff0 <main+0x29c>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f38:	4638      	mov	r0, r7
  hi2c1.Init.Timing = 0x1060669A;
 8002f3a:	492e      	ldr	r1, [pc, #184]	; (8002ff4 <main+0x2a0>)
  hi2c1.Init.OwnAddress1 = 0;
 8002f3c:	60bc      	str	r4, [r7, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f3e:	f8c7 800c 	str.w	r8, [r7, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f42:	613c      	str	r4, [r7, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f44:	617c      	str	r4, [r7, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f46:	61bc      	str	r4, [r7, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f48:	61fc      	str	r4, [r7, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f4a:	623c      	str	r4, [r7, #32]
  hi2c1.Init.Timing = 0x1060669A;
 8002f4c:	e887 000a 	stmia.w	r7, {r1, r3}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f50:	f7fe fb77 	bl	8001642 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f54:	4621      	mov	r1, r4
 8002f56:	4638      	mov	r0, r7
 8002f58:	f7fe fcf4 	bl	8001944 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	4638      	mov	r0, r7
 8002f60:	f7fe fd16 	bl	8001990 <HAL_I2CEx_ConfigDigitalFilter>
	ov2640_init(&hi2c1, &hdcmi);
 8002f64:	4631      	mov	r1, r6
 8002f66:	4638      	mov	r0, r7
				ov2640_capture_snapshot((uint32_t) framebuf,RESOLUTION_WIDTH * RESOLUTION_HEIGHT / 2);
 8002f68:	4e23      	ldr	r6, [pc, #140]	; (8002ff8 <main+0x2a4>)
	ov2640_init(&hi2c1, &hdcmi);
 8002f6a:	f000 f8f7 	bl	800315c <ov2640_init>
	HAL_Delay(10);
 8002f6e:	200a      	movs	r0, #10
 8002f70:	f7fd fb88 	bl	8000684 <HAL_Delay>
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 8002f74:	4f15      	ldr	r7, [pc, #84]	; (8002fcc <main+0x278>)
	ov2640_conf(OPT);
 8002f76:	4648      	mov	r0, r9
 8002f78:	f000 f8b0 	bl	80030dc <ov2640_conf>
	HAL_Delay(10);
 8002f7c:	200a      	movs	r0, #10
 8002f7e:	f7fd fb81 	bl	8000684 <HAL_Delay>
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 8002f82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f86:	4638      	mov	r0, r7
 8002f88:	f7fe fa32 	bl	80013f0 <HAL_GPIO_ReadPin>
 8002f8c:	b1a0      	cbz	r0, 8002fb8 <main+0x264>
			if (mutex == 1) {
 8002f8e:	2c00      	cmp	r4, #0
 8002f90:	d0f7      	beq.n	8002f82 <main+0x22e>
				ov2640_capture_snapshot((uint32_t) framebuf,RESOLUTION_WIDTH * RESOLUTION_HEIGHT / 2);
 8002f92:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8002f96:	4630      	mov	r0, r6
 8002f98:	f000 f90c 	bl	80031b4 <ov2640_capture_snapshot>
				HAL_Delay(2000);
 8002f9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002fa0:	f7fd fb70 	bl	8000684 <HAL_Delay>
				HAL_UART_Transmit(&huart3, framebuf,RESOLUTION_WIDTH * RESOLUTION_HEIGHT, 3000);
 8002fa4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002fa8:	f44f 4230 	mov.w	r2, #45056	; 0xb000
 8002fac:	4631      	mov	r1, r6
 8002fae:	4628      	mov	r0, r5
				mutex = 0;
 8002fb0:	2400      	movs	r4, #0
				HAL_UART_Transmit(&huart3, framebuf,RESOLUTION_WIDTH * RESOLUTION_HEIGHT, 3000);
 8002fb2:	f7ff fb07 	bl	80025c4 <HAL_UART_Transmit>
 8002fb6:	e7e4      	b.n	8002f82 <main+0x22e>
			mutex = 1;
 8002fb8:	2401      	movs	r4, #1
 8002fba:	e7e2      	b.n	8002f82 <main+0x22e>
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40020400 	.word	0x40020400
 8002fc4:	2002596c 	.word	0x2002596c
 8002fc8:	40021800 	.word	0x40021800
 8002fcc:	40020800 	.word	0x40020800
 8002fd0:	10110000 	.word	0x10110000
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	2002589c 	.word	0x2002589c
 8002fdc:	40026410 	.word	0x40026410
 8002fe0:	200258fc 	.word	0x200258fc
 8002fe4:	20025a78 	.word	0x20025a78
 8002fe8:	40004800 	.word	0x40004800
 8002fec:	50050000 	.word	0x50050000
 8002ff0:	1060669a 	.word	0x1060669a
 8002ff4:	40005400 	.word	0x40005400
 8002ff8:	2000008c 	.word	0x2000008c

08002ffc <HAL_DCMI_FrameEventCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi) {
 8002ffc:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002ffe:	4805      	ldr	r0, [pc, #20]	; (8003014 <HAL_DCMI_FrameEventCallback+0x18>)
 8003000:	2201      	movs	r2, #1
 8003002:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003006:	f7fe f9f9 	bl	80013fc <HAL_GPIO_WritePin>
	my_printf("DCMI FrameEventCallback\n");
 800300a:	4803      	ldr	r0, [pc, #12]	; (8003018 <HAL_DCMI_FrameEventCallback+0x1c>)
}
 800300c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	my_printf("DCMI FrameEventCallback\n");
 8003010:	f7ff be2e 	b.w	8002c70 <my_printf>
 8003014:	40020400 	.word	0x40020400
 8003018:	08003e82 	.word	0x08003e82

0800301c <HAL_DCMI_LineEventCallback>:

void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi) {
 800301c:	4770      	bx	lr
	...

08003020 <HAL_DCMI_ErrorCallback>:
	//pic_taken = true;
	// my_printf("DCMI LineEventCallback\n");
}

void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi) {
	my_printf("DCMI HAL_DCMI_ErrorCallback\n");
 8003020:	4801      	ldr	r0, [pc, #4]	; (8003028 <HAL_DCMI_ErrorCallback+0x8>)
 8003022:	f7ff be25 	b.w	8002c70 <my_printf>
 8003026:	bf00      	nop
 8003028:	08003e65 	.word	0x08003e65

0800302c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800302c:	4770      	bx	lr
	...

08003030 <sccb_write>:
		}
		i++;
	}
}

 int sccb_write(uint8_t reg_addr, uint8_t data) {
 8003030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[2] = { 0 };
	HAL_StatusTypeDef status;
	buf[0] = reg_addr;
	buf[1] = data;
	status = HAL_I2C_Master_Transmit(phi2c, (uint16_t) 0x60, buf, 2, 100);
 8003032:	2364      	movs	r3, #100	; 0x64
	buf[0] = reg_addr;
 8003034:	f88d 000c 	strb.w	r0, [sp, #12]
	status = HAL_I2C_Master_Transmit(phi2c, (uint16_t) 0x60, buf, 2, 100);
 8003038:	4807      	ldr	r0, [pc, #28]	; (8003058 <sccb_write+0x28>)
 800303a:	aa03      	add	r2, sp, #12
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	2302      	movs	r3, #2
	buf[1] = data;
 8003040:	f88d 100d 	strb.w	r1, [sp, #13]
	status = HAL_I2C_Master_Transmit(phi2c, (uint16_t) 0x60, buf, 2, 100);
 8003044:	2160      	movs	r1, #96	; 0x60
 8003046:	6800      	ldr	r0, [r0, #0]
 8003048:	f7fe fb4c 	bl	80016e4 <HAL_I2C_Master_Transmit>
	if (status == HAL_OK) {
		return 1;
	} else {
		return 0;
	}
}
 800304c:	fab0 f080 	clz	r0, r0
 8003050:	0940      	lsrs	r0, r0, #5
 8003052:	b005      	add	sp, #20
 8003054:	f85d fb04 	ldr.w	pc, [sp], #4
 8003058:	20025ad0 	.word	0x20025ad0

0800305c <sccb_read>:

 int sccb_read(uint8_t reg_addr, uint8_t *pdata) {
 800305c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t buf[1] = { 0 };
	HAL_StatusTypeDef status;
	buf[0] = reg_addr;
	status = HAL_I2C_Master_Transmit(phi2c, (uint16_t) 0x60, buf, 1, 100);
 800305e:	4c0d      	ldr	r4, [pc, #52]	; (8003094 <sccb_read+0x38>)
	buf[0] = reg_addr;
 8003060:	aa04      	add	r2, sp, #16
	status = HAL_I2C_Master_Transmit(phi2c, (uint16_t) 0x60, buf, 1, 100);
 8003062:	2564      	movs	r5, #100	; 0x64
 int sccb_read(uint8_t reg_addr, uint8_t *pdata) {
 8003064:	460e      	mov	r6, r1
	buf[0] = reg_addr;
 8003066:	f802 0d04 	strb.w	r0, [r2, #-4]!
	status = HAL_I2C_Master_Transmit(phi2c, (uint16_t) 0x60, buf, 1, 100);
 800306a:	2301      	movs	r3, #1
 800306c:	9500      	str	r5, [sp, #0]
 800306e:	2160      	movs	r1, #96	; 0x60
 8003070:	6820      	ldr	r0, [r4, #0]
 8003072:	f7fe fb37 	bl	80016e4 <HAL_I2C_Master_Transmit>
	if (status == HAL_OK) {
 8003076:	b958      	cbnz	r0, 8003090 <sccb_read+0x34>
		status = HAL_I2C_Master_Receive(phi2c, (uint16_t) 0x60, pdata, 1, 100);
 8003078:	9500      	str	r5, [sp, #0]
 800307a:	2301      	movs	r3, #1
 800307c:	4632      	mov	r2, r6
 800307e:	2160      	movs	r1, #96	; 0x60
 8003080:	6820      	ldr	r0, [r4, #0]
 8003082:	f7fe fbc7 	bl	8001814 <HAL_I2C_Master_Receive>
		if (status == HAL_OK) {
 8003086:	fab0 f080 	clz	r0, r0
 800308a:	0940      	lsrs	r0, r0, #5
			return 0;
		}
	} else {
		return 1;
	}
}
 800308c:	b004      	add	sp, #16
 800308e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8003090:	2001      	movs	r0, #1
 8003092:	e7fb      	b.n	800308c <sccb_read+0x30>
 8003094:	20025ad0 	.word	0x20025ad0

08003098 <load_config>:
void load_config(const unsigned char arr[][2]) {
 8003098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800309a:	4607      	mov	r7, r0
 800309c:	2500      	movs	r5, #0
		reg_addr = arr[i][0];
 800309e:	b2ab      	uxth	r3, r5
 80030a0:	f817 4013 	ldrb.w	r4, [r7, r3, lsl #1]
 80030a4:	eb07 0243 	add.w	r2, r7, r3, lsl #1
		if (reg_addr == 0xff && data == 0xff) {
 80030a8:	2cff      	cmp	r4, #255	; 0xff
		data = arr[i][1];
 80030aa:	7856      	ldrb	r6, [r2, #1]
		if (reg_addr == 0xff && data == 0xff) {
 80030ac:	d101      	bne.n	80030b2 <load_config+0x1a>
 80030ae:	2eff      	cmp	r6, #255	; 0xff
 80030b0:	d012      	beq.n	80030d8 <load_config+0x40>
		sccb_read(reg_addr, &data_read);
 80030b2:	f10d 0107 	add.w	r1, sp, #7
 80030b6:	4620      	mov	r0, r4
 80030b8:	f7ff ffd0 	bl	800305c <sccb_read>
		sccb_write(reg_addr, data);
 80030bc:	4631      	mov	r1, r6
 80030be:	4620      	mov	r0, r4
 80030c0:	3501      	adds	r5, #1
 80030c2:	f7ff ffb5 	bl	8003030 <sccb_write>
		HAL_Delay(10);
 80030c6:	200a      	movs	r0, #10
 80030c8:	f7fd fadc 	bl	8000684 <HAL_Delay>
		sccb_read(reg_addr, &data_read);
 80030cc:	f10d 0107 	add.w	r1, sp, #7
 80030d0:	4620      	mov	r0, r4
 80030d2:	f7ff ffc3 	bl	800305c <sccb_read>
		reg_addr = arr[i][0];
 80030d6:	e7e2      	b.n	800309e <load_config+0x6>
}
 80030d8:	b003      	add	sp, #12
 80030da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030dc <ov2640_conf>:
void ov2640_conf(short opt) {
 80030dc:	b510      	push	{r4, lr}
 80030de:	4604      	mov	r4, r0
	load_config(OV2640_JPEG_INIT);
 80030e0:	4812      	ldr	r0, [pc, #72]	; (800312c <ov2640_conf+0x50>)
 80030e2:	f7ff ffd9 	bl	8003098 <load_config>
	load_config(OV2640_YUV422);
 80030e6:	4812      	ldr	r0, [pc, #72]	; (8003130 <ov2640_conf+0x54>)
 80030e8:	f7ff ffd6 	bl	8003098 <load_config>
	load_config(OV2640_JPEG);
 80030ec:	4811      	ldr	r0, [pc, #68]	; (8003134 <ov2640_conf+0x58>)
 80030ee:	f7ff ffd3 	bl	8003098 <load_config>
	HAL_Delay(10);
 80030f2:	200a      	movs	r0, #10
 80030f4:	f7fd fac6 	bl	8000684 <HAL_Delay>
	sccb_write(0xff, 0x01);
 80030f8:	2101      	movs	r1, #1
 80030fa:	20ff      	movs	r0, #255	; 0xff
 80030fc:	f7ff ff98 	bl	8003030 <sccb_write>
	HAL_Delay(10);
 8003100:	200a      	movs	r0, #10
 8003102:	f7fd fabf 	bl	8000684 <HAL_Delay>
	sccb_write(0x15, 0x00);
 8003106:	2100      	movs	r1, #0
 8003108:	2015      	movs	r0, #21
 800310a:	f7ff ff91 	bl	8003030 <sccb_write>
	switch( opt )
 800310e:	2c01      	cmp	r4, #1
 8003110:	d009      	beq.n	8003126 <ov2640_conf+0x4a>
 8003112:	2c02      	cmp	r4, #2
 8003114:	d005      	beq.n	8003122 <ov2640_conf+0x46>
 8003116:	b934      	cbnz	r4, 8003126 <ov2640_conf+0x4a>
		load_config(OV2640_160x120_JPEG);
 8003118:	4807      	ldr	r0, [pc, #28]	; (8003138 <ov2640_conf+0x5c>)
}
 800311a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		load_config(OV2640_320x240_JPEG);
 800311e:	f7ff bfbb 	b.w	8003098 <load_config>
		load_config(OV2640_640x480_JPEG);
 8003122:	4806      	ldr	r0, [pc, #24]	; (800313c <ov2640_conf+0x60>)
 8003124:	e7f9      	b.n	800311a <ov2640_conf+0x3e>
		load_config(OV2640_320x240_JPEG);
 8003126:	4806      	ldr	r0, [pc, #24]	; (8003140 <ov2640_conf+0x64>)
 8003128:	e7f7      	b.n	800311a <ov2640_conf+0x3e>
 800312a:	bf00      	nop
 800312c:	08003f61 	.word	0x08003f61
 8003130:	080040df 	.word	0x080040df
 8003134:	08003f4f 	.word	0x08003f4f
 8003138:	08003e9b 	.word	0x08003e9b
 800313c:	08003efd 	.word	0x08003efd
 8003140:	08003ead 	.word	0x08003ead

08003144 <ov2640_stop_dcmi>:

void ov2640_stop_dcmi(void) {
 8003144:	b508      	push	{r3, lr}
	HAL_DCMI_Stop(phdcmi);
 8003146:	4b04      	ldr	r3, [pc, #16]	; (8003158 <ov2640_stop_dcmi+0x14>)
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	f7fd fbfb 	bl	8000944 <HAL_DCMI_Stop>
	HAL_Delay(30);
 800314e:	201e      	movs	r0, #30
}
 8003150:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(30);
 8003154:	f7fd ba96 	b.w	8000684 <HAL_Delay>
 8003158:	20025ac8 	.word	0x20025ac8

0800315c <ov2640_init>:
	phi2c = p_hi2c;
 800315c:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <ov2640_init+0x4c>)
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 800315e:	2200      	movs	r2, #0
void ov2640_init(I2C_HandleTypeDef *p_hi2c, DCMI_HandleTypeDef *p_hdcmi) {
 8003160:	b510      	push	{r4, lr}
	phi2c = p_hi2c;
 8003162:	6018      	str	r0, [r3, #0]
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8003164:	4c11      	ldr	r4, [pc, #68]	; (80031ac <ov2640_init+0x50>)
	phdcmi = p_hdcmi;
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <ov2640_init+0x54>)
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8003168:	4620      	mov	r0, r4
	phdcmi = p_hdcmi;
 800316a:	6019      	str	r1, [r3, #0]
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 800316c:	2101      	movs	r1, #1
 800316e:	f7fe f945 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003172:	2064      	movs	r0, #100	; 0x64
 8003174:	f7fd fa86 	bl	8000684 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8003178:	2201      	movs	r2, #1
 800317a:	4620      	mov	r0, r4
 800317c:	4611      	mov	r1, r2
 800317e:	f7fe f93d 	bl	80013fc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003182:	2064      	movs	r0, #100	; 0x64
 8003184:	f7fd fa7e 	bl	8000684 <HAL_Delay>
	sccb_write(0xff, 0x01);
 8003188:	2101      	movs	r1, #1
 800318a:	20ff      	movs	r0, #255	; 0xff
 800318c:	f7ff ff50 	bl	8003030 <sccb_write>
	sccb_write(0x12, 0x80);
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	2012      	movs	r0, #18
 8003194:	f7ff ff4c 	bl	8003030 <sccb_write>
	HAL_Delay(100);
 8003198:	2064      	movs	r0, #100	; 0x64
 800319a:	f7fd fa73 	bl	8000684 <HAL_Delay>
}
 800319e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ov2640_stop_dcmi();
 80031a2:	f7ff bfcf 	b.w	8003144 <ov2640_stop_dcmi>
 80031a6:	bf00      	nop
 80031a8:	20025ad0 	.word	0x20025ad0
 80031ac:	40021800 	.word	0x40021800
 80031b0:	20025ac8 	.word	0x20025ac8

080031b4 <ov2640_capture_snapshot>:

void ov2640_capture_snapshot(uint32_t buf_addr, int len) {
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	4604      	mov	r4, r0
 80031b8:	460d      	mov	r5, r1
	ov2640_stop_dcmi();
 80031ba:	f7ff ffc3 	bl	8003144 <ov2640_stop_dcmi>
	HAL_DCMI_Start_DMA(phdcmi, DCMI_MODE_SNAPSHOT, buf_addr, len);
 80031be:	4804      	ldr	r0, [pc, #16]	; (80031d0 <ov2640_capture_snapshot+0x1c>)
 80031c0:	462b      	mov	r3, r5
 80031c2:	4622      	mov	r2, r4
 80031c4:	2102      	movs	r1, #2
 80031c6:	6800      	ldr	r0, [r0, #0]
}
 80031c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_DCMI_Start_DMA(phdcmi, DCMI_MODE_SNAPSHOT, buf_addr, len);
 80031cc:	f7fd bb5c 	b.w	8000888 <HAL_DCMI_Start_DMA>
 80031d0:	20025ac8 	.word	0x20025ac8

080031d4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_MspInit+0x2c>)
{
 80031d6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80031d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
 80031e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80031e6:	9200      	str	r2, [sp, #0]
 80031e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031fc:	b002      	add	sp, #8
 80031fe:	4770      	bx	lr
 8003200:	40023800 	.word	0x40023800

08003204 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003206:	b08d      	sub	sp, #52	; 0x34
 8003208:	4607      	mov	r7, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320a:	2214      	movs	r2, #20
 800320c:	2100      	movs	r1, #0
 800320e:	a807      	add	r0, sp, #28
 8003210:	f000 f9de 	bl	80035d0 <memset>
  if(hdcmi->Instance==DCMI)
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	4b4f      	ldr	r3, [pc, #316]	; (8003354 <HAL_DCMI_MspInit+0x150>)
 8003218:	429a      	cmp	r2, r3
 800321a:	f040 8099 	bne.w	8003350 <HAL_DCMI_MspInit+0x14c>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800321e:	4b4e      	ldr	r3, [pc, #312]	; (8003358 <HAL_DCMI_MspInit+0x154>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003220:	240d      	movs	r4, #13
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003224:	a907      	add	r1, sp, #28
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003226:	6b5a      	ldr	r2, [r3, #52]	; 0x34

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800322a:	484c      	ldr	r0, [pc, #304]	; (800335c <HAL_DCMI_MspInit+0x158>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	635a      	str	r2, [r3, #52]	; 0x34
 8003232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003234:	f002 0201 	and.w	r2, r2, #1
 8003238:	9201      	str	r2, [sp, #4]
 800323a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800323c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323e:	f042 0210 	orr.w	r2, r2, #16
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
 8003244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003246:	f002 0210 	and.w	r2, r2, #16
 800324a:	9202      	str	r2, [sp, #8]
 800324c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
 8003256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003258:	f002 0201 	and.w	r2, r2, #1
 800325c:	9203      	str	r2, [sp, #12]
 800325e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003262:	f042 0204 	orr.w	r2, r2, #4
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
 8003268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800326a:	f002 0204 	and.w	r2, r2, #4
 800326e:	9204      	str	r2, [sp, #16]
 8003270:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003274:	f042 0208 	orr.w	r2, r2, #8
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
 800327a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800327c:	f002 0208 	and.w	r2, r2, #8
 8003280:	9205      	str	r2, [sp, #20]
 8003282:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003294:	9306      	str	r3, [sp, #24]
 8003296:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003298:	2370      	movs	r3, #112	; 0x70
 800329a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800329c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800329e:	f7fd ffbd 	bl	800121c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80032a2:	2350      	movs	r3, #80	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a4:	a907      	add	r1, sp, #28
 80032a6:	482e      	ldr	r0, [pc, #184]	; (8003360 <HAL_DCMI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80032a8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80032aa:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b0:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b2:	f7fd ffb3 	bl	800121c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80032b6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ba:	a907      	add	r1, sp, #28
 80032bc:	4829      	ldr	r0, [pc, #164]	; (8003364 <HAL_DCMI_MspInit+0x160>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80032be:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80032c0:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c6:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c8:	f7fd ffa8 	bl	800121c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032cc:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032ce:	a907      	add	r1, sp, #28
 80032d0:	4825      	ldr	r0, [pc, #148]	; (8003368 <HAL_DCMI_MspInit+0x164>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032d2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80032d4:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032dc:	f7fd ff9e 	bl	800121c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032e0:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032e4:	4821      	ldr	r0, [pc, #132]	; (800336c <HAL_DCMI_MspInit+0x168>)
 80032e6:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80032e8:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032ea:	9307      	str	r3, [sp, #28]

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80032ec:	4c20      	ldr	r4, [pc, #128]	; (8003370 <HAL_DCMI_MspInit+0x16c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ee:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f2:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032f4:	f7fd ff92 	bl	800121c <HAL_GPIO_Init>
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80032f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032fc:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <HAL_DCMI_MspInit+0x170>)
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80032fe:	4620      	mov	r0, r4
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003300:	60a5      	str	r5, [r4, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8003302:	60e5      	str	r5, [r4, #12]
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8003304:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003306:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8003308:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800330c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003310:	6123      	str	r3, [r4, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003316:	6163      	str	r3, [r4, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003318:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800331c:	61a3      	str	r3, [r4, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800331e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003322:	61e3      	str	r3, [r4, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003324:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003328:	6223      	str	r3, [r4, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800332a:	2304      	movs	r3, #4
 800332c:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800332e:	2303      	movs	r3, #3
 8003330:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8003332:	f7fd fbb5 	bl	8000aa0 <HAL_DMA_Init>
 8003336:	b108      	cbz	r0, 800333c <HAL_DCMI_MspInit+0x138>
    {
      Error_Handler();
 8003338:	f7ff fe78 	bl	800302c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800333c:	2200      	movs	r2, #0
 800333e:	204e      	movs	r0, #78	; 0x4e
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8003340:	64bc      	str	r4, [r7, #72]	; 0x48
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8003342:	4611      	mov	r1, r2
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8003344:	63a7      	str	r7, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8003346:	f7fd f9c1 	bl	80006cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800334a:	204e      	movs	r0, #78	; 0x4e
 800334c:	f7fd f9f6 	bl	800073c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8003350:	b00d      	add	sp, #52	; 0x34
 8003352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003354:	50050000 	.word	0x50050000
 8003358:	40023800 	.word	0x40023800
 800335c:	40021000 	.word	0x40021000
 8003360:	40020000 	.word	0x40020000
 8003364:	40020800 	.word	0x40020800
 8003368:	40020c00 	.word	0x40020c00
 800336c:	40021800 	.word	0x40021800
 8003370:	200259b8 	.word	0x200259b8
 8003374:	40026428 	.word	0x40026428

08003378 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003378:	b510      	push	{r4, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337e:	2214      	movs	r2, #20
 8003380:	2100      	movs	r1, #0
 8003382:	a803      	add	r0, sp, #12
 8003384:	f000 f924 	bl	80035d0 <memset>
  if(hi2c->Instance==I2C1)
 8003388:	6822      	ldr	r2, [r4, #0]
 800338a:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <HAL_I2C_MspInit+0x60>)
 800338c:	429a      	cmp	r2, r3
 800338e:	d121      	bne.n	80033d4 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003390:	4c12      	ldr	r4, [pc, #72]	; (80033dc <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003392:	a903      	add	r1, sp, #12
 8003394:	4812      	ldr	r0, [pc, #72]	; (80033e0 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003396:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	6323      	str	r3, [r4, #48]	; 0x30
 800339e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	9301      	str	r3, [sp, #4]
 80033a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033ae:	2312      	movs	r3, #18
 80033b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033b2:	2301      	movs	r3, #1
 80033b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b6:	2303      	movs	r3, #3
 80033b8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033ba:	2304      	movs	r3, #4
 80033bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033be:	f7fd ff2d 	bl	800121c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033c8:	6423      	str	r3, [r4, #64]	; 0x40
 80033ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d0:	9302      	str	r3, [sp, #8]
 80033d2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033d4:	b008      	add	sp, #32
 80033d6:	bd10      	pop	{r4, pc}
 80033d8:	40005400 	.word	0x40005400
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40020400 	.word	0x40020400

080033e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ea:	2214      	movs	r2, #20
 80033ec:	2100      	movs	r1, #0
 80033ee:	a803      	add	r0, sp, #12
 80033f0:	f000 f8ee 	bl	80035d0 <memset>
  if(huart->Instance==USART3)
 80033f4:	682a      	ldr	r2, [r5, #0]
 80033f6:	4b27      	ldr	r3, [pc, #156]	; (8003494 <HAL_UART_MspInit+0xb0>)
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d148      	bne.n	800348e <HAL_UART_MspInit+0xaa>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80033fc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003400:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003402:	4825      	ldr	r0, [pc, #148]	; (8003498 <HAL_UART_MspInit+0xb4>)
 8003404:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 8003406:	6c1a      	ldr	r2, [r3, #64]	; 0x40

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003408:	4c24      	ldr	r4, [pc, #144]	; (800349c <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800340a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
 8003410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003412:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003416:	9201      	str	r2, [sp, #4]
 8003418:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800341a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341c:	f042 0208 	orr.w	r2, r2, #8
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003424:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	9302      	str	r3, [sp, #8]
 800342c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800342e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003432:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003438:	2307      	movs	r3, #7
 800343a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800343c:	f7fd feee 	bl	800121c <HAL_GPIO_Init>
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003440:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003444:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <HAL_UART_MspInit+0xbc>)
 8003446:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 800344a:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800344e:	6122      	str	r2, [r4, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003450:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003454:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003456:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003458:	6222      	str	r2, [r4, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800345a:	2204      	movs	r2, #4
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800345c:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003460:	2300      	movs	r3, #0
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003462:	6262      	str	r2, [r4, #36]	; 0x24
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003464:	60e3      	str	r3, [r4, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003466:	6163      	str	r3, [r4, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003468:	61a3      	str	r3, [r4, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800346a:	61e3      	str	r3, [r4, #28]
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800346c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800346e:	6323      	str	r3, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003470:	f7fd fb16 	bl	8000aa0 <HAL_DMA_Init>
 8003474:	b108      	cbz	r0, 800347a <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8003476:	f7ff fdd9 	bl	800302c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800347a:	2200      	movs	r2, #0
 800347c:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800347e:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003480:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003482:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003484:	f7fd f922 	bl	80006cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003488:	2027      	movs	r0, #39	; 0x27
 800348a:	f7fd f957 	bl	800073c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800348e:	b008      	add	sp, #32
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	bf00      	nop
 8003494:	40004800 	.word	0x40004800
 8003498:	40020c00 	.word	0x40020c00
 800349c:	20025a18 	.word	0x20025a18
 80034a0:	40026058 	.word	0x40026058

080034a4 <NMI_Handler>:
 80034a4:	4770      	bx	lr

080034a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034a6:	e7fe      	b.n	80034a6 <HardFault_Handler>

080034a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034a8:	e7fe      	b.n	80034a8 <MemManage_Handler>

080034aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034aa:	e7fe      	b.n	80034aa <BusFault_Handler>

080034ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034ac:	e7fe      	b.n	80034ac <UsageFault_Handler>

080034ae <SVC_Handler>:
 80034ae:	4770      	bx	lr

080034b0 <DebugMon_Handler>:
 80034b0:	4770      	bx	lr

080034b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034b2:	4770      	bx	lr

080034b4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034b4:	f7fd b8d4 	b.w	8000660 <HAL_IncTick>

080034b8 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80034b8:	4801      	ldr	r0, [pc, #4]	; (80034c0 <DMA1_Stream3_IRQHandler+0x8>)
 80034ba:	f7fd bc01 	b.w	8000cc0 <HAL_DMA_IRQHandler>
 80034be:	bf00      	nop
 80034c0:	20025a18 	.word	0x20025a18

080034c4 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034c4:	4801      	ldr	r0, [pc, #4]	; (80034cc <USART3_IRQHandler+0x8>)
 80034c6:	f7ff b911 	b.w	80026ec <HAL_UART_IRQHandler>
 80034ca:	bf00      	nop
 80034cc:	200258fc 	.word	0x200258fc

080034d0 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80034d0:	4801      	ldr	r0, [pc, #4]	; (80034d8 <DMA2_Stream1_IRQHandler+0x8>)
 80034d2:	f7fd bbf5 	b.w	8000cc0 <HAL_DMA_IRQHandler>
 80034d6:	bf00      	nop
 80034d8:	200259b8 	.word	0x200259b8

080034dc <DCMI_IRQHandler>:
void DCMI_IRQHandler(void)
{
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80034dc:	4801      	ldr	r0, [pc, #4]	; (80034e4 <DCMI_IRQHandler+0x8>)
 80034de:	f7fd ba7f 	b.w	80009e0 <HAL_DCMI_IRQHandler>
 80034e2:	bf00      	nop
 80034e4:	20025a78 	.word	0x20025a78

080034e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034e8:	490f      	ldr	r1, [pc, #60]	; (8003528 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034ea:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034ec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80034f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <SystemInit+0x44>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003502:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800350a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800350e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003510:	4a07      	ldr	r2, [pc, #28]	; (8003530 <SystemInit+0x48>)
 8003512:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800351a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800351c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800351e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003522:	608b      	str	r3, [r1, #8]
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000ed00 	.word	0xe000ed00
 800352c:	40023800 	.word	0x40023800
 8003530:	24003010 	.word	0x24003010

08003534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800356c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003538:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800353a:	e003      	b.n	8003544 <LoopCopyDataInit>

0800353c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800353e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003540:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003542:	3104      	adds	r1, #4

08003544 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003544:	480b      	ldr	r0, [pc, #44]	; (8003574 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003548:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800354a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800354c:	d3f6      	bcc.n	800353c <CopyDataInit>
  ldr  r2, =_sbss
 800354e:	4a0b      	ldr	r2, [pc, #44]	; (800357c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003550:	e002      	b.n	8003558 <LoopFillZerobss>

08003552 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003552:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003554:	f842 3b04 	str.w	r3, [r2], #4

08003558 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800355a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800355c:	d3f9      	bcc.n	8003552 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800355e:	f7ff ffc3 	bl	80034e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003562:	f000 f811 	bl	8003588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003566:	f7ff fbf5 	bl	8002d54 <main>
  bx  lr    
 800356a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800356c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003570:	08004150 	.word	0x08004150
  ldr  r0, =_sdata
 8003574:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003578:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800357c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003580:	20025ad8 	.word	0x20025ad8

08003584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003584:	e7fe      	b.n	8003584 <ADC_IRQHandler>
	...

08003588 <__libc_init_array>:
 8003588:	b570      	push	{r4, r5, r6, lr}
 800358a:	4e0d      	ldr	r6, [pc, #52]	; (80035c0 <__libc_init_array+0x38>)
 800358c:	4c0d      	ldr	r4, [pc, #52]	; (80035c4 <__libc_init_array+0x3c>)
 800358e:	1ba4      	subs	r4, r4, r6
 8003590:	10a4      	asrs	r4, r4, #2
 8003592:	2500      	movs	r5, #0
 8003594:	42a5      	cmp	r5, r4
 8003596:	d109      	bne.n	80035ac <__libc_init_array+0x24>
 8003598:	4e0b      	ldr	r6, [pc, #44]	; (80035c8 <__libc_init_array+0x40>)
 800359a:	4c0c      	ldr	r4, [pc, #48]	; (80035cc <__libc_init_array+0x44>)
 800359c:	f000 fc4a 	bl	8003e34 <_init>
 80035a0:	1ba4      	subs	r4, r4, r6
 80035a2:	10a4      	asrs	r4, r4, #2
 80035a4:	2500      	movs	r5, #0
 80035a6:	42a5      	cmp	r5, r4
 80035a8:	d105      	bne.n	80035b6 <__libc_init_array+0x2e>
 80035aa:	bd70      	pop	{r4, r5, r6, pc}
 80035ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035b0:	4798      	blx	r3
 80035b2:	3501      	adds	r5, #1
 80035b4:	e7ee      	b.n	8003594 <__libc_init_array+0xc>
 80035b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035ba:	4798      	blx	r3
 80035bc:	3501      	adds	r5, #1
 80035be:	e7f2      	b.n	80035a6 <__libc_init_array+0x1e>
 80035c0:	08004148 	.word	0x08004148
 80035c4:	08004148 	.word	0x08004148
 80035c8:	08004148 	.word	0x08004148
 80035cc:	0800414c 	.word	0x0800414c

080035d0 <memset>:
 80035d0:	4402      	add	r2, r0
 80035d2:	4603      	mov	r3, r0
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d100      	bne.n	80035da <memset+0xa>
 80035d8:	4770      	bx	lr
 80035da:	f803 1b01 	strb.w	r1, [r3], #1
 80035de:	e7f9      	b.n	80035d4 <memset+0x4>

080035e0 <_vsiprintf_r>:
 80035e0:	b510      	push	{r4, lr}
 80035e2:	b09a      	sub	sp, #104	; 0x68
 80035e4:	f44f 7402 	mov.w	r4, #520	; 0x208
 80035e8:	9100      	str	r1, [sp, #0]
 80035ea:	9104      	str	r1, [sp, #16]
 80035ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035f0:	9102      	str	r1, [sp, #8]
 80035f2:	9105      	str	r1, [sp, #20]
 80035f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035f8:	f8ad 100e 	strh.w	r1, [sp, #14]
 80035fc:	4669      	mov	r1, sp
 80035fe:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003602:	f000 f86b 	bl	80036dc <_svfiprintf_r>
 8003606:	9b00      	ldr	r3, [sp, #0]
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	b01a      	add	sp, #104	; 0x68
 800360e:	bd10      	pop	{r4, pc}

08003610 <vsiprintf>:
 8003610:	4613      	mov	r3, r2
 8003612:	460a      	mov	r2, r1
 8003614:	4601      	mov	r1, r0
 8003616:	4802      	ldr	r0, [pc, #8]	; (8003620 <vsiprintf+0x10>)
 8003618:	6800      	ldr	r0, [r0, #0]
 800361a:	f7ff bfe1 	b.w	80035e0 <_vsiprintf_r>
 800361e:	bf00      	nop
 8003620:	2000000c 	.word	0x2000000c

08003624 <__ssputs_r>:
 8003624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003628:	688e      	ldr	r6, [r1, #8]
 800362a:	429e      	cmp	r6, r3
 800362c:	4682      	mov	sl, r0
 800362e:	460c      	mov	r4, r1
 8003630:	4691      	mov	r9, r2
 8003632:	4698      	mov	r8, r3
 8003634:	d835      	bhi.n	80036a2 <__ssputs_r+0x7e>
 8003636:	898a      	ldrh	r2, [r1, #12]
 8003638:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800363c:	d031      	beq.n	80036a2 <__ssputs_r+0x7e>
 800363e:	6825      	ldr	r5, [r4, #0]
 8003640:	6909      	ldr	r1, [r1, #16]
 8003642:	1a6f      	subs	r7, r5, r1
 8003644:	6965      	ldr	r5, [r4, #20]
 8003646:	2302      	movs	r3, #2
 8003648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800364c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003650:	f108 0301 	add.w	r3, r8, #1
 8003654:	443b      	add	r3, r7
 8003656:	429d      	cmp	r5, r3
 8003658:	bf38      	it	cc
 800365a:	461d      	movcc	r5, r3
 800365c:	0553      	lsls	r3, r2, #21
 800365e:	d531      	bpl.n	80036c4 <__ssputs_r+0xa0>
 8003660:	4629      	mov	r1, r5
 8003662:	f000 fb39 	bl	8003cd8 <_malloc_r>
 8003666:	4606      	mov	r6, r0
 8003668:	b950      	cbnz	r0, 8003680 <__ssputs_r+0x5c>
 800366a:	230c      	movs	r3, #12
 800366c:	f8ca 3000 	str.w	r3, [sl]
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003676:	81a3      	strh	r3, [r4, #12]
 8003678:	f04f 30ff 	mov.w	r0, #4294967295
 800367c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003680:	463a      	mov	r2, r7
 8003682:	6921      	ldr	r1, [r4, #16]
 8003684:	f000 fab4 	bl	8003bf0 <memcpy>
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800368e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003692:	81a3      	strh	r3, [r4, #12]
 8003694:	6126      	str	r6, [r4, #16]
 8003696:	6165      	str	r5, [r4, #20]
 8003698:	443e      	add	r6, r7
 800369a:	1bed      	subs	r5, r5, r7
 800369c:	6026      	str	r6, [r4, #0]
 800369e:	60a5      	str	r5, [r4, #8]
 80036a0:	4646      	mov	r6, r8
 80036a2:	4546      	cmp	r6, r8
 80036a4:	bf28      	it	cs
 80036a6:	4646      	movcs	r6, r8
 80036a8:	4632      	mov	r2, r6
 80036aa:	4649      	mov	r1, r9
 80036ac:	6820      	ldr	r0, [r4, #0]
 80036ae:	f000 faaa 	bl	8003c06 <memmove>
 80036b2:	68a3      	ldr	r3, [r4, #8]
 80036b4:	1b9b      	subs	r3, r3, r6
 80036b6:	60a3      	str	r3, [r4, #8]
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	441e      	add	r6, r3
 80036bc:	6026      	str	r6, [r4, #0]
 80036be:	2000      	movs	r0, #0
 80036c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c4:	462a      	mov	r2, r5
 80036c6:	f000 fb65 	bl	8003d94 <_realloc_r>
 80036ca:	4606      	mov	r6, r0
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d1e1      	bne.n	8003694 <__ssputs_r+0x70>
 80036d0:	6921      	ldr	r1, [r4, #16]
 80036d2:	4650      	mov	r0, sl
 80036d4:	f000 fab2 	bl	8003c3c <_free_r>
 80036d8:	e7c7      	b.n	800366a <__ssputs_r+0x46>
	...

080036dc <_svfiprintf_r>:
 80036dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e0:	b09d      	sub	sp, #116	; 0x74
 80036e2:	4680      	mov	r8, r0
 80036e4:	9303      	str	r3, [sp, #12]
 80036e6:	898b      	ldrh	r3, [r1, #12]
 80036e8:	061c      	lsls	r4, r3, #24
 80036ea:	460d      	mov	r5, r1
 80036ec:	4616      	mov	r6, r2
 80036ee:	d50f      	bpl.n	8003710 <_svfiprintf_r+0x34>
 80036f0:	690b      	ldr	r3, [r1, #16]
 80036f2:	b96b      	cbnz	r3, 8003710 <_svfiprintf_r+0x34>
 80036f4:	2140      	movs	r1, #64	; 0x40
 80036f6:	f000 faef 	bl	8003cd8 <_malloc_r>
 80036fa:	6028      	str	r0, [r5, #0]
 80036fc:	6128      	str	r0, [r5, #16]
 80036fe:	b928      	cbnz	r0, 800370c <_svfiprintf_r+0x30>
 8003700:	230c      	movs	r3, #12
 8003702:	f8c8 3000 	str.w	r3, [r8]
 8003706:	f04f 30ff 	mov.w	r0, #4294967295
 800370a:	e0c5      	b.n	8003898 <_svfiprintf_r+0x1bc>
 800370c:	2340      	movs	r3, #64	; 0x40
 800370e:	616b      	str	r3, [r5, #20]
 8003710:	2300      	movs	r3, #0
 8003712:	9309      	str	r3, [sp, #36]	; 0x24
 8003714:	2320      	movs	r3, #32
 8003716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800371a:	2330      	movs	r3, #48	; 0x30
 800371c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003720:	f04f 0b01 	mov.w	fp, #1
 8003724:	4637      	mov	r7, r6
 8003726:	463c      	mov	r4, r7
 8003728:	f814 3b01 	ldrb.w	r3, [r4], #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d13c      	bne.n	80037aa <_svfiprintf_r+0xce>
 8003730:	ebb7 0a06 	subs.w	sl, r7, r6
 8003734:	d00b      	beq.n	800374e <_svfiprintf_r+0x72>
 8003736:	4653      	mov	r3, sl
 8003738:	4632      	mov	r2, r6
 800373a:	4629      	mov	r1, r5
 800373c:	4640      	mov	r0, r8
 800373e:	f7ff ff71 	bl	8003624 <__ssputs_r>
 8003742:	3001      	adds	r0, #1
 8003744:	f000 80a3 	beq.w	800388e <_svfiprintf_r+0x1b2>
 8003748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800374a:	4453      	add	r3, sl
 800374c:	9309      	str	r3, [sp, #36]	; 0x24
 800374e:	783b      	ldrb	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 809c 	beq.w	800388e <_svfiprintf_r+0x1b2>
 8003756:	2300      	movs	r3, #0
 8003758:	f04f 32ff 	mov.w	r2, #4294967295
 800375c:	9304      	str	r3, [sp, #16]
 800375e:	9307      	str	r3, [sp, #28]
 8003760:	9205      	str	r2, [sp, #20]
 8003762:	9306      	str	r3, [sp, #24]
 8003764:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003768:	931a      	str	r3, [sp, #104]	; 0x68
 800376a:	2205      	movs	r2, #5
 800376c:	7821      	ldrb	r1, [r4, #0]
 800376e:	4850      	ldr	r0, [pc, #320]	; (80038b0 <_svfiprintf_r+0x1d4>)
 8003770:	f7fc fd6e 	bl	8000250 <memchr>
 8003774:	1c67      	adds	r7, r4, #1
 8003776:	9b04      	ldr	r3, [sp, #16]
 8003778:	b9d8      	cbnz	r0, 80037b2 <_svfiprintf_r+0xd6>
 800377a:	06d9      	lsls	r1, r3, #27
 800377c:	bf44      	itt	mi
 800377e:	2220      	movmi	r2, #32
 8003780:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003784:	071a      	lsls	r2, r3, #28
 8003786:	bf44      	itt	mi
 8003788:	222b      	movmi	r2, #43	; 0x2b
 800378a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800378e:	7822      	ldrb	r2, [r4, #0]
 8003790:	2a2a      	cmp	r2, #42	; 0x2a
 8003792:	d016      	beq.n	80037c2 <_svfiprintf_r+0xe6>
 8003794:	9a07      	ldr	r2, [sp, #28]
 8003796:	2100      	movs	r1, #0
 8003798:	200a      	movs	r0, #10
 800379a:	4627      	mov	r7, r4
 800379c:	3401      	adds	r4, #1
 800379e:	783b      	ldrb	r3, [r7, #0]
 80037a0:	3b30      	subs	r3, #48	; 0x30
 80037a2:	2b09      	cmp	r3, #9
 80037a4:	d951      	bls.n	800384a <_svfiprintf_r+0x16e>
 80037a6:	b1c9      	cbz	r1, 80037dc <_svfiprintf_r+0x100>
 80037a8:	e011      	b.n	80037ce <_svfiprintf_r+0xf2>
 80037aa:	2b25      	cmp	r3, #37	; 0x25
 80037ac:	d0c0      	beq.n	8003730 <_svfiprintf_r+0x54>
 80037ae:	4627      	mov	r7, r4
 80037b0:	e7b9      	b.n	8003726 <_svfiprintf_r+0x4a>
 80037b2:	4a3f      	ldr	r2, [pc, #252]	; (80038b0 <_svfiprintf_r+0x1d4>)
 80037b4:	1a80      	subs	r0, r0, r2
 80037b6:	fa0b f000 	lsl.w	r0, fp, r0
 80037ba:	4318      	orrs	r0, r3
 80037bc:	9004      	str	r0, [sp, #16]
 80037be:	463c      	mov	r4, r7
 80037c0:	e7d3      	b.n	800376a <_svfiprintf_r+0x8e>
 80037c2:	9a03      	ldr	r2, [sp, #12]
 80037c4:	1d11      	adds	r1, r2, #4
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	9103      	str	r1, [sp, #12]
 80037ca:	2a00      	cmp	r2, #0
 80037cc:	db01      	blt.n	80037d2 <_svfiprintf_r+0xf6>
 80037ce:	9207      	str	r2, [sp, #28]
 80037d0:	e004      	b.n	80037dc <_svfiprintf_r+0x100>
 80037d2:	4252      	negs	r2, r2
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	9207      	str	r2, [sp, #28]
 80037da:	9304      	str	r3, [sp, #16]
 80037dc:	783b      	ldrb	r3, [r7, #0]
 80037de:	2b2e      	cmp	r3, #46	; 0x2e
 80037e0:	d10e      	bne.n	8003800 <_svfiprintf_r+0x124>
 80037e2:	787b      	ldrb	r3, [r7, #1]
 80037e4:	2b2a      	cmp	r3, #42	; 0x2a
 80037e6:	f107 0101 	add.w	r1, r7, #1
 80037ea:	d132      	bne.n	8003852 <_svfiprintf_r+0x176>
 80037ec:	9b03      	ldr	r3, [sp, #12]
 80037ee:	1d1a      	adds	r2, r3, #4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	9203      	str	r2, [sp, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bfb8      	it	lt
 80037f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80037fc:	3702      	adds	r7, #2
 80037fe:	9305      	str	r3, [sp, #20]
 8003800:	4c2c      	ldr	r4, [pc, #176]	; (80038b4 <_svfiprintf_r+0x1d8>)
 8003802:	7839      	ldrb	r1, [r7, #0]
 8003804:	2203      	movs	r2, #3
 8003806:	4620      	mov	r0, r4
 8003808:	f7fc fd22 	bl	8000250 <memchr>
 800380c:	b138      	cbz	r0, 800381e <_svfiprintf_r+0x142>
 800380e:	2340      	movs	r3, #64	; 0x40
 8003810:	1b00      	subs	r0, r0, r4
 8003812:	fa03 f000 	lsl.w	r0, r3, r0
 8003816:	9b04      	ldr	r3, [sp, #16]
 8003818:	4303      	orrs	r3, r0
 800381a:	9304      	str	r3, [sp, #16]
 800381c:	3701      	adds	r7, #1
 800381e:	7839      	ldrb	r1, [r7, #0]
 8003820:	4825      	ldr	r0, [pc, #148]	; (80038b8 <_svfiprintf_r+0x1dc>)
 8003822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003826:	2206      	movs	r2, #6
 8003828:	1c7e      	adds	r6, r7, #1
 800382a:	f7fc fd11 	bl	8000250 <memchr>
 800382e:	2800      	cmp	r0, #0
 8003830:	d035      	beq.n	800389e <_svfiprintf_r+0x1c2>
 8003832:	4b22      	ldr	r3, [pc, #136]	; (80038bc <_svfiprintf_r+0x1e0>)
 8003834:	b9fb      	cbnz	r3, 8003876 <_svfiprintf_r+0x19a>
 8003836:	9b03      	ldr	r3, [sp, #12]
 8003838:	3307      	adds	r3, #7
 800383a:	f023 0307 	bic.w	r3, r3, #7
 800383e:	3308      	adds	r3, #8
 8003840:	9303      	str	r3, [sp, #12]
 8003842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003844:	444b      	add	r3, r9
 8003846:	9309      	str	r3, [sp, #36]	; 0x24
 8003848:	e76c      	b.n	8003724 <_svfiprintf_r+0x48>
 800384a:	fb00 3202 	mla	r2, r0, r2, r3
 800384e:	2101      	movs	r1, #1
 8003850:	e7a3      	b.n	800379a <_svfiprintf_r+0xbe>
 8003852:	2300      	movs	r3, #0
 8003854:	9305      	str	r3, [sp, #20]
 8003856:	4618      	mov	r0, r3
 8003858:	240a      	movs	r4, #10
 800385a:	460f      	mov	r7, r1
 800385c:	3101      	adds	r1, #1
 800385e:	783a      	ldrb	r2, [r7, #0]
 8003860:	3a30      	subs	r2, #48	; 0x30
 8003862:	2a09      	cmp	r2, #9
 8003864:	d903      	bls.n	800386e <_svfiprintf_r+0x192>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ca      	beq.n	8003800 <_svfiprintf_r+0x124>
 800386a:	9005      	str	r0, [sp, #20]
 800386c:	e7c8      	b.n	8003800 <_svfiprintf_r+0x124>
 800386e:	fb04 2000 	mla	r0, r4, r0, r2
 8003872:	2301      	movs	r3, #1
 8003874:	e7f1      	b.n	800385a <_svfiprintf_r+0x17e>
 8003876:	ab03      	add	r3, sp, #12
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	462a      	mov	r2, r5
 800387c:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <_svfiprintf_r+0x1e4>)
 800387e:	a904      	add	r1, sp, #16
 8003880:	4640      	mov	r0, r8
 8003882:	f3af 8000 	nop.w
 8003886:	f1b0 3fff 	cmp.w	r0, #4294967295
 800388a:	4681      	mov	r9, r0
 800388c:	d1d9      	bne.n	8003842 <_svfiprintf_r+0x166>
 800388e:	89ab      	ldrh	r3, [r5, #12]
 8003890:	065b      	lsls	r3, r3, #25
 8003892:	f53f af38 	bmi.w	8003706 <_svfiprintf_r+0x2a>
 8003896:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003898:	b01d      	add	sp, #116	; 0x74
 800389a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800389e:	ab03      	add	r3, sp, #12
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	462a      	mov	r2, r5
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <_svfiprintf_r+0x1e4>)
 80038a6:	a904      	add	r1, sp, #16
 80038a8:	4640      	mov	r0, r8
 80038aa:	f000 f881 	bl	80039b0 <_printf_i>
 80038ae:	e7ea      	b.n	8003886 <_svfiprintf_r+0x1aa>
 80038b0:	0800410b 	.word	0x0800410b
 80038b4:	08004111 	.word	0x08004111
 80038b8:	08004115 	.word	0x08004115
 80038bc:	00000000 	.word	0x00000000
 80038c0:	08003625 	.word	0x08003625

080038c4 <_printf_common>:
 80038c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c8:	4691      	mov	r9, r2
 80038ca:	461f      	mov	r7, r3
 80038cc:	688a      	ldr	r2, [r1, #8]
 80038ce:	690b      	ldr	r3, [r1, #16]
 80038d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038d4:	4293      	cmp	r3, r2
 80038d6:	bfb8      	it	lt
 80038d8:	4613      	movlt	r3, r2
 80038da:	f8c9 3000 	str.w	r3, [r9]
 80038de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038e2:	4606      	mov	r6, r0
 80038e4:	460c      	mov	r4, r1
 80038e6:	b112      	cbz	r2, 80038ee <_printf_common+0x2a>
 80038e8:	3301      	adds	r3, #1
 80038ea:	f8c9 3000 	str.w	r3, [r9]
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	0699      	lsls	r1, r3, #26
 80038f2:	bf42      	ittt	mi
 80038f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80038f8:	3302      	addmi	r3, #2
 80038fa:	f8c9 3000 	strmi.w	r3, [r9]
 80038fe:	6825      	ldr	r5, [r4, #0]
 8003900:	f015 0506 	ands.w	r5, r5, #6
 8003904:	d107      	bne.n	8003916 <_printf_common+0x52>
 8003906:	f104 0a19 	add.w	sl, r4, #25
 800390a:	68e3      	ldr	r3, [r4, #12]
 800390c:	f8d9 2000 	ldr.w	r2, [r9]
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	429d      	cmp	r5, r3
 8003914:	db29      	blt.n	800396a <_printf_common+0xa6>
 8003916:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800391a:	6822      	ldr	r2, [r4, #0]
 800391c:	3300      	adds	r3, #0
 800391e:	bf18      	it	ne
 8003920:	2301      	movne	r3, #1
 8003922:	0692      	lsls	r2, r2, #26
 8003924:	d42e      	bmi.n	8003984 <_printf_common+0xc0>
 8003926:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800392a:	4639      	mov	r1, r7
 800392c:	4630      	mov	r0, r6
 800392e:	47c0      	blx	r8
 8003930:	3001      	adds	r0, #1
 8003932:	d021      	beq.n	8003978 <_printf_common+0xb4>
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	68e5      	ldr	r5, [r4, #12]
 8003938:	f8d9 2000 	ldr.w	r2, [r9]
 800393c:	f003 0306 	and.w	r3, r3, #6
 8003940:	2b04      	cmp	r3, #4
 8003942:	bf08      	it	eq
 8003944:	1aad      	subeq	r5, r5, r2
 8003946:	68a3      	ldr	r3, [r4, #8]
 8003948:	6922      	ldr	r2, [r4, #16]
 800394a:	bf0c      	ite	eq
 800394c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003950:	2500      	movne	r5, #0
 8003952:	4293      	cmp	r3, r2
 8003954:	bfc4      	itt	gt
 8003956:	1a9b      	subgt	r3, r3, r2
 8003958:	18ed      	addgt	r5, r5, r3
 800395a:	f04f 0900 	mov.w	r9, #0
 800395e:	341a      	adds	r4, #26
 8003960:	454d      	cmp	r5, r9
 8003962:	d11b      	bne.n	800399c <_printf_common+0xd8>
 8003964:	2000      	movs	r0, #0
 8003966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800396a:	2301      	movs	r3, #1
 800396c:	4652      	mov	r2, sl
 800396e:	4639      	mov	r1, r7
 8003970:	4630      	mov	r0, r6
 8003972:	47c0      	blx	r8
 8003974:	3001      	adds	r0, #1
 8003976:	d103      	bne.n	8003980 <_printf_common+0xbc>
 8003978:	f04f 30ff 	mov.w	r0, #4294967295
 800397c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003980:	3501      	adds	r5, #1
 8003982:	e7c2      	b.n	800390a <_printf_common+0x46>
 8003984:	18e1      	adds	r1, r4, r3
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	2030      	movs	r0, #48	; 0x30
 800398a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800398e:	4422      	add	r2, r4
 8003990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003998:	3302      	adds	r3, #2
 800399a:	e7c4      	b.n	8003926 <_printf_common+0x62>
 800399c:	2301      	movs	r3, #1
 800399e:	4622      	mov	r2, r4
 80039a0:	4639      	mov	r1, r7
 80039a2:	4630      	mov	r0, r6
 80039a4:	47c0      	blx	r8
 80039a6:	3001      	adds	r0, #1
 80039a8:	d0e6      	beq.n	8003978 <_printf_common+0xb4>
 80039aa:	f109 0901 	add.w	r9, r9, #1
 80039ae:	e7d7      	b.n	8003960 <_printf_common+0x9c>

080039b0 <_printf_i>:
 80039b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039b4:	4617      	mov	r7, r2
 80039b6:	7e0a      	ldrb	r2, [r1, #24]
 80039b8:	b085      	sub	sp, #20
 80039ba:	2a6e      	cmp	r2, #110	; 0x6e
 80039bc:	4698      	mov	r8, r3
 80039be:	4606      	mov	r6, r0
 80039c0:	460c      	mov	r4, r1
 80039c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039c4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80039c8:	f000 80bc 	beq.w	8003b44 <_printf_i+0x194>
 80039cc:	d81a      	bhi.n	8003a04 <_printf_i+0x54>
 80039ce:	2a63      	cmp	r2, #99	; 0x63
 80039d0:	d02e      	beq.n	8003a30 <_printf_i+0x80>
 80039d2:	d80a      	bhi.n	80039ea <_printf_i+0x3a>
 80039d4:	2a00      	cmp	r2, #0
 80039d6:	f000 80c8 	beq.w	8003b6a <_printf_i+0x1ba>
 80039da:	2a58      	cmp	r2, #88	; 0x58
 80039dc:	f000 808a 	beq.w	8003af4 <_printf_i+0x144>
 80039e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039e4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80039e8:	e02a      	b.n	8003a40 <_printf_i+0x90>
 80039ea:	2a64      	cmp	r2, #100	; 0x64
 80039ec:	d001      	beq.n	80039f2 <_printf_i+0x42>
 80039ee:	2a69      	cmp	r2, #105	; 0x69
 80039f0:	d1f6      	bne.n	80039e0 <_printf_i+0x30>
 80039f2:	6821      	ldr	r1, [r4, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80039fa:	d023      	beq.n	8003a44 <_printf_i+0x94>
 80039fc:	1d11      	adds	r1, r2, #4
 80039fe:	6019      	str	r1, [r3, #0]
 8003a00:	6813      	ldr	r3, [r2, #0]
 8003a02:	e027      	b.n	8003a54 <_printf_i+0xa4>
 8003a04:	2a73      	cmp	r2, #115	; 0x73
 8003a06:	f000 80b4 	beq.w	8003b72 <_printf_i+0x1c2>
 8003a0a:	d808      	bhi.n	8003a1e <_printf_i+0x6e>
 8003a0c:	2a6f      	cmp	r2, #111	; 0x6f
 8003a0e:	d02a      	beq.n	8003a66 <_printf_i+0xb6>
 8003a10:	2a70      	cmp	r2, #112	; 0x70
 8003a12:	d1e5      	bne.n	80039e0 <_printf_i+0x30>
 8003a14:	680a      	ldr	r2, [r1, #0]
 8003a16:	f042 0220 	orr.w	r2, r2, #32
 8003a1a:	600a      	str	r2, [r1, #0]
 8003a1c:	e003      	b.n	8003a26 <_printf_i+0x76>
 8003a1e:	2a75      	cmp	r2, #117	; 0x75
 8003a20:	d021      	beq.n	8003a66 <_printf_i+0xb6>
 8003a22:	2a78      	cmp	r2, #120	; 0x78
 8003a24:	d1dc      	bne.n	80039e0 <_printf_i+0x30>
 8003a26:	2278      	movs	r2, #120	; 0x78
 8003a28:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003a2c:	496e      	ldr	r1, [pc, #440]	; (8003be8 <_printf_i+0x238>)
 8003a2e:	e064      	b.n	8003afa <_printf_i+0x14a>
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003a36:	1d11      	adds	r1, r2, #4
 8003a38:	6019      	str	r1, [r3, #0]
 8003a3a:	6813      	ldr	r3, [r2, #0]
 8003a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0a3      	b.n	8003b8c <_printf_i+0x1dc>
 8003a44:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003a48:	f102 0104 	add.w	r1, r2, #4
 8003a4c:	6019      	str	r1, [r3, #0]
 8003a4e:	d0d7      	beq.n	8003a00 <_printf_i+0x50>
 8003a50:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	da03      	bge.n	8003a60 <_printf_i+0xb0>
 8003a58:	222d      	movs	r2, #45	; 0x2d
 8003a5a:	425b      	negs	r3, r3
 8003a5c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a60:	4962      	ldr	r1, [pc, #392]	; (8003bec <_printf_i+0x23c>)
 8003a62:	220a      	movs	r2, #10
 8003a64:	e017      	b.n	8003a96 <_printf_i+0xe6>
 8003a66:	6820      	ldr	r0, [r4, #0]
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003a6e:	d003      	beq.n	8003a78 <_printf_i+0xc8>
 8003a70:	1d08      	adds	r0, r1, #4
 8003a72:	6018      	str	r0, [r3, #0]
 8003a74:	680b      	ldr	r3, [r1, #0]
 8003a76:	e006      	b.n	8003a86 <_printf_i+0xd6>
 8003a78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a7c:	f101 0004 	add.w	r0, r1, #4
 8003a80:	6018      	str	r0, [r3, #0]
 8003a82:	d0f7      	beq.n	8003a74 <_printf_i+0xc4>
 8003a84:	880b      	ldrh	r3, [r1, #0]
 8003a86:	4959      	ldr	r1, [pc, #356]	; (8003bec <_printf_i+0x23c>)
 8003a88:	2a6f      	cmp	r2, #111	; 0x6f
 8003a8a:	bf14      	ite	ne
 8003a8c:	220a      	movne	r2, #10
 8003a8e:	2208      	moveq	r2, #8
 8003a90:	2000      	movs	r0, #0
 8003a92:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003a96:	6865      	ldr	r5, [r4, #4]
 8003a98:	60a5      	str	r5, [r4, #8]
 8003a9a:	2d00      	cmp	r5, #0
 8003a9c:	f2c0 809c 	blt.w	8003bd8 <_printf_i+0x228>
 8003aa0:	6820      	ldr	r0, [r4, #0]
 8003aa2:	f020 0004 	bic.w	r0, r0, #4
 8003aa6:	6020      	str	r0, [r4, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d13f      	bne.n	8003b2c <_printf_i+0x17c>
 8003aac:	2d00      	cmp	r5, #0
 8003aae:	f040 8095 	bne.w	8003bdc <_printf_i+0x22c>
 8003ab2:	4675      	mov	r5, lr
 8003ab4:	2a08      	cmp	r2, #8
 8003ab6:	d10b      	bne.n	8003ad0 <_printf_i+0x120>
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	07da      	lsls	r2, r3, #31
 8003abc:	d508      	bpl.n	8003ad0 <_printf_i+0x120>
 8003abe:	6923      	ldr	r3, [r4, #16]
 8003ac0:	6862      	ldr	r2, [r4, #4]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	bfde      	ittt	le
 8003ac6:	2330      	movle	r3, #48	; 0x30
 8003ac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003acc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ad0:	ebae 0305 	sub.w	r3, lr, r5
 8003ad4:	6123      	str	r3, [r4, #16]
 8003ad6:	f8cd 8000 	str.w	r8, [sp]
 8003ada:	463b      	mov	r3, r7
 8003adc:	aa03      	add	r2, sp, #12
 8003ade:	4621      	mov	r1, r4
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	f7ff feef 	bl	80038c4 <_printf_common>
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	d155      	bne.n	8003b96 <_printf_i+0x1e6>
 8003aea:	f04f 30ff 	mov.w	r0, #4294967295
 8003aee:	b005      	add	sp, #20
 8003af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003af4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003af8:	493c      	ldr	r1, [pc, #240]	; (8003bec <_printf_i+0x23c>)
 8003afa:	6822      	ldr	r2, [r4, #0]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b02:	f100 0504 	add.w	r5, r0, #4
 8003b06:	601d      	str	r5, [r3, #0]
 8003b08:	d001      	beq.n	8003b0e <_printf_i+0x15e>
 8003b0a:	6803      	ldr	r3, [r0, #0]
 8003b0c:	e002      	b.n	8003b14 <_printf_i+0x164>
 8003b0e:	0655      	lsls	r5, r2, #25
 8003b10:	d5fb      	bpl.n	8003b0a <_printf_i+0x15a>
 8003b12:	8803      	ldrh	r3, [r0, #0]
 8003b14:	07d0      	lsls	r0, r2, #31
 8003b16:	bf44      	itt	mi
 8003b18:	f042 0220 	orrmi.w	r2, r2, #32
 8003b1c:	6022      	strmi	r2, [r4, #0]
 8003b1e:	b91b      	cbnz	r3, 8003b28 <_printf_i+0x178>
 8003b20:	6822      	ldr	r2, [r4, #0]
 8003b22:	f022 0220 	bic.w	r2, r2, #32
 8003b26:	6022      	str	r2, [r4, #0]
 8003b28:	2210      	movs	r2, #16
 8003b2a:	e7b1      	b.n	8003a90 <_printf_i+0xe0>
 8003b2c:	4675      	mov	r5, lr
 8003b2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003b32:	fb02 3310 	mls	r3, r2, r0, r3
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d1f5      	bne.n	8003b2e <_printf_i+0x17e>
 8003b42:	e7b7      	b.n	8003ab4 <_printf_i+0x104>
 8003b44:	6808      	ldr	r0, [r1, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	6949      	ldr	r1, [r1, #20]
 8003b4a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003b4e:	d004      	beq.n	8003b5a <_printf_i+0x1aa>
 8003b50:	1d10      	adds	r0, r2, #4
 8003b52:	6018      	str	r0, [r3, #0]
 8003b54:	6813      	ldr	r3, [r2, #0]
 8003b56:	6019      	str	r1, [r3, #0]
 8003b58:	e007      	b.n	8003b6a <_printf_i+0x1ba>
 8003b5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b5e:	f102 0004 	add.w	r0, r2, #4
 8003b62:	6018      	str	r0, [r3, #0]
 8003b64:	6813      	ldr	r3, [r2, #0]
 8003b66:	d0f6      	beq.n	8003b56 <_printf_i+0x1a6>
 8003b68:	8019      	strh	r1, [r3, #0]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	6123      	str	r3, [r4, #16]
 8003b6e:	4675      	mov	r5, lr
 8003b70:	e7b1      	b.n	8003ad6 <_printf_i+0x126>
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	1d11      	adds	r1, r2, #4
 8003b76:	6019      	str	r1, [r3, #0]
 8003b78:	6815      	ldr	r5, [r2, #0]
 8003b7a:	6862      	ldr	r2, [r4, #4]
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4628      	mov	r0, r5
 8003b80:	f7fc fb66 	bl	8000250 <memchr>
 8003b84:	b108      	cbz	r0, 8003b8a <_printf_i+0x1da>
 8003b86:	1b40      	subs	r0, r0, r5
 8003b88:	6060      	str	r0, [r4, #4]
 8003b8a:	6863      	ldr	r3, [r4, #4]
 8003b8c:	6123      	str	r3, [r4, #16]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b94:	e79f      	b.n	8003ad6 <_printf_i+0x126>
 8003b96:	6923      	ldr	r3, [r4, #16]
 8003b98:	462a      	mov	r2, r5
 8003b9a:	4639      	mov	r1, r7
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	47c0      	blx	r8
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d0a2      	beq.n	8003aea <_printf_i+0x13a>
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	079b      	lsls	r3, r3, #30
 8003ba8:	d507      	bpl.n	8003bba <_printf_i+0x20a>
 8003baa:	2500      	movs	r5, #0
 8003bac:	f104 0919 	add.w	r9, r4, #25
 8003bb0:	68e3      	ldr	r3, [r4, #12]
 8003bb2:	9a03      	ldr	r2, [sp, #12]
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	429d      	cmp	r5, r3
 8003bb8:	db05      	blt.n	8003bc6 <_printf_i+0x216>
 8003bba:	68e0      	ldr	r0, [r4, #12]
 8003bbc:	9b03      	ldr	r3, [sp, #12]
 8003bbe:	4298      	cmp	r0, r3
 8003bc0:	bfb8      	it	lt
 8003bc2:	4618      	movlt	r0, r3
 8003bc4:	e793      	b.n	8003aee <_printf_i+0x13e>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	464a      	mov	r2, r9
 8003bca:	4639      	mov	r1, r7
 8003bcc:	4630      	mov	r0, r6
 8003bce:	47c0      	blx	r8
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	d08a      	beq.n	8003aea <_printf_i+0x13a>
 8003bd4:	3501      	adds	r5, #1
 8003bd6:	e7eb      	b.n	8003bb0 <_printf_i+0x200>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1a7      	bne.n	8003b2c <_printf_i+0x17c>
 8003bdc:	780b      	ldrb	r3, [r1, #0]
 8003bde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003be2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003be6:	e765      	b.n	8003ab4 <_printf_i+0x104>
 8003be8:	0800412d 	.word	0x0800412d
 8003bec:	0800411c 	.word	0x0800411c

08003bf0 <memcpy>:
 8003bf0:	b510      	push	{r4, lr}
 8003bf2:	1e43      	subs	r3, r0, #1
 8003bf4:	440a      	add	r2, r1
 8003bf6:	4291      	cmp	r1, r2
 8003bf8:	d100      	bne.n	8003bfc <memcpy+0xc>
 8003bfa:	bd10      	pop	{r4, pc}
 8003bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c04:	e7f7      	b.n	8003bf6 <memcpy+0x6>

08003c06 <memmove>:
 8003c06:	4288      	cmp	r0, r1
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	eb01 0302 	add.w	r3, r1, r2
 8003c0e:	d803      	bhi.n	8003c18 <memmove+0x12>
 8003c10:	1e42      	subs	r2, r0, #1
 8003c12:	4299      	cmp	r1, r3
 8003c14:	d10c      	bne.n	8003c30 <memmove+0x2a>
 8003c16:	bd10      	pop	{r4, pc}
 8003c18:	4298      	cmp	r0, r3
 8003c1a:	d2f9      	bcs.n	8003c10 <memmove+0xa>
 8003c1c:	1881      	adds	r1, r0, r2
 8003c1e:	1ad2      	subs	r2, r2, r3
 8003c20:	42d3      	cmn	r3, r2
 8003c22:	d100      	bne.n	8003c26 <memmove+0x20>
 8003c24:	bd10      	pop	{r4, pc}
 8003c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c2a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c2e:	e7f7      	b.n	8003c20 <memmove+0x1a>
 8003c30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c34:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c38:	e7eb      	b.n	8003c12 <memmove+0xc>
	...

08003c3c <_free_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4605      	mov	r5, r0
 8003c40:	2900      	cmp	r1, #0
 8003c42:	d045      	beq.n	8003cd0 <_free_r+0x94>
 8003c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c48:	1f0c      	subs	r4, r1, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	bfb8      	it	lt
 8003c4e:	18e4      	addlt	r4, r4, r3
 8003c50:	f000 f8d6 	bl	8003e00 <__malloc_lock>
 8003c54:	4a1f      	ldr	r2, [pc, #124]	; (8003cd4 <_free_r+0x98>)
 8003c56:	6813      	ldr	r3, [r2, #0]
 8003c58:	4610      	mov	r0, r2
 8003c5a:	b933      	cbnz	r3, 8003c6a <_free_r+0x2e>
 8003c5c:	6063      	str	r3, [r4, #4]
 8003c5e:	6014      	str	r4, [r2, #0]
 8003c60:	4628      	mov	r0, r5
 8003c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c66:	f000 b8cc 	b.w	8003e02 <__malloc_unlock>
 8003c6a:	42a3      	cmp	r3, r4
 8003c6c:	d90c      	bls.n	8003c88 <_free_r+0x4c>
 8003c6e:	6821      	ldr	r1, [r4, #0]
 8003c70:	1862      	adds	r2, r4, r1
 8003c72:	4293      	cmp	r3, r2
 8003c74:	bf04      	itt	eq
 8003c76:	681a      	ldreq	r2, [r3, #0]
 8003c78:	685b      	ldreq	r3, [r3, #4]
 8003c7a:	6063      	str	r3, [r4, #4]
 8003c7c:	bf04      	itt	eq
 8003c7e:	1852      	addeq	r2, r2, r1
 8003c80:	6022      	streq	r2, [r4, #0]
 8003c82:	6004      	str	r4, [r0, #0]
 8003c84:	e7ec      	b.n	8003c60 <_free_r+0x24>
 8003c86:	4613      	mov	r3, r2
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	b10a      	cbz	r2, 8003c90 <_free_r+0x54>
 8003c8c:	42a2      	cmp	r2, r4
 8003c8e:	d9fa      	bls.n	8003c86 <_free_r+0x4a>
 8003c90:	6819      	ldr	r1, [r3, #0]
 8003c92:	1858      	adds	r0, r3, r1
 8003c94:	42a0      	cmp	r0, r4
 8003c96:	d10b      	bne.n	8003cb0 <_free_r+0x74>
 8003c98:	6820      	ldr	r0, [r4, #0]
 8003c9a:	4401      	add	r1, r0
 8003c9c:	1858      	adds	r0, r3, r1
 8003c9e:	4282      	cmp	r2, r0
 8003ca0:	6019      	str	r1, [r3, #0]
 8003ca2:	d1dd      	bne.n	8003c60 <_free_r+0x24>
 8003ca4:	6810      	ldr	r0, [r2, #0]
 8003ca6:	6852      	ldr	r2, [r2, #4]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	4401      	add	r1, r0
 8003cac:	6019      	str	r1, [r3, #0]
 8003cae:	e7d7      	b.n	8003c60 <_free_r+0x24>
 8003cb0:	d902      	bls.n	8003cb8 <_free_r+0x7c>
 8003cb2:	230c      	movs	r3, #12
 8003cb4:	602b      	str	r3, [r5, #0]
 8003cb6:	e7d3      	b.n	8003c60 <_free_r+0x24>
 8003cb8:	6820      	ldr	r0, [r4, #0]
 8003cba:	1821      	adds	r1, r4, r0
 8003cbc:	428a      	cmp	r2, r1
 8003cbe:	bf04      	itt	eq
 8003cc0:	6811      	ldreq	r1, [r2, #0]
 8003cc2:	6852      	ldreq	r2, [r2, #4]
 8003cc4:	6062      	str	r2, [r4, #4]
 8003cc6:	bf04      	itt	eq
 8003cc8:	1809      	addeq	r1, r1, r0
 8003cca:	6021      	streq	r1, [r4, #0]
 8003ccc:	605c      	str	r4, [r3, #4]
 8003cce:	e7c7      	b.n	8003c60 <_free_r+0x24>
 8003cd0:	bd38      	pop	{r3, r4, r5, pc}
 8003cd2:	bf00      	nop
 8003cd4:	2002588c 	.word	0x2002588c

08003cd8 <_malloc_r>:
 8003cd8:	b570      	push	{r4, r5, r6, lr}
 8003cda:	1ccd      	adds	r5, r1, #3
 8003cdc:	f025 0503 	bic.w	r5, r5, #3
 8003ce0:	3508      	adds	r5, #8
 8003ce2:	2d0c      	cmp	r5, #12
 8003ce4:	bf38      	it	cc
 8003ce6:	250c      	movcc	r5, #12
 8003ce8:	2d00      	cmp	r5, #0
 8003cea:	4606      	mov	r6, r0
 8003cec:	db01      	blt.n	8003cf2 <_malloc_r+0x1a>
 8003cee:	42a9      	cmp	r1, r5
 8003cf0:	d903      	bls.n	8003cfa <_malloc_r+0x22>
 8003cf2:	230c      	movs	r3, #12
 8003cf4:	6033      	str	r3, [r6, #0]
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	bd70      	pop	{r4, r5, r6, pc}
 8003cfa:	f000 f881 	bl	8003e00 <__malloc_lock>
 8003cfe:	4a23      	ldr	r2, [pc, #140]	; (8003d8c <_malloc_r+0xb4>)
 8003d00:	6814      	ldr	r4, [r2, #0]
 8003d02:	4621      	mov	r1, r4
 8003d04:	b991      	cbnz	r1, 8003d2c <_malloc_r+0x54>
 8003d06:	4c22      	ldr	r4, [pc, #136]	; (8003d90 <_malloc_r+0xb8>)
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	b91b      	cbnz	r3, 8003d14 <_malloc_r+0x3c>
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	f000 f867 	bl	8003de0 <_sbrk_r>
 8003d12:	6020      	str	r0, [r4, #0]
 8003d14:	4629      	mov	r1, r5
 8003d16:	4630      	mov	r0, r6
 8003d18:	f000 f862 	bl	8003de0 <_sbrk_r>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d126      	bne.n	8003d6e <_malloc_r+0x96>
 8003d20:	230c      	movs	r3, #12
 8003d22:	6033      	str	r3, [r6, #0]
 8003d24:	4630      	mov	r0, r6
 8003d26:	f000 f86c 	bl	8003e02 <__malloc_unlock>
 8003d2a:	e7e4      	b.n	8003cf6 <_malloc_r+0x1e>
 8003d2c:	680b      	ldr	r3, [r1, #0]
 8003d2e:	1b5b      	subs	r3, r3, r5
 8003d30:	d41a      	bmi.n	8003d68 <_malloc_r+0x90>
 8003d32:	2b0b      	cmp	r3, #11
 8003d34:	d90f      	bls.n	8003d56 <_malloc_r+0x7e>
 8003d36:	600b      	str	r3, [r1, #0]
 8003d38:	50cd      	str	r5, [r1, r3]
 8003d3a:	18cc      	adds	r4, r1, r3
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f000 f860 	bl	8003e02 <__malloc_unlock>
 8003d42:	f104 000b 	add.w	r0, r4, #11
 8003d46:	1d23      	adds	r3, r4, #4
 8003d48:	f020 0007 	bic.w	r0, r0, #7
 8003d4c:	1ac3      	subs	r3, r0, r3
 8003d4e:	d01b      	beq.n	8003d88 <_malloc_r+0xb0>
 8003d50:	425a      	negs	r2, r3
 8003d52:	50e2      	str	r2, [r4, r3]
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
 8003d56:	428c      	cmp	r4, r1
 8003d58:	bf0d      	iteet	eq
 8003d5a:	6863      	ldreq	r3, [r4, #4]
 8003d5c:	684b      	ldrne	r3, [r1, #4]
 8003d5e:	6063      	strne	r3, [r4, #4]
 8003d60:	6013      	streq	r3, [r2, #0]
 8003d62:	bf18      	it	ne
 8003d64:	460c      	movne	r4, r1
 8003d66:	e7e9      	b.n	8003d3c <_malloc_r+0x64>
 8003d68:	460c      	mov	r4, r1
 8003d6a:	6849      	ldr	r1, [r1, #4]
 8003d6c:	e7ca      	b.n	8003d04 <_malloc_r+0x2c>
 8003d6e:	1cc4      	adds	r4, r0, #3
 8003d70:	f024 0403 	bic.w	r4, r4, #3
 8003d74:	42a0      	cmp	r0, r4
 8003d76:	d005      	beq.n	8003d84 <_malloc_r+0xac>
 8003d78:	1a21      	subs	r1, r4, r0
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	f000 f830 	bl	8003de0 <_sbrk_r>
 8003d80:	3001      	adds	r0, #1
 8003d82:	d0cd      	beq.n	8003d20 <_malloc_r+0x48>
 8003d84:	6025      	str	r5, [r4, #0]
 8003d86:	e7d9      	b.n	8003d3c <_malloc_r+0x64>
 8003d88:	bd70      	pop	{r4, r5, r6, pc}
 8003d8a:	bf00      	nop
 8003d8c:	2002588c 	.word	0x2002588c
 8003d90:	20025890 	.word	0x20025890

08003d94 <_realloc_r>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	4607      	mov	r7, r0
 8003d98:	4614      	mov	r4, r2
 8003d9a:	460e      	mov	r6, r1
 8003d9c:	b921      	cbnz	r1, 8003da8 <_realloc_r+0x14>
 8003d9e:	4611      	mov	r1, r2
 8003da0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003da4:	f7ff bf98 	b.w	8003cd8 <_malloc_r>
 8003da8:	b922      	cbnz	r2, 8003db4 <_realloc_r+0x20>
 8003daa:	f7ff ff47 	bl	8003c3c <_free_r>
 8003dae:	4625      	mov	r5, r4
 8003db0:	4628      	mov	r0, r5
 8003db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003db4:	f000 f826 	bl	8003e04 <_malloc_usable_size_r>
 8003db8:	4284      	cmp	r4, r0
 8003dba:	d90f      	bls.n	8003ddc <_realloc_r+0x48>
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	4638      	mov	r0, r7
 8003dc0:	f7ff ff8a 	bl	8003cd8 <_malloc_r>
 8003dc4:	4605      	mov	r5, r0
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	d0f2      	beq.n	8003db0 <_realloc_r+0x1c>
 8003dca:	4631      	mov	r1, r6
 8003dcc:	4622      	mov	r2, r4
 8003dce:	f7ff ff0f 	bl	8003bf0 <memcpy>
 8003dd2:	4631      	mov	r1, r6
 8003dd4:	4638      	mov	r0, r7
 8003dd6:	f7ff ff31 	bl	8003c3c <_free_r>
 8003dda:	e7e9      	b.n	8003db0 <_realloc_r+0x1c>
 8003ddc:	4635      	mov	r5, r6
 8003dde:	e7e7      	b.n	8003db0 <_realloc_r+0x1c>

08003de0 <_sbrk_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4c06      	ldr	r4, [pc, #24]	; (8003dfc <_sbrk_r+0x1c>)
 8003de4:	2300      	movs	r3, #0
 8003de6:	4605      	mov	r5, r0
 8003de8:	4608      	mov	r0, r1
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	f000 f814 	bl	8003e18 <_sbrk>
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	d102      	bne.n	8003dfa <_sbrk_r+0x1a>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	b103      	cbz	r3, 8003dfa <_sbrk_r+0x1a>
 8003df8:	602b      	str	r3, [r5, #0]
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}
 8003dfc:	20025ad4 	.word	0x20025ad4

08003e00 <__malloc_lock>:
 8003e00:	4770      	bx	lr

08003e02 <__malloc_unlock>:
 8003e02:	4770      	bx	lr

08003e04 <_malloc_usable_size_r>:
 8003e04:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	f1a0 0004 	sub.w	r0, r0, #4
 8003e0e:	bfbc      	itt	lt
 8003e10:	580b      	ldrlt	r3, [r1, r0]
 8003e12:	18c0      	addlt	r0, r0, r3
 8003e14:	4770      	bx	lr
	...

08003e18 <_sbrk>:
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <_sbrk+0x14>)
 8003e1a:	6819      	ldr	r1, [r3, #0]
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	b909      	cbnz	r1, 8003e24 <_sbrk+0xc>
 8003e20:	4903      	ldr	r1, [pc, #12]	; (8003e30 <_sbrk+0x18>)
 8003e22:	6019      	str	r1, [r3, #0]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	4402      	add	r2, r0
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	4770      	bx	lr
 8003e2c:	20025894 	.word	0x20025894
 8003e30:	20025ad8 	.word	0x20025ad8

08003e34 <_init>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	bf00      	nop
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr

08003e40 <_fini>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr
